{"version":3,"file":"main.js","mappings":"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","sources":["webpack://riddet-app/./apps/riddet-api/src/app/app.controller.ts","webpack://riddet-app/./apps/riddet-api/src/app/app.module.ts","webpack://riddet-app/./apps/riddet-api/src/app/app.service.ts","webpack://riddet-app/./apps/riddet-api/src/app/auth/auth.controller.ts","webpack://riddet-app/./apps/riddet-api/src/app/auth/auth.module.ts","webpack://riddet-app/./apps/riddet-api/src/app/auth/auth.service.ts","webpack://riddet-app/./apps/riddet-api/src/app/auth/constants.ts","webpack://riddet-app/./apps/riddet-api/src/app/auth/jwt-auth.guard.ts","webpack://riddet-app/./apps/riddet-api/src/app/auth/jwt.strategy.ts","webpack://riddet-app/./apps/riddet-api/src/app/auth/local.strategy.ts","webpack://riddet-app/./apps/riddet-api/src/app/auth/role.enum.ts","webpack://riddet-app/./apps/riddet-api/src/app/auth/roles.guard.ts","webpack://riddet-app/./apps/riddet-api/src/app/category/category.controller.ts","webpack://riddet-app/./apps/riddet-api/src/app/category/category.dto.ts","webpack://riddet-app/./apps/riddet-api/src/app/category/category.module.ts","webpack://riddet-app/./apps/riddet-api/src/app/category/category.schema.ts","webpack://riddet-app/./apps/riddet-api/src/app/category/category.service.ts","webpack://riddet-app/./apps/riddet-api/src/app/community/community.controller.ts","webpack://riddet-app/./apps/riddet-api/src/app/community/community.dto.ts","webpack://riddet-app/./apps/riddet-api/src/app/community/community.module.ts","webpack://riddet-app/./apps/riddet-api/src/app/community/community.schema.ts","webpack://riddet-app/./apps/riddet-api/src/app/community/community.service.ts","webpack://riddet-app/./apps/riddet-api/src/app/message/message.controller.ts","webpack://riddet-app/./apps/riddet-api/src/app/message/message.dto.ts","webpack://riddet-app/./apps/riddet-api/src/app/message/message.module.ts","webpack://riddet-app/./apps/riddet-api/src/app/message/message.schema.ts","webpack://riddet-app/./apps/riddet-api/src/app/message/message.service.ts","webpack://riddet-app/./apps/riddet-api/src/app/shared/filters/validation.exception.ts","webpack://riddet-app/./apps/riddet-api/src/app/shared/filters/validation.filter.ts","webpack://riddet-app/./apps/riddet-api/src/app/shared/pipes/ParseObjectIdPipe.ts","webpack://riddet-app/./apps/riddet-api/src/app/thread/thread-dto.ts","webpack://riddet-app/./apps/riddet-api/src/app/thread/thread.controller.ts","webpack://riddet-app/./apps/riddet-api/src/app/thread/thread.module.ts","webpack://riddet-app/./apps/riddet-api/src/app/thread/thread.schema.ts","webpack://riddet-app/./apps/riddet-api/src/app/thread/thread.service.ts","webpack://riddet-app/./apps/riddet-api/src/app/user/user.controller.ts","webpack://riddet-app/./apps/riddet-api/src/app/user/user.dto.ts","webpack://riddet-app/./apps/riddet-api/src/app/user/user.module.ts","webpack://riddet-app/./apps/riddet-api/src/app/user/user.schema.ts","webpack://riddet-app/./apps/riddet-api/src/app/user/user.service.ts","webpack://riddet-app/./apps/riddet-api/src/environments/environment.prod.ts","webpack://riddet-app/external commonjs \"@nestjs/common\"","webpack://riddet-app/external commonjs \"@nestjs/core\"","webpack://riddet-app/external commonjs \"@nestjs/jwt\"","webpack://riddet-app/external commonjs \"@nestjs/mongoose\"","webpack://riddet-app/external commonjs \"@nestjs/passport\"","webpack://riddet-app/external commonjs \"bcryptjs\"","webpack://riddet-app/external commonjs \"class-validator\"","webpack://riddet-app/external commonjs \"mongodb\"","webpack://riddet-app/external commonjs \"mongoose\"","webpack://riddet-app/external commonjs \"passport-jwt\"","webpack://riddet-app/external commonjs \"passport-local\"","webpack://riddet-app/external commonjs \"tslib\"","webpack://riddet-app/webpack/bootstrap","webpack://riddet-app/./apps/riddet-api/src/main.ts"],"sourcesContent":["import { Controller, Get } from '@nestjs/common';\r\nimport { AppService } from './app.service';\r\n\r\n@Controller()\r\nexport class AppController {\r\n  constructor(private readonly appService: AppService) {}\r\n\r\n  @Get()\r\n  getData() {\r\n    return this.appService.getData();\r\n  }\r\n}\r\n","import { AuthModule } from './auth/auth.module';\r\n\r\nimport { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\n\r\nimport { APP_GUARD } from '@nestjs/core';\r\nimport { CommunityModule } from '../app/community/community.module';\r\nimport { ThreadModule } from '../app/thread/thread.module';\r\nimport { environment } from '../environments/environment.prod';\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\r\nimport { RolesGuard } from './auth/roles.guard';\r\nimport { CategoryModule } from './category/category.module';\r\nimport { MessageModule } from './message/message.module';\r\nimport { UserModule } from './user/user.module';\r\n\r\n@Module({\r\n  imports: [\r\n    MongooseModule.forRoot(environment.DATABASE_CONNECTION),\r\n    CommunityModule,\r\n    ThreadModule,\r\n    UserModule,\r\n    AuthModule,\r\n    CategoryModule,\r\n    MessageModule,\r\n\r\n  ],\r\n  controllers: [AppController],\r\n  providers: [\r\n    {\r\n      provide: APP_GUARD,\r\n      useClass: JwtAuthGuard,\r\n    },\r\n    {\r\n      provide: APP_GUARD,\r\n      useClass: RolesGuard,\r\n    },\r\n    AppService,\r\n  ],\r\n})\r\nexport class AppModule {}\r\n","import { Injectable } from '@nestjs/common';\r\n\r\n@Injectable()\r\nexport class AppService {\r\n\r\n  getData(): { message: string } {\r\n    return { message: 'Welcome to riddet-api!' };\r\n  }\r\n}\r\n","import { Body, Controller, Get, Post, Request, UseGuards } from '@nestjs/common';\r\nimport { AuthGuard } from '@nestjs/passport';\r\nimport { CreateUserDto } from '../user/user.dto';\r\nimport { Public, Roles } from './auth.module';\r\nimport { AuthService } from './auth.service';\r\nimport { Role } from './role.enum';\r\n@Controller()\r\nexport class AuthController {\r\n  constructor(private readonly authService : AuthService) {}\r\n\r\n  @Public()\r\n  @UseGuards(AuthGuard('local'))\r\n  @Post('auth/login')\r\n  async login(@Request() req) {\r\n      return this.authService.login(req.body);\r\n  }\r\n\r\n  @Public()\r\n  @Post('auth/register')\t\r\n  async register(@Body() CreateUserDto : CreateUserDto) {\r\n      return this.authService.register(CreateUserDto);\r\n  }\r\n\r\n  @Roles(Role.User)\r\n  @Get('profile')\r\n  getProfile(@Request() req) {\r\n    return req.user;\r\n  }\r\n}\r\n","export const IS_PUBLIC_KEY = 'isPublic';\r\nexport const Public = () => SetMetadata(IS_PUBLIC_KEY, true);\r\n\r\nexport const ROLES_KEY = 'roles';\r\nexport const Roles = (...roles: Role[]) => SetMetadata(ROLES_KEY, roles);\r\n\r\nimport { Module, SetMetadata } from '@nestjs/common';\r\nimport { JwtModule } from '@nestjs/jwt';\r\nimport { PassportModule } from '@nestjs/passport';\r\nimport { UserModule } from '../user/user.module';\r\nimport { AuthController } from './auth.controller';\r\nimport { AuthService } from './auth.service';\r\nimport { jwtConstants } from './constants';\r\nimport { JwtStrategy } from './jwt.strategy';\r\nimport { LocalStrategy } from './local.strategy';\r\nimport { Role } from './role.enum';\r\n\r\n@Module({\r\n  imports: [\r\n    UserModule,\r\n    PassportModule,\r\n    JwtModule.register({\r\n      secret: jwtConstants.secret,\r\n      signOptions: { expiresIn: '2d' },\r\n    }),\r\n\r\n  ],\r\n  providers: [AuthService, LocalStrategy, JwtStrategy],\r\n  exports: [AuthService],\r\n  controllers: [AuthController]\r\n})\r\nexport class AuthModule {}\r\n","import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport * as bcrypt from 'bcryptjs';\r\nimport { CreateUserDto } from '../user/user.dto';\r\nimport { User } from '../user/user.schema';\r\nimport { UserService } from '../user/user.service';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n  constructor(\r\n    private userService: UserService,\r\n    private jwtService: JwtService,\r\n  ) {}\r\n\r\n  async validateUser(username: string, pass: string): Promise<any> {\r\n    const user : User = await this.userService.findByUsernameOrEmail(username);\r\n    \r\n    if (user && await bcrypt.compareSync(pass, user.password)) {\r\n      return user;\r\n    } \r\n\r\n    throw new HttpException(`Incorrect credentials!`, HttpStatus.BAD_REQUEST);\r\n  }\r\n\r\n  async register(createUserDto: CreateUserDto) {\r\n    const user : User = await this.userService.create(createUserDto);\r\n    return this.login(user);\r\n  }\r\n\r\n  async login(user: any) {\r\n    const payload = { username: user.username };\r\n\r\n    const loggedInUser = await this.userService.findByUsernameOrEmail(user.username);\r\n\r\n    return {\r\n      _id: loggedInUser._id,\r\n      username: loggedInUser.username,\r\n      firstname: loggedInUser.firstname,\r\n      lastname: loggedInUser.lastname,\r\n      email: loggedInUser.email,\r\n      roles: loggedInUser.roles,\r\n      userImageUrl: loggedInUser.userImageUrl,\r\n      access_token: this.jwtService.sign(payload),\r\n    };\r\n  }\r\n}","export const jwtConstants = {\r\n    secret: 'secretKey',\r\n  };","import { ExecutionContext, Injectable } from \"@nestjs/common\";\r\nimport { Reflector } from \"@nestjs/core\";\r\nimport { AuthGuard } from \"@nestjs/passport\";\r\nimport { IS_PUBLIC_KEY } from \"./auth.module\";\r\n\r\n@Injectable()\r\nexport class JwtAuthGuard extends AuthGuard('jwt') {\r\n  constructor(private reflector: Reflector) {\r\n    super();\r\n  }\r\n\r\n  canActivate(context: ExecutionContext) {\r\n    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [\r\n      context.getHandler(),\r\n      context.getClass(),\r\n    ]);\r\n    if (isPublic) {\r\n      return true;\r\n    }\r\n    return super.canActivate(context);\r\n  }\r\n}\r\n","import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\r\nimport { PassportStrategy } from '@nestjs/passport';\r\nimport { ExtractJwt, Strategy } from 'passport-jwt';\r\nimport { UserService } from '../user/user.service';\r\nimport { jwtConstants } from './constants';\r\n\r\n@Injectable()\r\nexport class JwtStrategy extends PassportStrategy(Strategy) {\r\n  constructor(private readonly userService : UserService) {\r\n    super({\r\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\r\n      ignoreExpiration: false,\r\n      secretOrKey: jwtConstants.secret,\r\n    });\r\n  }\r\n\r\n  async validate(payload: any) {\r\n    const user = await this.userService.findByUsernameOrEmail(payload.username);\r\n\r\n    if(user) {\r\n      return { id: user._id, username: payload.username, email: user.email, name: user.firstname + ' ' + user.lastname, roles: user.roles };\r\n    } else {\r\n      throw new HttpException('Login has expired!', HttpStatus.UNAUTHORIZED);\r\n    }\r\n  }\r\n}","import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\r\nimport { PassportStrategy } from '@nestjs/passport';\r\nimport { Strategy } from 'passport-local';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable()\r\nexport class LocalStrategy extends PassportStrategy(Strategy) {\r\n  constructor(private authService: AuthService) {\r\n    super();\r\n  }\r\n\r\n  async validate(username: string, password: string): Promise<any> {\r\n    const user = await this.authService.validateUser(username, password);\r\n\r\n    if (!user) {\r\n      throw new HttpException(`No user found with current username or email!`, HttpStatus.NOT_FOUND);\r\n    }\r\n\r\n    return user;\r\n  }\r\n}","export enum Role {\r\n    User = 'user',\r\n    Admin = 'admin',\r\n  }","import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\r\nimport { Reflector } from '@nestjs/core';\r\nimport { ROLES_KEY } from './auth.module';\r\nimport { Role } from './role.enum';\r\n\r\n@Injectable()\r\nexport class RolesGuard implements CanActivate {\r\n  constructor(private reflector: Reflector) {}\r\n\r\n  canActivate(context: ExecutionContext): boolean {\r\n    const requiredRoles = this.reflector.getAllAndOverride<Role[]>(ROLES_KEY, [\r\n      context.getHandler(),\r\n      context.getClass(),\r\n    ]);\r\n    if (!requiredRoles) {\r\n      return true;\r\n    }\r\n    const { user } = context.switchToHttp().getRequest();\r\n    return requiredRoles.some((role) => user.roles?.includes(role));\r\n  }\r\n}","import { Body, Controller, Delete, Get, Logger, Param, Post } from '@nestjs/common';\r\nimport { Roles } from '../auth/auth.module';\r\nimport { Role } from '../auth/role.enum';\r\nimport { ParseObjectIdPipe } from '../shared/pipes/ParseObjectIdPipe';\r\nimport { CategoryDto } from './category.dto';\r\nimport { Category } from \"./category.schema\";\r\nimport { CategoryService } from './category.service';\r\n\r\n@Controller('categories')\r\nexport class CommunitiesController {\r\n  constructor(private readonly categoryService: CategoryService) {}\r\n\r\n  @Get(':id')\r\n  async getById(\r\n    @Param('id', ParseObjectIdPipe) id: string): Promise<Category> {\r\n      \r\n    Logger.log(`Getting category with id: ${id} (READ)`);\r\n\r\n    return await this.categoryService.getById(id);\r\n  }\r\n\r\n  @Get()\r\n  async getAll(): Promise<Category[]> {\r\n      Logger.log(`Getting all categories (READ)`);\r\n\r\n      return this.categoryService.getAll();\r\n  }\r\n\r\n\r\n  @Roles(Role.Admin)\r\n  @Post()\r\n  async create(@Body() categoryDto: CategoryDto): Promise<Category> {\r\n      Logger.log(`Creating category (CREATE)`);\r\n\r\n      return this.categoryService.create(categoryDto);\r\n  }\r\n\r\n  @Roles(Role.Admin)\r\n  @Delete(':id')\r\n  async delete(@Param('id', ParseObjectIdPipe) id: string): Promise<Category> {\r\n\r\n    Logger.log(`Getting category with id: ${id} (DELETE)`);\r\n    \r\n    return this.categoryService.delete(id);\r\n  }\r\n\r\n}","import { IsDefined, IsNotEmpty, IsString } from \"class-validator\";\r\n\r\nexport class CategoryDto {\r\n    @IsString({ message: 'Name must be a string!' })\r\n    @IsDefined({ message: 'Name is required!' })\r\n    @IsNotEmpty({ message: 'Name cannot be empty!' })\r\n    name: string;\r\n  }","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { CommunitiesController } from './category.controller';\r\nimport { Category, CategorySchema } from './category.schema';\r\nimport { CategoryService } from './category.service';\r\n\r\n@Module({\r\n    imports: [\r\n        MongooseModule.forFeature([\r\n          { name: Category.name, schema: CategorySchema },\r\n        ]),\r\n      ],\r\n      controllers: [CommunitiesController],\r\n      providers: [CategoryService],\r\n      exports: [CategoryService]\r\n})\r\nexport class CategoryModule {}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { ICategory } from '@riddet-app/data';\r\nimport { IsDefined, IsNotEmpty, IsString } from 'class-validator';\r\nimport { Document, Types } from 'mongoose';\r\n \r\nexport type CategoryDocument = Category & Document;\r\n\r\n@Schema()\r\nexport class Category implements ICategory {\r\n  _id : Types.ObjectId\r\n\r\n  @IsString({ message: 'Name must be a string!' })\r\n  @IsDefined({ message: 'Name is required!' })\r\n  @IsNotEmpty({ message: 'Name cannot be empty!' })\r\n  @Prop()\r\n  name: string;\r\n}\r\n\r\nexport const CategorySchema = SchemaFactory.createForClass(Category);","import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\r\nimport { InjectModel } from \"@nestjs/mongoose\";\r\nimport { Model } from \"mongoose\";\r\nimport { CategoryDto } from \"./category.dto\";\r\nimport { Category, CategoryDocument } from \"./category.schema\";\r\n\r\n@Injectable()\r\nexport class CategoryService {\r\n    constructor(@InjectModel(Category.name) private categoryModel: Model<CategoryDocument>) {}\r\n\r\n    async getById(_id: string): Promise<Category> {\r\n        await this.doesExist(_id);\r\n\r\n        return this.categoryModel.findOne({ _id });\r\n    }\r\n\r\n    async getAll(): Promise<Category[]> {\r\n        return this.categoryModel.find({});\r\n    }\r\n\r\n    async create(categoryDto : CategoryDto): Promise<Category> {\r\n        await this.validate(undefined, categoryDto.name);\r\n\r\n        return this.categoryModel.create(categoryDto);\r\n    }\r\n    \r\n    async delete(_id: string): Promise<Category> {\r\n        await this.doesExist(_id);\r\n\r\n        return this.categoryModel.findOneAndDelete({ _id });\r\n    }\r\n\r\n    async validate(id : string, name: string): Promise<void> {\r\n        if(await this.categoryModel.find({$and: [{_id: {$ne: id}}, {name: name}]}).countDocuments() > 0) {\r\n          throw new HttpException(`Category with name of ${name} already exists!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n    }\r\n\r\n    async doesExist(id : string): Promise<void> {\r\n        const category = await this.categoryModel.findOne({_id: id});\r\n    \r\n        if(!category) {\r\n          throw new HttpException(`Category with id of ${id} doesn't exist!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n    }\r\n}","import { Body, Controller, Delete, Get, Logger, Param, Patch, Post, Req } from '@nestjs/common';\r\nimport { Public } from '../auth/auth.module';\r\nimport { ParseObjectIdPipe } from '../shared/pipes/ParseObjectIdPipe';\r\nimport { CreateCommunityDto, UpdateCommunityDto } from './community.dto';\r\nimport { Community } from \"./community.schema\";\r\nimport { CommunityService } from './community.service';\r\n\r\n@Controller('communities')\r\nexport class CommunitiesController {\r\n  constructor(private readonly communityService: CommunityService) {}\r\n\r\n  @Public()\r\n  @Get()\r\n  async getAll(): Promise<Community[]> {\r\n      Logger.log(`Getting all communities (READ)`);\r\n\r\n      return this.communityService.getAll();\r\n  }\r\n\r\n  @Get('/joined')\r\n  async getAllJoinedCommunities(@Req() req): Promise<Community[]> {\r\n      Logger.log(`Getting all communities user has joined (READ)`);\r\n\r\n    return this.communityService.getAllJoinedCommunities(req);\r\n  }\r\n\r\n  @Get('/created')\r\n  async getAllCreatedCommunities(@Req() req): Promise<Community[]> {\r\n      Logger.log(`Getting all communities user has created (READ)`);\r\n\r\n    return this.communityService.getAllCreatedCommunities(req);\r\n  }\r\n\r\n  @Public()\r\n  @Get(':id')\r\n  async getById(\r\n    @Param('id', ParseObjectIdPipe) id: string): Promise<Community> {\r\n      \r\n    Logger.log(`Getting community with id: ${id} (READ)`);\r\n\r\n    return await this.communityService.getById(id);\r\n  }\r\n\r\n  @Post()\r\n  async create(@Body() createCommunityDto: CreateCommunityDto, @Req() req): Promise<Community> {\r\n      Logger.log(`Creating community (CREATE)`);\r\n\r\n      return this.communityService.create(createCommunityDto, req);\r\n  }\r\n\r\n  @Patch(':id')\r\n  async update(@Param('id', ParseObjectIdPipe) id: string, @Req() req, @Body() updateCommunityDto: UpdateCommunityDto): Promise<Community> {\r\n\r\n    Logger.log(`Getting community with id: ${id} (UPDATE)`);\r\n\r\n    return this.communityService.update(id, updateCommunityDto, req);\r\n  }\r\n\r\n  @Delete(':id')\r\n  async delete(@Param('id', ParseObjectIdPipe) id: string, @Req() req): Promise<Community> {\r\n\r\n    Logger.log(`Getting community with id: ${id} (DELETE)`);\r\n\r\n    return this.communityService.delete(id, req);\r\n  }\r\n\r\n\r\n  //participation routes\r\n\r\n  @Post(':id/join')\r\n  async join(@Param('id', ParseObjectIdPipe) id: string, @Req() req): Promise<Community> {\r\n\r\n    Logger.log(`Getting community with id: ${id} (DELETE)`);\r\n\r\n    return this.communityService.join(id, req);\r\n  }\r\n\r\n  @Post(':id/leave')\r\n  async leave(@Param('id', ParseObjectIdPipe) id: string, @Req() req): Promise<Community> {\r\n\r\n    Logger.log(`Getting community with id: ${id} (DELETE)`);\r\n\r\n    return this.communityService.leave(id, req);\r\n  }\r\n}","import { ArrayNotEmpty, IsBoolean, IsDefined, IsNotEmpty, IsOptional, IsString, MinLength } from \"class-validator\";\r\n\r\nexport class CreateCommunityDto {\r\n  @IsString({ message: 'Name must be a string!' })\r\n  @IsDefined({ message: 'Name is required!' })\r\n  @MinLength(5, { message: 'Name must be at least 5 characters long!' })\r\n  name: string;\r\n\r\n  @IsString({ message: 'Description must be a string!' })\r\n  @IsDefined({ message: 'Description is required!' })\r\n  @IsNotEmpty({ message: 'Description cannot be empty!' })\r\n  description: string;\r\n\r\n  @IsString({ message: 'ImageUrl must be a string!' })\r\n  @IsDefined({ message: 'ImageUrl is required!' })\r\n  @IsNotEmpty({ message: 'ImageUrl cannot be empty!' })\r\n  imageUrl: string;\r\n\r\n  @IsBoolean({ message: 'isPublic must be a boolean!' })\r\n  @IsDefined({ message: 'isPublic is required!' })\r\n  @IsNotEmpty({ message: 'isPublic cannot be empty!' })\r\n  isPublic: boolean;\r\n\r\n\r\n  @ArrayNotEmpty({ message: 'Categories cannot be empty!' })\r\n  @IsDefined({ message: 'Categories are required!' })\r\n  categories : string[]\r\n}\r\n\r\nexport class UpdateCommunityDto {\r\n  @IsOptional()\r\n  @IsString({ message: 'Name must be a string!' })\r\n  @IsDefined({ message: 'Name is required!' })\r\n  @MinLength(5, { message: 'Name must be at least 5 characters long!' })\r\n  name: string;\r\n\r\n  @IsOptional()\r\n  @IsString({ message: 'Description must be a string!' })\r\n  @IsDefined({ message: 'Description is required!' })\r\n  @IsNotEmpty({ message: 'Description cannot be empty!' })\r\n  description: string;\r\n\r\n  @IsOptional()\r\n  @IsString({ message: 'ImageUrl must be a string!' })\r\n  @IsDefined({ message: 'ImageUrl is required!' })\r\n  @IsNotEmpty({ message: 'ImageUrl cannot be empty!' })\r\n  imageUrl: string;\r\n\r\n  @IsOptional()\r\n  @IsBoolean({ message: 'isPublic must be a boolean!' })\r\n  @IsNotEmpty({ message: 'isPublic cannot be empty!' })\r\n  isPublic: boolean;\r\n\r\n  @IsOptional()\r\n  @ArrayNotEmpty({ message: 'Categories cannot be empty!' })\r\n  @IsNotEmpty({ message: 'Categories cannot be empty!' })\r\n  categories : string[]\r\n\r\n}","import { forwardRef, Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { CategoryModule } from '../category/category.module';\r\nimport { UserModule } from '../user/user.module';\r\nimport { CommunitiesController } from './community.controller';\r\nimport { Community, CommunitySchema } from './community.schema';\r\nimport { CommunityService } from './community.service';\r\n\r\n@Module({\r\n  imports: [\r\n    MongooseModule.forFeature([\r\n      { name: Community.name, schema: CommunitySchema },\r\n    ]), forwardRef(() => CategoryModule), forwardRef(() => UserModule),\r\n  ],\r\n  controllers: [CommunitiesController],\r\n  providers: [CommunityService],\r\n  exports: [CommunityService, MongooseModule]\r\n})\r\nexport class CommunityModule  {}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { ICommunity } from '@riddet-app/data';\r\nimport {\r\n  IsDate, IsDefined, IsNotEmpty, IsString, MinLength\r\n} from 'class-validator';\r\nimport { Document, ObjectId, Types } from 'mongoose';\r\nimport { Category } from '../category/category.schema';\r\nimport { Thread } from '../thread/thread.schema';\r\nimport { User } from '../user/user.schema';\r\n \r\nexport type CommunityDocument = Community & Document;\r\n\r\n@Schema()\r\nexport class Community implements ICommunity {\r\n  _id : Types.ObjectId\r\n\r\n  @IsString({ message: 'Name must be a string!' })\r\n  @IsDefined({ message: 'Name is required!' })\r\n  @MinLength(5, { message: 'Name must be at least 5 characters long!' })\r\n  @Prop({unique: true})\r\n  name: string;\r\n\r\n\r\n  @IsString({ message: 'Description must be a string!' })\r\n  @IsDefined({ message: 'Description is required!' })\r\n  @IsNotEmpty({ message: 'Description cannot be empty!' })\r\n  @Prop()\r\n  description: string;\r\n\r\n  @IsDate({ message: 'Creation date must be a date!' })\r\n  @Prop()\r\n  creationDate: Date;\r\n\r\n  @IsString({ message: 'Image must be a string!' })\r\n  @Prop()\r\n  imageUrl: string;\r\n\r\n  @Prop()\r\n  isPublic: boolean;\r\n\r\n  @Prop({\r\n    default: [],\r\n  })\r\n  categories: [Category]\r\n\r\n  @Prop({\r\n    default: [],\r\n    ref: 'User',\r\n  })\r\n  participants: [ObjectId]\r\n\r\n  @Prop({\r\n    default: [],\r\n  })\r\n  threads: [Thread]\r\n\r\n  @Prop()\r\n  createdBy: User\r\n}\r\n\r\nexport const CommunitySchema = SchemaFactory.createForClass(Community);\r\n","import { forwardRef, HttpException, HttpStatus, Inject, Injectable } from \"@nestjs/common\";\r\nimport { InjectModel } from \"@nestjs/mongoose\";\r\nimport { Model, Types } from \"mongoose\";\r\nimport { Role } from \"../auth/role.enum\";\r\nimport { Category } from \"../category/category.schema\";\r\nimport { CategoryService } from \"../category/category.service\";\r\nimport { ParseObjectIdPipe } from \"../shared/pipes/ParseObjectIdPipe\";\r\nimport { User } from \"../user/user.schema\";\r\nimport { UserService } from \"../user/user.service\";\r\nimport { CreateCommunityDto, UpdateCommunityDto } from \"./community.dto\";\r\nimport { Community, CommunityDocument } from \"./community.schema\";\r\n\r\n@Injectable()\r\nexport class CommunityService {\r\n    constructor(@InjectModel(Community.name) private communityModel: Model<CommunityDocument>,\r\n    private readonly categoryService : CategoryService,\r\n    @Inject(forwardRef(() => UserService)) private userService : UserService) {}\r\n    \r\n\r\n    async getById(_id: string): Promise<Community> {\r\n        await this.doesExist(_id);\r\n\r\n        return await this.communityModel.findOne({ _id });\r\n    }\r\n\r\n    async getAll(): Promise<Community[]> {\r\n        return await this.communityModel.find({})\r\n    }\r\n\r\n    async getAllJoinedCommunities(req) : Promise<Community[]> {\r\n\r\n        const joinedCommunities : Community[] = []\r\n\r\n        const user = await this.userService.getById(req.user.id);\r\n\r\n        for await (const communityId of user.joinedCommunities) {\r\n            joinedCommunities.push(await this.getById(communityId.toString()));\r\n        }\r\n\r\n        return joinedCommunities;\r\n    }\r\n\r\n    async getAllCreatedCommunities(req) : Promise<Community[]> {\r\n\r\n        const createdCommunities : Community[] = []\r\n\r\n        const user = await this.userService.getById(req.user.id);\r\n\r\n        for await (const communityId of user.createdCommunities) {\r\n            createdCommunities.push(await this.getById(communityId.toString()));\r\n        }\r\n\r\n        return createdCommunities;\r\n    }\r\n\r\n    async create(createCommunityDto : CreateCommunityDto, req): Promise<Community> {\r\n        await this.validate(createCommunityDto);\r\n\r\n        const embedCategories : Category[] = [];\r\n\r\n        for await (const category of createCommunityDto.categories) {\r\n            embedCategories.push(await this.categoryService.getById(category));\r\n        }\r\n\r\n        const creator = await this.userService.getById(req.user.id);\r\n        delete creator.password;\r\n\r\n        const mergedCommunity = new this.communityModel(\r\n            {...createCommunityDto, \r\n            creationDate: new Date(), \r\n            categories : embedCategories, \r\n            createdBy: creator\r\n        });\r\n\r\n        const community = await this.communityModel.create(mergedCommunity);\r\n\r\n        await this.userService.addCreatedCommunity(req.user.id, community._id);\r\n\r\n        console.log(community.threads)\r\n\r\n        return community;\r\n    }\r\n\r\n    async update(updateId: string, updateCommunityDto: UpdateCommunityDto, req): Promise<Community> {\r\n        await this.doesExist(updateId);\r\n        await this.isAllowedToAlter(req.user.id, updateId, req);\r\n        await this.validate(updateCommunityDto, updateId);\r\n\r\n        let updateObject = {};\r\n\r\n        if(updateCommunityDto.categories) {\r\n            const categories : Category[] = [];\r\n\r\n            for await (const category of updateCommunityDto.categories) {\r\n                categories.push(await this.categoryService.getById(category));\r\n            }\r\n\r\n            delete updateCommunityDto.categories;\r\n            updateObject = {categories};\r\n        }\r\n\r\n        updateObject = {...updateCommunityDto, ...updateObject};\r\n\r\n        return this.communityModel.findOneAndUpdate({ _id : updateId }, updateObject, { new: true });\r\n    }\r\n\r\n    async delete(_id: string, req): Promise<Community> {\r\n        await this.doesExist(_id);\r\n        await this.isAllowedToAlter(req.user.id, _id, req);\r\n\r\n        const community = await this.communityModel.findOne({ _id });\r\n        const creator = await this.userService.getById(community.createdBy._id.toString());\r\n\r\n        await this.userService.removeCreatedCommunity(creator._id.toString(), community._id);\r\n\r\n        for await (const participantId of community.participants) {\r\n            await this.userService.removeJoinedCommunity(participantId.toString(), community._id);\r\n        };\r\n\r\n        return await this.communityModel.findOneAndDelete({ _id });\r\n    }\r\n\r\n    //participating in communities\r\n\r\n    async join(communityId : string, req) : Promise<Community> {\r\n        await this.doesExist(communityId);\r\n\r\n        if((await this.communityModel.find({$and: [{_id : communityId}, { \"createdBy._id\" : req.user.id }]})).length > 0) {\r\n            throw new HttpException(`You cannot join your own community!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n        \r\n        else if (await (await this.communityModel.find({ $and: [ {_id: communityId}, {participants: { $in : req.user.id}} ] })).length > 0) {\r\n            throw new HttpException(`You are already a participant of this community!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n\r\n        await this.userService.addJoinedCommunity(req.user.id, communityId);\r\n\r\n        return this.communityModel.findOneAndUpdate({ _id : communityId }, { $push : { participants : req.user.id } }, { new: true });\r\n    }\r\n\r\n    async leave(communityId : string, req) : Promise<Community> {\r\n        await this.doesExist(communityId);\r\n\r\n        console.log(communityId)\r\n\r\n        if((await this.communityModel.find({$and: [{_id : communityId}, { \"createdBy._id\" : req.user.id }]})).length > 0) {\r\n            throw new HttpException(`You cannot leave your own community!`, HttpStatus.BAD_REQUEST);\r\n\r\n        }\r\n        \r\n        else if (await (await this.communityModel.find({ $and: [ {_id: communityId}, {participants: { $in : req.user.id}} ] })).length === 0) {\r\n            throw new HttpException(`You are not a participant of this community!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n\r\n        await this.userService.removeJoinedCommunity(req.user.id, communityId);\r\n\r\n        return this.communityModel.findOneAndUpdate({ _id : communityId }, { $pull : { participants : req.user.id } }, { new: true });\r\n    }\r\n\r\n\r\n    //update creator\r\n    async updateCreator(creatorId : string, creator : Partial<User>) : Promise<void> {\r\n        await this.communityModel.updateMany({ \"createdBy._id\" : creatorId }, { $set : { createdBy : creator } });\r\n    }\r\n\r\n    //validation\r\n    async validate(community : CreateCommunityDto, currentCommunityId?: string) {\r\n        if(community.name) {\r\n            if((await this.communityModel.find({$and: [{name: community.name }, {_id : { $ne: currentCommunityId }}]})).length > 0 ) {\r\n                throw new HttpException(`Community with the name of ${community.name} already exists!`, HttpStatus.BAD_REQUEST);\r\n            }\r\n        }\r\n\r\n        if(community.categories) {\r\n            if(!(await this.areValidObjectIds(community.categories as string[]))) {\r\n                throw new HttpException(`Categories contains invalid data, all input must be of type ObjectId!`, HttpStatus.BAD_REQUEST);\r\n            }\r\n        }\r\n    }\r\n\r\n    async areValidObjectIds(value: string[]) {\r\n        return value.every((id) => ParseObjectIdPipe.isValidObjectId(id));\r\n    }\r\n\r\n    async isAllowedToAlter(currentUserId? : string, communityId? : string, req?) : Promise<void> {\r\n        const community = await this.communityModel.findOne({ _id : communityId });\r\n\r\n        if(!(new Types.ObjectId(currentUserId).equals(community.createdBy._id)) && !(req.user.roles.includes(Role.Admin))) {\r\n            throw new HttpException(`Only the creator can alter data of this community!`, HttpStatus.BAD_REQUEST);\r\n\r\n        }\r\n    }\r\n\r\n    async doesExist(communityId : string) : Promise<void> {\r\n        const community = await this.communityModel.findOne({ _id : communityId });\r\n\r\n        if(!community) {\r\n            throw new HttpException(`Community with id of ${communityId} doesn't exist!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n    }\r\n}","import { Body, Controller, Delete, Get, Logger, Param, Patch, Post, Req } from \"@nestjs/common\";\r\nimport { Public } from \"../auth/auth.module\";\r\nimport { ParseObjectIdPipe } from \"../shared/pipes/ParseObjectIdPipe\";\r\nimport { Thread } from \"../thread/thread.schema\";\r\nimport { MessageDto } from \"./message.dto\";\r\nimport { Message } from \"./message.schema\";\r\nimport { MessageService } from \"./message.service\";\r\n\r\n@Controller()\r\nexport class MessageController {\r\n  constructor(private readonly messageService: MessageService) {}\r\n\r\n  @Public()\r\n  @Get('communities/:communityId/threads/:threadId/messages/:messageId')\r\n  async getById(\r\n    @Param('communityId', ParseObjectIdPipe) communityId : string,\r\n    @Param('threadId', ParseObjectIdPipe) threadId: string,\r\n    @Param('messageId', ParseObjectIdPipe) messageId: string\r\n    ): Promise<Message> {\r\n      \r\n    Logger.log(`Getting message with id: ${messageId} (READ)`);\r\n\r\n    return await this.messageService.getById(communityId, threadId, messageId);\r\n    }\r\n\r\n    @Public()\r\n    @Get('communities/:communityId/threads/:threadId/messages')\r\n    async getAll(\r\n      @Param('communityId', ParseObjectIdPipe) communityId : string,\r\n      @Param('threadId', ParseObjectIdPipe) threadId : string\r\n      ) : Promise<Message[]> {\r\n        \r\n      Logger.log(`Getting all messages (READ)`);\r\n      \r\n      return await this.messageService.getAll(communityId, threadId);\r\n    }\r\n\r\n    @Post('communities/:communityId/threads/:threadId/messages')\r\n    async create(\r\n      @Param('communityId', ParseObjectIdPipe) communityId : string,\r\n      @Param('threadId', ParseObjectIdPipe) threadId : string,  \r\n      @Req() req, \r\n      @Body() messageDto: MessageDto\r\n      ) : Promise<Message> {\r\n        \r\n      Logger.log(`Getting all messages (READ)`);\r\n      return await this.messageService.create(communityId, threadId, req, messageDto);\r\n    }\r\n\r\n    @Patch('communities/:communityId/threads/:threadId/messages/:messageId')\r\n    async update(@Param('communityId', ParseObjectIdPipe) communityId: string,\r\n    @Param('threadId', ParseObjectIdPipe) threadId: string,\r\n    @Param('messageId', ParseObjectIdPipe) messageId : string,\r\n    @Req() req,\r\n    @Body() messageDto: MessageDto): Promise<Message> {\r\n      Logger.log(`Getting thread with id: ${threadId} (UPDATE)`);\r\n\r\n      return this.messageService.update(communityId, threadId, messageId, messageDto, req);\r\n    }\r\n  \r\n    @Delete('communities/:communityId/threads/:threadId/messages/:messageId')\r\n    async delete(@Param('communityId', ParseObjectIdPipe) communityId: string, \r\n    @Param('threadId', ParseObjectIdPipe) threadId: string, \r\n    @Param('messageId', ParseObjectIdPipe) messageId : string,\r\n    @Req() req): Promise<Thread> {\r\n  \r\n      Logger.log(`Getting thread with id: ${threadId} from community with id: ${communityId} (DELETE)`);\r\n      \r\n      return this.messageService.delete(communityId, threadId, messageId, req);\r\n    }\r\n\r\n    @Post('communities/:communityId/threads/:threadId/messages/:messageId/like')\r\n    async like(@Param('communityId', ParseObjectIdPipe) communityId : string,\r\n     @Param('threadId', ParseObjectIdPipe) threadId : string,\r\n     @Param('messageId', ParseObjectIdPipe) messageId : string,\r\n     @Req() req): Promise<Message> {\r\n        Logger.log(`Getting thread with id: ${threadId} (LIKE)`);\r\n  \r\n        return this.messageService.like(communityId, threadId, messageId, req);\r\n    }\r\n  }","import { IsDefined, IsString } from \"class-validator\";\r\n\r\nexport class MessageDto {\r\n    @IsString({ message: 'Text must be a string!' })\r\n    @IsDefined({ message: 'Text is required!' })\r\n    text: string;\r\n}","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { CommunityModule } from '../community/community.module';\r\nimport { MessageController } from './message.controller';\r\nimport { Message, MessageSchema } from './message.schema';\r\nimport { MessageService } from './message.service';\r\n\r\n@Module({\r\n    imports: [\r\n        MongooseModule.forFeature([\r\n          { name: Message.name, schema: MessageSchema },\r\n        ]), CommunityModule\r\n      ],\r\n    providers: [MessageService],\r\n    controllers: [MessageController],\r\n    exports: [MessageService]\r\n})\r\nexport class MessageModule {}","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { IMessage } from '@riddet-app/data';\r\nimport {\r\n  IsDate, IsDefined, IsString\r\n} from 'class-validator';\r\nimport { Document, ObjectId, Types } from 'mongoose';\r\n \r\nexport type MessageDocument = Message & Document;\r\n\r\n@Schema()\r\nexport class Message implements IMessage{\r\n  hasLikes: boolean;\r\n  containsReplies: boolean;\r\n  _id : Types.ObjectId\r\n\r\n  @IsString({ message: 'Text must be a string!' })\r\n  @IsDefined({ message: 'Text is required!' })\r\n  @Prop({unique: true})\r\n  text: string;\r\n\r\n  @Prop({\r\n    dedfault: [],\r\n    ref: 'User',\r\n  })\r\n  likes : [ObjectId]\r\n\r\n  @IsDate({ message: 'Creation date must be a date!' })\r\n  @Prop()\r\n  publicationDate: Date;\r\n\r\n\r\n  @Prop({\r\n    ref: 'User',\r\n  })\r\n  createdBy : ObjectId\r\n}\r\n\r\nexport const MessageSchema = SchemaFactory.createForClass(Message);\r\n","import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model, Types } from 'mongoose';\r\nimport { Role } from '../auth/role.enum';\r\nimport { Community, CommunityDocument } from '../community/community.schema';\r\nimport { Thread } from '../thread/thread.schema';\r\nimport { MessageDto } from './message.dto';\r\nimport { Message, MessageDocument } from './message.schema';\r\n\r\n\r\n@Injectable()\r\nexport class MessageService {\r\n  constructor(\r\n    @InjectModel(Community.name) private communityModel: Model<CommunityDocument>,\r\n    @InjectModel(Message.name) private messageModel: Model<MessageDocument>\r\n    ) {}\r\n\r\n\r\n  async getById(communityId: string, threadId : string, messageId : string): Promise<Message> {\r\n    await this.doesExist(communityId, threadId, messageId);\r\n\r\n    const thread = (await this.communityModel.aggregate([\r\n      { $match : { _id : new Types.ObjectId(communityId)}},\r\n      { $unwind : { path: \"$participants\", preserveNullAndEmptyArrays: true }},\r\n      { $project : {\r\n          _id : 0,\r\n          \"threads\" : {\r\n              $filter : {\r\n                  input : \"$threads\",\r\n                  as : \"thread\",\r\n                  cond : true\r\n              }\r\n          }}\r\n      },\r\n      { $unwind : { path: \"$threads\", preserveNullAndEmptyArrays: false }},\r\n      { $unwind : { path: \"$threads.createdBy\", preserveNullAndEmptyArrays: true }},\r\n\r\n      { $lookup : { \r\n          from : \"users\",\r\n          localField : \"threads.createdBy\",\r\n          foreignField : \"_id\",\r\n          as : \"threads.createdBy\"\r\n      }},\r\n      { $unwind : { path: \"$threads.messages\", preserveNullAndEmptyArrays: true }},\r\n      { $lookup : { \r\n          from : \"users\",\r\n          localField : \"threads.messages.createdBy\",\r\n          foreignField : \"_id\",\r\n          as : \"threads.messages.createdBy\"\r\n      }},\r\n      { $set: {\r\n          \"threads.messages.createdBy\": \"$threads.messages.createdBy\" \r\n      }},\r\n      { $group: {\r\n          _id: \"$threads._id\",\r\n          messages: {\r\n            $push: \"$threads.messages\"   \r\n          },\r\n      }},\r\n      { $unset: [\"messages.createdBy.password\", \"messages.createdBy.__v\"]},\r\n  ]))[0].messages.filter(message => new Types.ObjectId(message._id).equals(new Types.ObjectId(messageId)))[0]\r\n\r\n  return { ...thread, createdBy: thread.createdBy[0] }\r\n\r\n  }\r\n\r\n  async getAll(communityId : string, threadId : string): Promise<Message[]> {\r\n    await this.doesExist(communityId, threadId);\r\n\r\n    return (await this.communityModel.aggregate([\r\n      { $match : { _id : new Types.ObjectId(communityId)}},\r\n      { $unwind : { path: \"$participants\", preserveNullAndEmptyArrays: true }},\r\n      { $project : {\r\n          _id : 0,\r\n          \"threads\" : {\r\n              $filter : {\r\n                  input : \"$threads\",\r\n                  as : \"thread\",\r\n                  cond : true\r\n              }\r\n          }}\r\n      },\r\n      { $unwind : { path: \"$threads\", preserveNullAndEmptyArrays: false }},\r\n      { $unwind : { path: \"$threads.createdBy\", preserveNullAndEmptyArrays: true }},\r\n\r\n      { $lookup : { \r\n          from : \"users\",\r\n          localField : \"threads.createdBy\",\r\n          foreignField : \"_id\",\r\n          as : \"threads.createdBy\"\r\n      }},\r\n      { $unwind : { path: \"$threads.messages\", preserveNullAndEmptyArrays: true }},\r\n      { $lookup : { \r\n          from : \"users\",\r\n          localField : \"threads.messages.createdBy\",\r\n          foreignField : \"_id\",\r\n          as : \"threads.messages.createdBy\"\r\n      }},\r\n      { $set: {\r\n          \"threads.messages.createdBy\": \"$threads.messages.createdBy\" \r\n      }},\r\n      { $group: {\r\n          _id: \"$threads._id\",\r\n          messages: {\r\n            $push: \"$threads.messages\"   \r\n          },\r\n      }},\r\n      { $unset: [\"messages.createdBy.password\", \"messages.createdBy.__v\"]},\r\n  ]))[0].messages.map(message => { return { ...message, createdBy: message.createdBy[0] }}) \r\n  }\r\n\r\n  async create(communityId, threadId, req, messageDto : MessageDto) : Promise<Message> {\r\n      await this.doesExist(communityId, threadId);\r\n\r\n      const community = await this.communityModel.findOne({ _id: communityId });\r\n\r\n      if(!((await this.communityModel.find({$and: [{_id: communityId}, {participants: { $in : [req.user.id]}}]})).length > 0)\r\n      && !(community.createdBy._id.equals(new Types.ObjectId(req.user.id)))\r\n      && !(req.user.roles.includes(Role.Admin))) {\r\n        throw new HttpException(`You are not a member of this community!`, HttpStatus.BAD_REQUEST);\r\n      }\r\n\r\n      const mergedMessage = new this.messageModel({\r\n        ...messageDto, \r\n        publicationDate: new Date(), \r\n        createdBy: req.user.id\r\n      }) \r\n\r\n      const result = await this.communityModel.findOneAndUpdate({ _id : communityId } , { $push: { \"threads.$[thread].messages\" : mergedMessage } }, { arrayFilters: [{ \"thread._id\": new Types.ObjectId(threadId) }], new: true });\r\n      return result.threads.filter(thread => thread._id.equals(new Types.ObjectId(threadId)))[0].messages.filter(message => message._id.equals(mergedMessage._id))[0];\r\n  }\r\n\r\n  async update(communityId: string, threadId: string, messageId: string, messageDto: MessageDto, req): Promise<Message> {\r\n      await this.doesExist(communityId, threadId, messageId);\r\n      \r\n      const oldMessage = await this.getById(communityId, threadId, messageId);\r\n      const message = {...oldMessage, ...messageDto};\r\n\r\n      if(!(await this.isMyData(message.createdBy.toString(), req.user.id)) && !(req.user.roles.includes(Role.Admin))) {\r\n        throw new HttpException(`You cannot alter data that isn't yours!`, HttpStatus.BAD_REQUEST);\r\n      }\r\n\r\n      return (await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(communityId), \"threads._id\": new Types.ObjectId(threadId)}, {$push: {\"threads.$.messages\": {...message, ...messageDto}}}, {new: true})).threads.filter(thread => thread._id.equals(new Types.ObjectId(threadId)))[0].messages.filter(message => message._id.equals(new Types.ObjectId(messageId)))[0];\r\n    }\r\n\r\n  async delete(communityId : string, threadId : string, messageId : string, req): Promise<Thread> {\r\n    await this.doesExist(communityId, threadId, messageId);\r\n\r\n    const message = await this.getById(communityId, threadId, messageId);\r\n\r\n    if(!(await this.isMyData(message.createdBy.toString(), req.user.id)) && !(req.user.roles.includes(Role.Admin))) {\r\n        throw new HttpException(`You cannot alter data that isn't yours!`, HttpStatus.BAD_REQUEST);\r\n    }\r\n\r\n    return (await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(communityId), \"threads._id\": new Types.ObjectId(threadId)}, {$pull: {\"threads.$.messages\": message}}, {new : true})).threads.filter(thread => thread._id.equals(new Types.ObjectId(threadId)))[0];\r\n  }\r\n\r\n\r\nasync like(communityId : string, threadId : string, messageId : string, req): Promise<Message> {\r\n  await this.doesExist(communityId, threadId, messageId);\r\n\r\n  let community;\r\n\r\n  if ((await this.communityModel.find({ $and: [{_id: communityId}, {threads: {$elemMatch: {_id: threadId, messages : {$elemMatch : {_id: messageId, likes : {$in: [req.user.id] } } } } } } ]})).length === 0) {\r\n    community = (await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(communityId), \"threads._id\": new Types.ObjectId(threadId)}, {$push: {\"threads.$.messages.$[message].likes\": req.user.id}}, {arrayFilters: [{ \"message._id\": new Types.ObjectId(messageId) }], new: true}))\r\n  } \r\n  else {\r\n    community = (await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(communityId), \"threads._id\": new Types.ObjectId(threadId)}, {$pull: {\"threads.$.messages.$[message].likes\": req.user.id}}, {arrayFilters: [{ \"message._id\": new Types.ObjectId(messageId) }], new: true}))\r\n  }\r\n\r\n  return community.threads.filter(thread => thread._id.equals(new Types.ObjectId(threadId)))[0].messages.filter(message => message._id.equals(new Types.ObjectId(messageId)))[0];\r\n}\r\n\r\n  async isMyData(currentUserId : string | undefined, targetUserId : string | undefined) : Promise<boolean> {\r\n    return new Types.ObjectId(currentUserId).equals(new Types.ObjectId(targetUserId) )\r\n  }\r\n\r\n  async doesExist(communityId : string, threadId? : string, messageId? : string) : Promise<void> {\r\n    const community = await this.communityModel.findOne({ _id : communityId });\r\n    let threads : Thread[];\r\n\r\n    if(!community) {\r\n      throw new HttpException(`Community with id of ${communityId} doesn't exist!`, HttpStatus.BAD_REQUEST);\r\n    }\r\n\r\n    if(threadId) {\r\n      threads = await community.threads.filter(thread => thread._id.equals(new Types.ObjectId(threadId)));\r\n      if(!(threads.length > 0)) {\r\n        throw new HttpException(`Thread with id of ${threadId} doesn't exist in the community with id of ${communityId}!`, HttpStatus.BAD_REQUEST);\r\n      }\r\n    }\r\n\r\n    if(threadId && messageId) {\r\n      if(!(threads[0].messages.filter(message => message._id.equals(new Types.ObjectId(messageId))).length > 0)) {\r\n        throw new HttpException(`Message with id of ${messageId} doesn't exist in the thread with id of ${threadId}!`, HttpStatus.BAD_REQUEST);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { BadRequestException } from \"@nestjs/common\";\r\n\r\nexport class ValidationException extends BadRequestException {\r\n  constructor(public validationErrors: string[]) {\r\n    super();\r\n  }\r\n}","import { ArgumentsHost, Catch, ExceptionFilter } from \"@nestjs/common\";\r\nimport { ValidationException } from \"./validation.exception\";\r\n\r\n@Catch(ValidationException)\r\nexport class ValidationFilter implements ExceptionFilter {\r\n  catch(exception: ValidationException, host: ArgumentsHost) {\r\n    const ctx = host.switchToHttp();\r\n    const response = ctx.getResponse();\r\n\r\n    return response.status(400).json({\r\n        statusCode: 400,\r\n        timestamp: new Date().toISOString(),\r\n        errors: exception.validationErrors\r\n    });\r\n  }\r\n}\r\n\r\n","import { Injectable, PipeTransform } from '@nestjs/common';\r\nimport { ObjectId } from 'mongodb';\r\nimport { ValidationException } from '../filters/validation.exception';\r\n\r\n@Injectable()\r\nexport class ParseObjectIdPipe implements PipeTransform<any, ObjectId> {\r\n\r\n    public transform(value: any): ObjectId {\r\n        try {\r\n            const transformedObjectId: ObjectId = ObjectId.createFromHexString(value);\r\n            return transformedObjectId;\r\n        } catch (error) {\r\n            throw new ValidationException([`ObjectId has wrong value: ${value}, ObjectId is not valid!`]);\r\n        }\r\n    }\r\n\r\n    public static isValidObjectId(value: any): boolean {\r\n        try {\r\n            ObjectId.createFromHexString(value);\r\n            return true;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n}","import { IsDefined, IsOptional, IsString, MinLength } from \"class-validator\";\r\n\r\nexport class CreateThreadDto {\r\n  @IsString({ message: 'Title must be a string!' })\r\n  @IsDefined({ message: 'Title is required!' })\r\n  @MinLength(5, { message: 'Title must be at least 5 characters long!' })\r\n  title: string;\r\n\r\n  @IsString({ message: 'Content must be a string!' })\r\n  @IsDefined({ message: 'Content is required!' })\r\n  content: string;\r\n\r\n  @IsString({ message: 'ImageUrl must be a string!' })\r\n  @IsDefined({ message: 'ImageUrl is required!' })\r\n  imageUrl: string;\r\n\r\n  @IsString({ message: 'ExternLink must be a string!' })\r\n  @IsDefined({ message: 'ExternLink is required!' })\r\n  externLink: string;\r\n}\r\n\r\nexport class UpdateThreadDto {\r\n  @IsOptional()\r\n  @IsString({ message: 'Title must be a string!' })\r\n  @IsDefined({ message: 'Title is required!' })\r\n  @MinLength(5, { message: 'Title must be at least 5 characters long!' })\r\n  title: string;\r\n\r\n  @IsOptional()\r\n  @IsString({ message: 'Content must be a string!' })\r\n  @IsDefined({ message: 'Content is required!' })\r\n  content: string;\r\n\r\n  @IsOptional()\r\n  @IsString({ message: 'ImageUrl must be a string!' })\r\n  @IsDefined({ message: 'ImageUrl is required!' })\r\n  imageUrl: string;\r\n\r\n  @IsOptional()\r\n  @IsString({ message: 'ExternLink must be a string!' })\r\n  @IsDefined({ message: 'ExternLink is required!' })\r\n  externLink: string;\r\n}","import { Body, Controller, Delete, Get, Logger, Param, Patch, Post, Req } from '@nestjs/common';\r\nimport { Public } from '../auth/auth.module';\r\nimport { ParseObjectIdPipe } from '../shared/pipes/ParseObjectIdPipe';\r\nimport { CreateThreadDto, UpdateThreadDto } from './thread-dto';\r\nimport { Thread } from \"./thread.schema\";\r\nimport { ThreadService } from './thread.service';\r\n\r\n@Controller()\r\nexport class ThreadController {\r\n  constructor(private readonly threadService: ThreadService) {}\r\n\r\n  @Public()\r\n  @Get('communities/:communityId/threads/:threadId')\r\n  async getById(\r\n    @Param('communityId', ParseObjectIdPipe) communityId: string,\r\n    @Param('threadId', ParseObjectIdPipe) threadId: string,\r\n    ): Promise<Thread> {\r\n    \r\n    Logger.log(`Getting thread with id: ${threadId} from community with id of ${communityId} (READ)`);\r\n    \r\n    return await this.threadService.getById(communityId, threadId);\r\n  }\r\n\r\n  @Public()\r\n  @Get('communities/:communityId/threads')\r\n  async getAll(\r\n    @Param('communityId', ParseObjectIdPipe) communityId : string): Promise<Thread[]> {\r\n\r\n      Logger.log(`Getting all threads from community with an id of: ${communityId} (READ)`);\r\n\r\n      return this.threadService.getAll(communityId);\r\n    }\r\n\r\n  @Post('communities/:communityId/threads')\r\n  async create(@Param('communityId', ParseObjectIdPipe) communityId : string, \r\n  @Req() req, \r\n  @Body() createThreadDto: CreateThreadDto): Promise<Thread> {\r\n      Logger.log(`Creating thread (CREATE)`);\r\n\r\n      return this.threadService.create(createThreadDto, communityId, req);\r\n  }\r\n\r\n  @Patch('communities/:communityId/threads/:threadId')\r\n  async update(@Param('communityId', ParseObjectIdPipe) communityId: string,\r\n  @Param('threadId', ParseObjectIdPipe) threadId: string,\r\n  @Req() req,\r\n  @Body() updateThreadDto: UpdateThreadDto): Promise<Thread> {\r\n    Logger.log(`Getting thread with id: ${threadId} (UPDATE)`);\r\n\r\n    return this.threadService.update(communityId, threadId, req, updateThreadDto);\r\n  }\r\n\r\n  @Delete('communities/:communityId/threads/:threadId')\r\n  async delete(@Param('communityId', ParseObjectIdPipe) communityId: string, \r\n  @Param('threadId', ParseObjectIdPipe) threadId: string, \r\n  @Req() req): Promise<Thread> {\r\n\r\n    Logger.log(`Getting thread with id: ${threadId} from community with id: ${communityId} (DELETE)`);\r\n    \r\n    return this.threadService.delete(communityId, threadId, req);\r\n  }\r\n\r\n  @Post('communities/:communityId/threads/:threadId/upvote')\r\n  async upvote(@Param('communityId', ParseObjectIdPipe) communityId : string,\r\n   @Param('threadId', ParseObjectIdPipe) threadId : string,\r\n   @Req() req): Promise<Thread> {\r\n      Logger.log(`Creating thread (CREATE)`);\r\n\r\n      return this.threadService.upvote(communityId, threadId, req);\r\n  }\r\n\r\n}","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { CommunityModule } from '../community/community.module';\r\nimport { UserModule } from '../user/user.module';\r\nimport { ThreadController } from './thread.controller';\r\nimport { Thread, ThreadSchema } from './thread.schema';\r\nimport { ThreadService } from './thread.service';\r\n\r\n@Module({\r\n  imports: [\r\n    MongooseModule.forFeature([\r\n      { name: Thread.name, schema: ThreadSchema },\r\n    ]), CommunityModule, UserModule\r\n  ],\r\n  controllers: [ThreadController],\r\n  providers: [ThreadService, MongooseModule],\r\n})\r\nexport class ThreadModule {}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { IThread } from '@riddet-app/data';\r\nimport {\r\n  IsDate,\r\n  IsDefined, IsString,\r\n  MinLength\r\n} from 'class-validator';\r\nimport { Document, ObjectId, Types } from 'mongoose';\r\nimport { Message } from '../message/message.schema';\r\n \r\nexport type ThreadDocument = Thread & Document;\r\n\r\n@Schema()\r\nexport class Thread implements IThread {\r\n  _id : Types.ObjectId\r\n\r\n  @IsString({ message: 'Name must be a string!' })\r\n  @IsDefined({ message: 'Name is required!' })\r\n  @MinLength(5, { message: 'Name must be at least 5 characters long!' })\r\n  @Prop()\r\n  title: string;\r\n\r\n  @Prop()\r\n  content: string;\r\n\r\n  @IsString({ message: 'Image URL must be a string!' })\r\n  @Prop()\r\n  imageUrl: string;\r\n\r\n  @IsString({ message: 'ExternLink must be a string!' })\r\n  @Prop()\r\n  externLink: string;\r\n\r\n  @Prop()\r\n  views: number;\r\n\r\n  @Prop({\r\n    default: [],\r\n    ref: 'User',\r\n  })\r\n  upvotes: [ObjectId]\r\n\r\n  @IsDate({ message: 'Publication date must be a date!' })\r\n  @Prop()\r\n  publicationDate: Date;\r\n\r\n  @Prop({\r\n    default: [],\r\n  })\r\n  messages: [Message]\r\n\r\n  @Prop({\r\n    ref: 'User',\r\n  })\r\n  createdBy: ObjectId\r\n}\r\n\r\nexport const ThreadSchema = SchemaFactory.createForClass(Thread);\r\n","import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\r\nimport { InjectModel } from \"@nestjs/mongoose\";\r\nimport { Model, Types } from \"mongoose\";\r\nimport { Role } from \"../auth/role.enum\";\r\nimport { Community, CommunityDocument } from \"../community/community.schema\";\r\nimport { UserService } from \"../user/user.service\";\r\nimport { CreateThreadDto, UpdateThreadDto } from \"./thread-dto\";\r\nimport { Thread } from \"./thread.schema\";\r\n\r\n@Injectable()\r\nexport class ThreadService {\r\n    constructor(@InjectModel(Community.name) private communityModel: Model<CommunityDocument>,\r\n    private readonly userService : UserService ) {}\r\n\r\n    async getById(communityId : string, threadId : string): Promise<Thread> {\r\n        await this.doesExist(communityId, threadId);\r\n\r\n        await this.communityModel.findOneAndUpdate({_id : new Types.ObjectId(communityId), \"threads._id\" : new Types.ObjectId(threadId)}, {$inc: {\"threads.$.views\" : 1}});\r\n\r\n        const thread =  (await this.communityModel.aggregate([\r\n            { $match : { _id : new Types.ObjectId(communityId)}},\r\n            { $match : { \"threads._id\" : new Types.ObjectId(threadId)}},\r\n            { $unwind : { path: \"$participants\", preserveNullAndEmptyArrays: true }},\r\n            { $project : {\r\n                _id : 0,\r\n                \"threads\" : {\r\n                    $filter : {\r\n                        input : \"$threads\",\r\n                        as : \"thread\",\r\n                        cond : { $eq : [\"$$thread._id\", new Types.ObjectId(threadId)]}\r\n                    }\r\n                }}\r\n            },\r\n            { $unwind : { path: \"$threads\", preserveNullAndEmptyArrays: true }},\r\n            { $lookup : { \r\n                from : \"users\",\r\n                localField : \"threads.createdBy\",\r\n                foreignField : \"_id\",\r\n                as : \"threads.createdBy\"\r\n            }},\r\n            { $unwind : { path: \"$threads.messages\", preserveNullAndEmptyArrays: true }},\r\n            { $lookup : { \r\n                from : \"users\",\r\n                localField : \"threads.messages.createdBy\",\r\n                foreignField : \"_id\",\r\n                as : \"threads.messages.createdBy\"\r\n            }},\r\n            { $set: {\r\n                \"threads.messages.createdBy\": \"$threads.messages.createdBy\" \r\n            }},\r\n            { $group: {\r\n                _id: \"$threads._id\",\r\n                title: {\r\n                  $first: \"$threads.title\"\r\n                },\r\n                content: {\r\n                  $first: \"$threads.content\"\r\n                },\r\n                externLink: {\r\n                    $first: \"$threads.externLink\"\r\n                },\r\n                views: {\r\n                  $first: \"$threads.views\"\r\n                },\r\n                imageUrl: {\r\n                    $first: \"$threads.imageUrl\"\r\n                },\r\n                upvotes: {\r\n                  $first: \"$threads.upvotes\"\r\n                },\r\n                messages: {\r\n                  $push: \"$threads.messages\"   \r\n                },\r\n                publicationDate: {\r\n                    $first: \"$threads.publicationDate\"\r\n                },\r\n                createdBy: {\r\n                  $first: \"$threads.createdBy\"\r\n                }\r\n            }},\r\n            { $unset: [\"createdBy.password\", \"createdBy.__v\", \"messages.createdBy.password\", \"messages.createdBy.__v\"]},\r\n        ]))[0]\r\n\r\n        return {...thread, createdBy : thread.createdBy[0], messages : thread.messages.map(message => ({...message, createdBy : message.createdBy[0]}))}\r\n    }\r\n\r\n    async getAll(communityId : string): Promise<Thread[]> {\r\n        await this.doesExist(communityId);\r\n\r\n       return (await this.communityModel.aggregate([\r\n            { $match : { _id : new Types.ObjectId(communityId)}},\r\n            { $unwind : { path: \"$participants\", preserveNullAndEmptyArrays: true }},\r\n            { $project : {\r\n                _id : 0,\r\n                \"threads\" : {\r\n                    $filter : {\r\n                        input : \"$threads\",\r\n                        as : \"thread\",\r\n                        cond : true\r\n                    }\r\n                }}\r\n            },\r\n            { $unwind : { path: \"$threads\", preserveNullAndEmptyArrays: false }},\r\n            { $unwind : { path: \"$threads.createdBy\", preserveNullAndEmptyArrays: true }},\r\n\r\n            { $lookup : { \r\n                from : \"users\",\r\n                localField : \"threads.createdBy\",\r\n                foreignField : \"_id\",\r\n                as : \"threads.createdBy\"\r\n            }},\r\n            { $unwind : { path: \"$threads.messages\", preserveNullAndEmptyArrays: true }},\r\n            { $lookup : { \r\n                from : \"users\",\r\n                localField : \"threads.messages.createdBy\",\r\n                foreignField : \"_id\",\r\n                as : \"threads.messages.createdBy\"\r\n            }},\r\n            { $set: {\r\n                \"threads.messages.createdBy\": \"$threads.messages.createdBy\" \r\n            }},\r\n            { $group: {\r\n                _id: \"$threads._id\",\r\n                title: {\r\n                  $first: \"$threads.title\"\r\n                },\r\n                content: {\r\n                  $first: \"$threads.content\"\r\n                },\r\n                externLink: {\r\n                    $first: \"$threads.externLink\"\r\n                },\r\n                views: {\r\n                  $first: \"$threads.views\"\r\n                },\r\n                imageUrl: {\r\n                    $first: \"$threads.imageUrl\"\r\n                },\r\n                upvotes: {\r\n                  $first: \"$threads.upvotes\"\r\n                },\r\n                messages: {\r\n                  $push: \"$threads.messages\"   \r\n                },\r\n                publicationDate: {\r\n                    $first: \"$threads.publicationDate\"\r\n                },\r\n                createdBy: {\r\n                    $first: \"$threads.createdBy\"\r\n                }\r\n            }},\r\n            { $unset: [\"createdBy.password\", \"createdBy.__v\", \"messages.createdBy.password\", \"messages.createdBy.__v\"]},\r\n        ])).map(thread => thread = {...thread, createdBy: thread.createdBy[0], messages: thread.messages.map(message => message = {...message, createdBy: message.createdBy[0]})});\r\n    }\r\n\r\n    async create(createThreadDto : CreateThreadDto, communityId : string, req): Promise<Thread> {\r\n        await this.doesExist(communityId);\r\n\r\n        const community = await this.communityModel.findOne({ _id : communityId });\r\n\r\n        if(!((await this.communityModel.find({$and: [{_id: communityId}, {participants: { $in : [req.user.id]}}]})).length > 0)\r\n        && !(community.createdBy._id.equals(new Types.ObjectId(req.user.id)))\r\n        && !(req.user.roles.includes(Role.Admin))) {\r\n            throw new HttpException(`You are not a member of this community`, HttpStatus.BAD_REQUEST);\r\n        }\r\n\r\n        const mergedthread = {_id: new Types.ObjectId(), \r\n            ...createThreadDto, \r\n            views: 0, \r\n            upvotes: [],\r\n            publicationDate: new Date(), \r\n            messages: [], \r\n            createdBy: req.user.id\r\n        };\r\n\r\n        return await this.communityModel.findOneAndUpdate(\r\n            { _id: communityId }, \r\n            {$push: { threads : mergedthread }}, \r\n            { new: true });\r\n    }\r\n\r\n    async update(communityId: string, threadId : string, req, updateThreadDto: UpdateThreadDto): Promise<Thread> {\r\n        await this.doesExist(communityId, threadId);\r\n\r\n        const thread = (await this.communityModel.findOne(\r\n            {_id: communityId}, \r\n            {threads:{$elemMatch:{_id: threadId}}}))\r\n            .threads.filter(async thread => thread._id === new Types.ObjectId(threadId))[0];\r\n\r\n        if(!(await this.isMyData(thread.createdBy.toString(), req.user.id)) && !(req.user.roles.includes(Role.Admin))) {\r\n            throw new HttpException(`You cannot alter data that isn't yours!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n\r\n        return await this.communityModel.findOneAndUpdate(\r\n            {_id : communityId, \"threads._id\" : threadId}, \r\n            {$set: {\"threads.$\" : {...thread, ...updateThreadDto}}}, \r\n            {new: true});\r\n    }\r\n\r\n    async delete(communityId : string, threadId : string, req): Promise<Thread> {\r\n        await this.doesExist(communityId, threadId);\r\n\r\n        const thread = (await this.communityModel.findOne(\r\n            {_id: communityId}, \r\n            {threads:{$elemMatch:{_id: threadId}}}))\r\n            .threads.filter(async thread => thread._id === new Types.ObjectId(threadId))[0];\r\n\r\n        if(!(await this.isMyData(thread.createdBy.toString(), req.user.id)) && !(req.user.roles.includes(Role.Admin))) {\r\n            throw new HttpException(`You cannot alter data that isn't yours!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n\r\n        return (await this.communityModel.findOneAndUpdate(\r\n            { _id: new Types.ObjectId(communityId) }, \r\n            {$pull: { threads : {_id: new Types.ObjectId(threadId)}}}, \r\n            { new: true }))\r\n    }\r\n\r\n    async upvote(communityId : string, threadId : string, req): Promise<Thread> {\r\n        await this.doesExist(communityId, threadId);\r\n\r\n        let community;\r\n\r\n        if ((await this.communityModel.find({ $and: [{_id: communityId}, {threads: {$elemMatch: {_id: threadId, upvotes: {$in: [req.user.id]}}}}]})).length === 0) {\r\n            community = await this.communityModel.findOneAndUpdate({_id : communityId, \"threads._id\" : threadId}, {$push: {\"threads.$.upvotes\" : req.user.id}} , {new: true});\r\n        } else {\r\n            community = await this.communityModel.findOneAndUpdate({_id : communityId, \"threads._id\" : threadId}, {$pull: {\"threads.$.upvotes\" : req.user.id}} , {new: true});\r\n        }\r\n\r\n        return community.threads.filter(async thread => thread._id === new Types.ObjectId(threadId))[0];\r\n    }\r\n\r\n    //validation\r\n    async isMyData(currentUserId? : string, targetUserId? : string) : Promise<boolean> {\r\n        return new Types.ObjectId(currentUserId).equals(new Types.ObjectId(targetUserId))\r\n    }\r\n\r\n    async doesExist(communityId : string, threadId? : string) : Promise<void> {\r\n        const community = await this.communityModel.findOne({ _id : communityId });\r\n\r\n        if(!community) {\r\n            throw new HttpException(`Community with id of ${communityId} doesn't exist!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n\r\n        if(threadId) {\r\n            if(!(community.threads.filter(thread => thread._id.equals(new Types.ObjectId(threadId))).length > 0)) {\r\n                throw new HttpException(`Thread with id of ${threadId} doesn't exist in the community with id of ${communityId}!`, HttpStatus.BAD_REQUEST);\r\n            }\r\n        }\r\n    }\r\n}","import { Body, Controller, Get, Logger, Param, Patch, Post, Req } from '@nestjs/common';\r\nimport { Roles } from '../auth/auth.module';\r\nimport { Role } from '../auth/role.enum';\r\nimport { ParseObjectIdPipe } from '../shared/pipes/ParseObjectIdPipe';\r\nimport { CreateUserDto, UpdateUserDto } from './user.dto';\r\nimport { User } from './user.schema';\r\nimport { UserService } from './user.service';\r\n\r\n@Controller()\r\nexport class UserController {\r\n  constructor(private readonly userService: UserService) {}\r\n\r\n  @Get('users/:id')\r\n  async getById(\r\n    @Param('id', ParseObjectIdPipe) id: string): Promise<User> {\r\n      \r\n    Logger.log(`Getting user with id: ${id} (READ)`);\r\n\r\n    return await this.userService.getById(id);\r\n  }\r\n\r\n  @Get('users')\r\n  async getAll(): Promise<User[]> {\r\n      Logger.log(`Getting all users (READ)`);\r\n      return this.userService.getAll();\r\n  }\r\n\r\n  @Roles(Role.Admin)\r\n  @Post('users')\r\n  async create(@Body() createUserDto: CreateUserDto): Promise<User> {\r\n      Logger.log(`Creating community (CREATE)`);\r\n\r\n      return this.userService.create(createUserDto);\r\n  }\r\n\r\n  @Patch('users/:id')\r\n  async update(@Req() req, @Param('id', ParseObjectIdPipe) id: string, @Body() updateUserDto: UpdateUserDto): Promise<User> {\r\n\r\n    Logger.log(`Getting user with id: ${id} (UPDATE)`);\r\n\r\n    return this.userService.update(id, updateUserDto, req);\r\n  }\r\n\r\n  //Follow\r\n  @Post('users/:id/follow')\r\n  async follow(@Req() req, @Param('id', ParseObjectIdPipe) id: string): Promise<User[]> {\r\n    Logger.log(`Getting user with id: ${id} (READ)`);\r\n\r\n    return this.userService.follow(id, req);\r\n  }\r\n\r\n  @Post('users/:id/unfollow')\r\n  async unfollow(@Req() req, @Param('id', ParseObjectIdPipe) id: string) {\r\n    Logger.log(`Getting user with id: ${id} (READ)`);\r\n\r\n    return this.userService.unfollow(id, req);\r\n  }\r\n}","import { IsDefined, IsEmail, IsOptional, IsString, Matches, MinLength } from \"class-validator\";\r\n\r\nexport class CreateUserDto {\r\n    @IsString({ message: 'Username must be a string!' })\r\n    @IsDefined({ message: 'Username is required!' })\r\n    @MinLength(5, { message: 'Username must be at least 5 characters long!' })\r\n    username: string;\r\n  \r\n    @IsString({ message: 'Firstname must be a string!' })\r\n    @IsDefined({ message: 'Firstname is required!' })\r\n    firstname: string;\r\n    \r\n    @IsString({ message: 'Firstname must be a string!' })\r\n    @IsDefined({ message: 'Firstname is required!' })\r\n    lastname: string;\r\n  \r\n    @IsEmail({ message: 'Email must be a valid email!' })\r\n    @IsString({ message: 'Email must be a string!' })\r\n    @IsDefined({ message: 'Email is required!' })\r\n    email: string;\r\n\r\n    @Matches(/^\\d{4}[./-]\\d{2}[./-]\\d{2}$/, { message: 'Date of birth must be a valid date! (YYYY-MM-DD)' })\r\n    @IsDefined({ message: 'Date of birth is required!' })\r\n    dateOfBirth: Date;\r\n  \r\n    @IsString({ message: 'Password must be a string!' })\r\n    @IsDefined({ message: 'Password is required!' })\r\n    @MinLength(8, { message: 'Password must be at least 8 characters long!' })\r\n    password: string;\r\n  \r\n    @IsString({ message: 'UserImageUrl must be a string!' })\r\n    @IsDefined({ message: 'UserImageUrl is required!' })\r\n    userImageUrl: string;\r\n}\r\n\r\nexport class UpdateUserDto {\r\n    @IsOptional()\r\n    @IsString({ message: 'Username must be a string!' })\r\n    @IsDefined({ message: 'Username is required!' })\r\n    @MinLength(5, { message: 'Username must be at least 5 characters long!' })\r\n    username: string;\r\n  \r\n    \r\n    @IsOptional()\r\n    @IsString({ message: 'Firstname must be a string!' })\r\n    @IsDefined({ message: 'Firstname is required!' })\r\n    firstname: string;\r\n    \r\n    @IsOptional()\r\n    @IsString({ message: 'Firstname must be a string!' })\r\n    @IsDefined({ message: 'Firstname is required!' })\r\n    lastname: string;\r\n  \r\n    @IsOptional()\r\n    @IsEmail({ message: 'Email must be a valid email!' })\r\n    @IsString({ message: 'Email must be a string!' })\r\n    @IsDefined({ message: 'Email is required!' })\r\n    email: string;\r\n\r\n    @IsOptional()\r\n    @Matches(/^\\d{4}[./-]\\d{2}[./-]\\d{2}$/, { message: 'Date of birth must be a valid date! (YYYY-MM-DD)' })\r\n    @IsDefined({ message: 'Date of birth is required!' })\r\n    dateOfBirth: Date;\r\n  \r\n    @IsOptional()\r\n    @IsString({ message: 'Password must be a string!' })\r\n    @IsDefined({ message: 'Password is required!' })\r\n    @MinLength(8, { message: 'Password must be at least 8 characters long!' })\r\n    password: string;\r\n  \r\n    @IsOptional()\r\n    @IsString({ message: 'UserImageUrl must be a string!' })\r\n    @IsDefined({ message: 'UserImageUrl is required!' })\r\n    userImageUrl: string;\r\n}","import { forwardRef, Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { CommunityModule } from '../community/community.module';\r\n// import { Neo4jModule } from '../neo4j/neo4j.module';\r\nimport { UserController } from './user.controller';\r\nimport { User, UserSchema } from './user.schema';\r\nimport { UserService } from './user.service';\r\n\r\n@Module({\r\n    imports: [\r\n      // Neo4jModule.forRoot({\r\n      //   scheme: 'bolt',\r\n      //   host: '127.0.0.1',\r\n      //   port: 7687,\r\n      //   username: 'neo4j',\r\n      //   password: 'neo',\r\n      // }),\r\n        MongooseModule.forFeature([\r\n          { name: User.name, schema: UserSchema },\r\n        ]), forwardRef(() => CommunityModule)\r\n      ],\r\n    providers: [UserService],\r\n    controllers: [UserController],\r\n    exports: [UserService],\r\n})\r\nexport class UserModule {}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { IUser } from '@riddet-app/data';\r\nimport {\r\n  IsBoolean,\r\n  IsDate, IsDefined, IsEmail, IsString, Matches, MinLength\r\n} from 'class-validator';\r\nimport { Document, ObjectId, Types } from 'mongoose';\r\nimport { Role } from '../auth/role.enum';\r\n \r\nexport type UserDocument = User & Document;\r\n\r\n@Schema()\r\nexport class User implements IUser{\r\n  _id : Types.ObjectId\r\n\r\n  @IsString({ message: 'Username must be a string!' })\r\n  @IsDefined({ message: 'Username is required!' })\r\n  @MinLength(5, { message: 'Username must be at least 5 characters long!' })\r\n  @Prop()\r\n  username: string;\r\n\r\n  @IsString({ message: 'Firstname must be a string!' })\r\n  @IsDefined({ message: 'Firstname is required!' })\r\n  @Prop()\r\n  firstname: string;\r\n  \r\n  @IsString({ message: 'Lastname must be a string!' })\r\n  @IsDefined({ message: 'Lastname is required!' })\r\n  @Prop()\r\n  lastname: string;\r\n\r\n  @IsEmail({ message: 'Email must be a valid email!' })\r\n  @IsString({ message: 'Email must be a string!' })\r\n  @IsDefined({ message: 'Email is required!' })\r\n  @Prop()\r\n  email: string;\r\n\r\n  @Matches(/^\\d{4}[./-]\\d{2}[./-]\\d{2}$/, { message: 'Date of birth must be a valid date! (YYYY-MM-DD)' })\r\n  @IsDefined({ message: 'Date of birth is required!' })\r\n  @Prop()\r\n  dateOfBirth: Date;\r\n\r\n  @IsString({ message: 'Password must be a string!' })\r\n  @IsDefined({ message: 'Password is required!' })\r\n  @MinLength(8, { message: 'Password must be at least 8 characters long!' })\r\n  @Prop()\r\n  password: string;\r\n\r\n  @IsString({ message: 'UserImageUrl must be a string!' })\r\n  @IsDefined({ message: 'UserImageUrl is required!' })\r\n  @Prop()\r\n  userImageUrl: string;\r\n\r\n  @IsDate({ message: 'Creation date must be a date!' })\r\n  @Prop()\r\n  creationDate: Date;\r\n\r\n  @IsBoolean({message: 'isActive must be a boolean!'})\r\n  @Prop()\r\n  isActive: boolean;\r\n\r\n  @Prop()\r\n  roles: Role[];\r\n\r\n  @Prop({\r\n    default: [],\r\n    ref: 'Community',\r\n  })\r\n  joinedCommunities : [ObjectId]\r\n\r\n  @Prop({\r\n    default: [],\r\n    ref: 'Community',\r\n  })\r\n  createdCommunities : [ObjectId]\r\n\r\n  @Prop({\r\n    default: [],\r\n    ref: 'User',\r\n  })\r\n  following : [ObjectId]\r\n\r\n  @Prop({\r\n    default: [],\r\n    ref: 'User',\r\n  })\r\n  followers : [ObjectId]\r\n}\r\n\r\nexport const UserSchema = SchemaFactory.createForClass(User);\r\n","import { forwardRef, HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport * as bcrypt from 'bcryptjs';\r\nimport { Model, Types } from 'mongoose';\r\nimport { Role } from '../auth/role.enum';\r\nimport { Community, CommunityDocument } from '../community/community.schema';\r\nimport { CommunityService } from '../community/community.service';\r\nimport { ValidationException } from '../shared/filters/validation.exception';\r\nimport { CreateUserDto } from './user.dto';\r\nimport { User, UserDocument } from './user.schema';\r\n\r\n\r\n@Injectable()\r\nexport class UserService {\r\n  constructor(\r\n    @InjectModel(User.name) private userModel: Model<UserDocument>,\r\n    @InjectModel(Community.name) private communityModel: Model<CommunityDocument>,\r\n    @Inject(forwardRef(() => CommunityService)) private communityService : CommunityService,\r\n    // private readonly neo4jService: Neo4jService\r\n    ){}\r\n\r\n  async findByUsernameOrEmail(username: string): Promise<User | undefined> {\r\n    return await this.userModel.findOne({$or: [{username}, { email : username }]});\r\n  }\r\n\r\n  async getById(_id: string): Promise<User> {\r\n    await this.doesExist(_id);\r\n\r\n    return (await this.userModel.aggregate([\r\n      {$match: { \"_id\": new Types.ObjectId(_id) }},\r\n      {$lookup: {\r\n        from: \"users\",\r\n        localField: \"following\",\r\n        foreignField: \"_id\",\r\n        as: \"following\"\r\n      }},\r\n      {$lookup: {\r\n        from: \"users\",\r\n        localField: \"followers\",\r\n        foreignField: \"_id\",\r\n        as: \"followers\"\r\n      }},\r\n      {$unset: [\"password\", \"__v\"]}\r\n    ]))[0];\r\n  }\r\n\r\n  async getAll(): Promise<User[]> {\r\n    return await this.userModel.aggregate([\r\n      {$lookup: {\r\n        from: \"users\",\r\n        localField: \"following\",\r\n        foreignField: \"_id\",\r\n        as: \"following\"\r\n      }},\r\n      {$lookup: {\r\n        from: \"users\",\r\n        localField: \"followers\",\r\n        foreignField: \"_id\",\r\n        as: \"followers\"\r\n      }},\r\n      {$unset: [\"password\", \"__v\"]}\r\n    ])\r\n  }\r\n\r\n  async create(createUserDto : CreateUserDto): Promise<User> {\r\n      await this.validate(createUserDto);\r\n\r\n      createUserDto.dateOfBirth = new Date(createUserDto.dateOfBirth);\r\n      createUserDto.dateOfBirth.setHours(createUserDto.dateOfBirth.getHours() + 1);\r\n\r\n      const mergedUser = {...createUserDto, creationDate: new Date(), isActive: true, roles: [Role.User], password: await bcrypt.hashSync(createUserDto.password, 10)};\r\n\r\n      const user = await new this.userModel(mergedUser).save();\r\n\r\n\r\n      //TODO: add to neo4j\r\n\r\n    //   await this.neo4jService.write(`\r\n    //   CREATE\r\n    //   (n:User {\r\n    //   id: '${user._id.toString()}',\r\n    //   username: '${user.username}', \r\n    //   dateOfBirth: '${user.dateOfBirth.toISOString()}'\r\n    //  })`,\r\n    // {});\r\n      return user;\r\n  }\r\n\r\n  async update(updateUserId: string, user: Partial<User>, req): Promise<User> {\r\n    await this.doesExist(updateUserId);\r\n\r\n    const currentUser = req.user;\r\n\r\n    if(await this.isMyData(updateUserId, currentUser.id) || currentUser.roles.includes(Role.Admin)) {\r\n      await this.validate(user, currentUser.id, updateUserId);\r\n\r\n      if(user.dateOfBirth) {\r\n        user.dateOfBirth = new Date(user.dateOfBirth);\r\n        user.dateOfBirth.setHours(user.dateOfBirth.getHours() + 1);\r\n      }\r\n\r\n      if(user.password) {\r\n        user.password = await bcrypt.hashSync(user.password, 10)\r\n      }\r\n\r\n      //update embedded users\r\n      await this.communityService.updateCreator(updateUserId, {...(await this.userModel.findOne({ _id : updateUserId })).toObject(), ...user });\r\n\r\n      return this.userModel.findOneAndUpdate({ _id : updateUserId }, user, { new: true });\r\n    }\r\n    throw new ValidationException([`You cannot update other users!`]);\r\n  }\r\n\r\n  //following related methods\r\n\r\n  async follow(followUserId: string, req): Promise<User[]> {\r\n    await this.doesExist(followUserId);\r\n\r\n    if(await this.isMyData(followUserId, req.user.id)) {\r\n      throw new ValidationException([`You cannot follow yourself!`]);\r\n    }\r\n    \r\n    if (await (await this.userModel.find({ $and: [ {_id: req.user.id}, {following: { $in : followUserId}} ] })).length > 0) {\r\n      throw new ValidationException([`You already follow this person!`]);\r\n    }\r\n\r\n    const user = await this.userModel.findOneAndUpdate({ _id: req.user.id }, { $push: { following: followUserId } }, {new: true});\r\n    const otherUser = await this.userModel.findOneAndUpdate({ _id: followUserId}, { $push: { followers: req.user.id } }, {new: true});\r\n\r\n    return [user,otherUser]\r\n  }\r\n\r\n  async unfollow(followUserId: string, req): Promise<User[]> {\r\n    await this.doesExist(followUserId);\r\n\r\n    if(await this.isMyData(followUserId, req.user.id)) {\r\n      throw new ValidationException([`You cannot unfollow yourself!`]);\r\n    }\r\n    \r\n    if (await (await this.userModel.find({ $and: [ {_id: req.user.id}, {following: { $in : followUserId}} ] })).length === 0) {\r\n      throw new ValidationException([`You don't follow this person!`]);\r\n    }\r\n    \r\n    const user = await this.userModel.findOneAndUpdate({ _id: req.user.id }, {$pull: { following : followUserId }}, { new: true });\r\n    const otherUser = await this.userModel.findOneAndUpdate({ _id: followUserId }, {$pull: { followers : req.user.id }}, { new: true });\r\n\r\n    return [user,otherUser]\r\n  }\r\n\r\n  //community arrays\r\n  async addJoinedCommunity(userId : string, communityId: string): Promise<User> {\r\n    await this.doesExist(userId);\r\n\r\n    return await this.userModel.findOneAndUpdate({ _id: userId }, { $push: { joinedCommunities: communityId } }, {new: true});\r\n  }\r\n\r\n  async removeJoinedCommunity(userId : string, communityId: string): Promise<User> {\r\n    await this.doesExist(userId);\r\n\r\n    return await this.userModel.findOneAndUpdate({ _id: userId }, { $pull: { joinedCommunities: communityId } }, {new: true});\r\n  }\r\n\r\n    //community array fillers\r\n    async addCreatedCommunity(userId : string, communityId: string): Promise<User> {\r\n      await this.doesExist(userId);\r\n  \r\n\r\n      const user = await this.userModel.findOne({ _id: userId });\r\n\r\n      for await (const createdCommunityId of user.createdCommunities) {\r\n        await this.communityModel.updateMany({ _id: createdCommunityId, \"createdBy._id\": new Types.ObjectId(userId) }, { $push:  {\"createdBy.$[_id]createdCommunities\": communityId } } );\r\n      }\r\n\r\n      return await this.userModel.findOneAndUpdate({ _id: userId }, { $push: { createdCommunities: communityId } }, {new: true});\r\n    }\r\n\r\n    async removeCreatedCommunity(userId : string, communityId: string): Promise<User> {\r\n      await this.doesExist(userId);\r\n\r\n      const user = await this.userModel.findOne({ _id: userId });\r\n\r\n      for await (const createdCommunityId of user.createdCommunities) {\r\n        await this.communityModel.updateMany({ _id: createdCommunityId, \"createdBy._id\": new Types.ObjectId(userId) }, { $pull:  {\"createdBy.$[_id]createdCommunities\": communityId } } );\r\n      }\r\n\r\n      return await this.userModel.findOneAndUpdate({ _id: userId }, { $pull: { createdCommunities: communityId } }, {new: true});\r\n    }\r\n\r\n  //validation\r\n\r\n  async validate(user, currentUserId? : string, updateUserId? : string) : Promise<void> {\r\n    if((await this.userModel.find(\r\n      {\r\n        $or: \r\n        [\r\n            { username: user.username }, \r\n            { email: user.email }\r\n        ] \r\n      }, \r\n    )).length > 0 && !(await this.isMyData(currentUserId, updateUserId))) {\r\n    throw new HttpException(`Username or email is already in use!`, HttpStatus.BAD_REQUEST);\r\n    }\r\n\r\n    if(new Date(user.dateOfBirth) > new Date()) {\r\n    throw new HttpException(`Date of birth cannot be in the future!`, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  async isMyData(currentUserId? : string, targetUserId? : string) : Promise<boolean> {\r\n    return new Types.ObjectId(currentUserId).equals(new Types.ObjectId(targetUserId))\r\n  }\r\n\r\n  async doesExist(userId: string) : Promise<void> {\r\n    const user = await this.userModel.findOne({_id: userId});\r\n\r\n    if(!user) {\r\n      throw new HttpException(`User with id of ${userId} doesn't exist!`, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n}","export const environment = {\r\n  production: true,\r\n\r\n  //DIT IS LOKAAL\r\n\r\n\r\n  // DATABASE_CONNECTION: 'mongodb://127.0.0.1:27017/riddet',\r\n  DATABASE_CONNECTION: 'mongodb://mvdc2000:jhbhaAO95BxY4anP@ac-i23cy8u-shard-00-00.ryvfhc9.mongodb.net:27017,ac-i23cy8u-shard-00-01.ryvfhc9.mongodb.net:27017,ac-i23cy8u-shard-00-02.ryvfhc9.mongodb.net:27017/?ssl=true&replicaSet=atlas-zx8v9h-shard-0&authSource=admin&retryWrites=true&w=majority',\r\n\r\n  \r\n  //NEO4J\r\n  NEO4J_HOST: 'localhost',\r\n  NEO4J_PORT: 7687,\r\n  NEO4J_USERNAME: 'neo4j',\r\n  NEO4J_PASSWORD: 'neo',\r\n};\r\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/mongoose\");","module.exports = require(\"@nestjs/passport\");","module.exports = require(\"bcryptjs\");","module.exports = require(\"class-validator\");","module.exports = require(\"mongodb\");","module.exports = require(\"mongoose\");","module.exports = require(\"passport-jwt\");","module.exports = require(\"passport-local\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Logger, ValidationError, ValidationPipe } from '@nestjs/common';\r\nimport { NestFactory } from '@nestjs/core';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { ValidationException } from './app/shared/filters/validation.exception';\r\nimport { ValidationFilter } from './app/shared/filters/validation.filter';\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule);\r\n  const globalPrefix = 'api';\r\n  app.setGlobalPrefix(globalPrefix);\r\n  app.enableCors();\r\n  const port = process.env.PORT || 9000;\r\n  app.useGlobalFilters(new ValidationFilter());\r\n  app.useGlobalPipes(new ValidationPipe({\r\n    skipMissingProperties: true, \r\n    exceptionFactory: (errors: ValidationError[]) => {\r\n      const messages = errors.map(error => `${error.property} has wrong value: ${error.value}, ${Object.values(error.constraints).join(', ')}`);\r\n      return new ValidationException(messages);\r\n    }\r\n  }));\r\n\r\n  await app.listen(port);\r\n  Logger.log(\r\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\r\n  );\r\n}\r\n\r\nbootstrap();\r\n"],"names":[],"sourceRoot":""}