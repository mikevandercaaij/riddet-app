{"version":3,"file":"main.js","mappings":"yOAAA,mCACA,wCAGO,IAAMA,cAAN,MAAMA,cACXC,YAA6BC,YAAA,KAAAA,WAAAA,UAAyB,CAGtDC,UACE,OAAOC,KAAKF,WAAWC,SACzB,GAHA,qBAAC,WAAAE,O,8KAHUL,cAAa,qBADzB,WAAAM,c,wCAEoD,mB,QAAA,IAAV,cAAAC,YAAA,cAAAA,YAAU,aADxCP,eAAA,QAAAA,cAAAA,a,sLCJb,uCAEA,mCACA,qCAEA,gCACA,4CACA,0CACA,6CACA,yCACA,wCACA,2CACA,wCACA,4CACA,0CACA,yCACA,wCAiCO,IAAMQ,UAAN,MAAMA,YAAAA,UAAS,qBA/BrB,WAAAC,QAAO,CACNC,QAAS,CACP,WAAAC,eAAeC,QAAQ,mBAAAC,YAAYC,qBACnC,eAAAC,YAAYH,QAAQ,CAClBI,OAAQ,OACRC,KAAM,YACNC,KAAM,KACNC,SAAU,QACVC,SAAU,QAEZ,mBAAAC,gBACA,gBAAAC,aACA,cAAAC,WACA,cAAAC,WACA,kBAAAC,eACA,iBAAAC,eAGFC,YAAa,CAAC,iBAAA3B,eACd4B,UAAW,CACT,CACEC,QAAS,OAAAC,UACTC,SAAU,iBAAAC,cAEZ,CACEH,QAAS,OAAAC,UACTC,SAAU,cAAAE,YAEZ,cAAA1B,eAGSC,WAAA,QAAAA,UAAAA,S,8LCjDb,mCACA,yCAGO,IAAMD,WAAN,MAAMA,WAEXN,YAA6BiC,cAAA,KAAAA,aAAAA,YAA8B,CAE3D/B,UACE,MAAO,CAAEgC,QAAS,yBACpB,GANW5B,WAAU,qBADtB,WAAA6B,c,wCAGwD,mB,QAAA,IAAZ,gBAAAC,cAAA,gBAAAA,cAAY,aAF5C9B,YAAA,QAAAA,WAAAA,U,qMCJb,mCACA,qCACA,qCACA,uCACA,yCACA,sCAEO,IAAM+B,eAAN,MAAMA,eACXrC,YAA6BsC,aAAA,KAAAA,YAAAA,WAA4B,CAKnDC,MAAiBC,K,yDACnB,OAAOrC,KAAKmC,YAAYC,MAAMC,IAAIC,KACtC,G,CAIMC,SAAiBC,e,yDACnB,OAAOxC,KAAKmC,YAAYI,SAASC,cACrC,G,CAIAC,WAAsBJ,KACpB,OAAOA,IAAIK,IACb,GAdM,qBAHL,gBAAAC,WACA,WAAAC,YAAU,aAAAC,WAAU,WACpB,WAAAC,MAAK,cACO,8BAAAC,Y,oLAMP,qBAFL,gBAAAJ,WACA,WAAAG,MAAK,iBACU,8BAAAE,S,mFAAoC,mB,QAAA,IAAb,WAAAR,eAAA,WAAAA,eAAa,Y,2FAIpD,qBAAC,gBAAAS,OAAM,YAAAC,KAAKC,OACX,WAAAlD,KAAI,WACO,8BAAA8C,Y,wLAlBDb,eAAc,qBAD1B,WAAAhC,c,wCAEuD,mB,QAAA,IAAX,eAAAkD,aAAA,eAAAA,aAAW,aAD3ClB,gBAAA,QAAAA,eAAAA,c,2PCPA,QAAAmB,cAAgB,WAChB,QAAAV,OAAS,KAAM,WAAAW,aAAY,QAAAD,eAAe,GAE1C,QAAAE,UAAY,QACZ,QAAAN,MAAQ,IAAIO,SAAkB,WAAAF,aAAY,QAAAC,UAAWC,OAElE,yCACA,gCACA,qCACA,wCACA,4CACA,yCACA,sCACA,yCACA,2CAiBO,IAAMpC,WAAN,MAAMA,aAAAA,WAAU,qBAdtB,WAAAf,QAAO,CACNC,QAAS,CACP,cAAAa,WACA,WAAAsC,eACA,MAAAC,UAAUnB,SAAS,CACjBoB,OAAQ,YAAAC,aAAaD,OACrBE,YAAa,CAAEC,UAAW,SAI9BtC,UAAW,CAAC,eAAA4B,YAAa,iBAAAW,cAAe,eAAAC,aACxCC,QAAS,CAAC,eAAAb,aACV7B,YAAa,CAAC,kBAAAW,mBAEHd,YAAA,QAAAA,WAAAA,U,kMC/Bb,mCACA,gCACA,iCAGA,yCAGO,IAAMgC,YAAN,MAAMA,YACXvD,YACUqE,YACAC,YADA,KAAAD,YAAAA,YACA,KAAAC,WAAAA,UACP,CAEGC,aAAarD,SAAkBsD,M,yDACnC,MAAM3B,WAAoB1C,KAAKkE,YAAYI,sBAAsBvD,UAEjE,GAAI2B,aAAc6B,OAAOC,YAAYH,KAAM3B,KAAK1B,WAC9C,OAAO0B,KAGT,MAAM,IAAI,SAAA+B,cAAc,yBAA0B,SAAAC,WAAWC,YAC/D,G,CAEMpC,SAASqC,e,yDACb,MAAMlC,WAAoB1C,KAAKkE,YAAYW,OAAOD,eAClD,OAAO5E,KAAKoC,MAAMM,KACpB,G,CAEMN,MAAMM,M,yDACV,MAAMoC,QAAU,CAAE/D,SAAU2B,KAAK3B,UAE3BgE,mBAAqB/E,KAAKkE,YAAYI,sBAAsB5B,KAAK3B,UAEvE,MAAO,CACLiE,IAAKD,aAAaC,IAClBjE,SAAUgE,aAAahE,SACvBkE,UAAWF,aAAaE,UACxBC,SAAUH,aAAaG,SACvBC,MAAOJ,aAAaI,MACpB3B,MAAOuB,aAAavB,MACpB4B,aAAcL,aAAaK,aAC3BC,aAAcrF,KAAKmE,WAAWmB,KAAKR,SAEvC,G,GApCW1B,YAAW,qBADvB,WAAApB,c,wCAGmC,mB,QAAA,IAAX,eAAAuD,aAAA,eAAAA,aAAW,UACF,mBADE,QACF,IAAV,MAAAC,YAAA,MAAAA,YAAU,aAHrBpC,aAAA,QAAAA,YAAAA,W,8HCRA,QAAAQ,aAAe,CACxBD,OAAQ,Y,gMCDZ,mCACA,gCACA,qCACA,uCAGO,IAAM/B,aAAN,MAAMA,sBAAqB,aAAAiB,WAAU,QAC1ChD,YAAoB4F,WAClBC,QADkB,KAAAD,UAAAA,SAEpB,CAEAE,YAAYC,SAKV,QAJiB5F,KAAKyF,UAAUI,kBAA2B,cAAAxC,cAAe,CACxEuC,QAAQE,aACRF,QAAQG,cAKHL,MAAMC,YAAYC,QAC3B,GAdWhE,aAAY,qBADxB,WAAAI,c,wCAEyC,mB,QAAA,IAAT,OAAAgE,WAAA,OAAAA,WAAS,aAD7BpE,cAAA,QAAAA,aAAAA,Y,+LCNb,mCACA,qCACA,wCACA,yCACA,sCAGO,IAAMoC,YAAN,MAAMA,qBAAoB,aAAAiC,kBAAiB,eAAAC,WAChDrG,YAA6BqE,aAC3BwB,MAAM,CACJS,eAAgB,eAAAC,WAAWC,8BAC3BC,kBAAkB,EAClBC,YAAa,YAAA3C,aAAaD,SAJD,KAAAO,YAAAA,WAM7B,CAEMsC,SAAS1B,S,yDACb,MAAMpC,WAAa1C,KAAKkE,YAAYI,sBAAsBQ,QAAQ/D,UAElE,GAAG2B,KACD,MAAO,CAAE+D,GAAI/D,KAAKsC,IAAKjE,SAAU+D,QAAQ/D,SAAUoE,MAAOzC,KAAKyC,MAAOuB,KAAMhE,KAAKuC,UAAY,IAAMvC,KAAKwC,SAAU1B,MAAOd,KAAKc,OAE9H,MAAM,IAAI,SAAAiB,cAAc,qBAAsB,SAAAC,WAAWiC,aAE7D,G,GAjBW3C,YAAW,qBADvB,WAAAhC,c,wCAEuD,mB,QAAA,IAAX,eAAAuD,aAAA,eAAAA,aAAW,aAD3CvB,aAAA,QAAAA,YAAAA,W,iMCPb,mCACA,qCACA,2CACA,yCAGO,IAAMD,cAAN,MAAMA,uBAAsB,aAAAkC,kBAAiB,iBAAAC,WAClDrG,YAAoBsC,aAClBuD,QADkB,KAAAvD,YAAAA,WAEpB,CAEMqE,SAASzF,SAAkBC,U,yDAC/B,MAAM0B,WAAa1C,KAAKmC,YAAYiC,aAAarD,SAAUC,UAE3D,IAAK0B,KACH,MAAM,IAAI,SAAA+B,cAAc,gDAAiD,SAAAC,WAAWkC,WAGtF,OAAOlE,IACT,G,GAbWqB,cAAa,qBADzB,WAAA/B,c,wCAE6C,mB,QAAA,IAAX,eAAAoB,aAAA,eAAAA,aAAW,aADjCW,eAAA,QAAAA,cAAAA,a,sHCNb,SAAYb,MACR,iBACA,kBACD,CAHH,CAAY,QAAAA,OAAA,QAAAA,KAAI,I,8LCAhB,mCACA,gCACA,uCAIO,IAAMrB,WAAN,MAAMA,WACXhC,YAAoB4F,WAAA,KAAAA,UAAAA,SAAuB,CAE3CE,YAAYC,SACV,MAAMiB,cAAgB7G,KAAKyF,UAAUI,kBAA0B,cAAAtC,UAAW,CACxEqC,QAAQE,aACRF,QAAQG,aAEV,IAAKc,cACH,OAAO,EAET,MAAM,MAAWjB,QAAQkB,eAAeC,aACxC,OAAOF,cAAcG,MAAMC,OAAQ,OAAC,OAAU,QAAV,GAAAvE,KAAKc,aAAK,iBAAE0D,SAASD,KAAK,GAChE,GAbWpF,WAAU,qBADtB,WAAAG,c,wCAEyC,mB,QAAA,IAAT,OAAAgE,WAAA,OAAAA,WAAS,aAD7BnE,YAAA,QAAAA,WAAAA,U,wNCNb,mCACA,uCACA,sCACA,8CACA,wCAEA,6CAGO,IAAMsF,sBAAN,MAAMA,sBACXtH,YAA6BuH,iBAAA,KAAAA,gBAAAA,eAAmC,CAG1DC,QAC4BZ,I,yDAIhC,OAFA,SAAAa,OAAOC,IAAI,6BAA6Bd,mBAE3BzG,KAAKoH,gBAAgBC,QAAQZ,GAC5C,G,CAGMe,S,yDAGF,OAFA,SAAAF,OAAOC,IAAI,iCAEJvH,KAAKoH,gBAAgBI,QAChC,G,CAKM3C,OAAe4C,a,yDAGjB,OAFA,SAAAH,OAAOC,IAAI,8BAEJvH,KAAKoH,gBAAgBvC,OAAO4C,YACvC,G,CAIMC,OAAuCjB,I,yDAI3C,OAFA,SAAAa,OAAOC,IAAI,6BAA6Bd,eAEjCzG,KAAKoH,gBAAgBM,OAAOjB,GACrC,G,GA/BM,qBADL,WAAAxG,KAAI,OAEF,8BAAA0H,OAAM,KAAM,oBAAAC,oB,mIAAuC,mB,GAAA,oBAAPC,SAAAA,SAAO,Y,gDAQhD,qBADL,WAAA5H,O,6HACsB,mB,GAAA,oBAAP4H,SAAAA,SAAO,Y,+CASjB,qBAFL,gBAAA5E,OAAM,YAAAC,KAAK4E,QACX,WAAAhF,QACa,8BAAAE,S,mFAA+B,mB,QAAA,IAAX,eAAA+E,aAAA,eAAAA,aAAW,Y,uCAAU,mB,GAAA,oBAAPF,SAAAA,SAAO,Y,+CAQjD,qBAFL,gBAAA5E,OAAM,YAAAC,KAAK4E,QACX,WAAAE,QAAO,OACM,8BAAAL,OAAM,KAAM,oBAAAC,oB,mIAAuC,mB,GAAA,oBAAPC,SAAAA,SAAO,Y,+CA9BtDV,sBAAqB,qBADjC,WAAAjH,YAAW,c,wCAEmD,mB,QAAA,IAAf,mBAAA+H,iBAAA,mBAAAA,iBAAe,aADlDd,uBAAA,QAAAA,sBAAAA,qB,uLCTb,4CAEA,MAAaY,aACT,qBAAC,oBAAAG,UAAS,CAAEnG,QAAS,4BACpB,oBAAAoG,WAAU,CAAEpG,QAAS,uBACrB,oBAAAqG,YAAW,CAAErG,QAAS,0B,+EAH3B,+B,2LCFA,mCACA,qCACA,gDACA,4CACA,6CAYO,IAAMV,eAAN,MAAMA,iBAAAA,eAAc,qBAV1B,WAAAhB,QAAO,CACJC,QAAS,CACL,WAAAC,eAAe8H,WAAW,CACxB,CAAE3B,KAAM,kBAAA4B,SAAS5B,KAAM6B,OAAQ,kBAAAC,mBAGnCjH,YAAa,CAAC,sBAAA4F,uBACd3F,UAAW,CAAC,mBAAAyG,iBACZhE,QAAS,CAAC,mBAAAgE,oBAEH5G,gBAAA,QAAAA,eAAAA,c,4MChBb,qCAEA,4CAMO,IAAMiH,SAAN,MAAMA,WAGX,qBAAC,oBAAAJ,UAAS,CAAEnG,QAAS,4BACpB,oBAAAoG,WAAU,CAAEpG,QAAS,uBACrB,oBAAAqG,YAAW,CAAErG,QAAS,2BACtB,aAAA0G,Q,4EANUH,SAAQ,qBADpB,aAAAI,WACYJ,UAAA,QAAAA,SAAAA,SAUA,QAAAE,eAAiB,WAAAG,cAAcC,eAAeN,S,mMClB3D,mCACA,qCACA,qCAEA,4CAGO,IAAML,gBAAN,MAAMA,gBACTpI,YAAgDgJ,eAAA,KAAAA,cAAAA,aAAyC,CAEnFxB,QAAQrC,K,yDAGV,aAFMhF,KAAK8I,UAAU9D,KAEdhF,KAAK6I,cAAcE,QAAQ,CAAE/D,KACxC,G,CAEMwC,S,yDACF,OAAOxH,KAAK6I,cAAcG,KAAK,CAAC,EACpC,G,CAEMnE,OAAO4C,a,yDAGT,aAFMzH,KAAKwG,cAASyC,EAAWxB,YAAYf,MAEpC1G,KAAK6I,cAAchE,OAAO4C,YACrC,G,CAEMC,OAAO1C,K,yDAGT,aAFMhF,KAAK8I,UAAU9D,KAEdhF,KAAK6I,cAAcK,iBAAiB,CAAElE,KACjD,G,CAEMwB,SAASC,GAAaC,M,yDACxB,UAAS1G,KAAK6I,cAAcG,KAAK,CAACG,KAAM,CAAC,CAACnE,IAAK,CAACoE,IAAK3C,KAAM,CAACC,SAAe2C,kBAAmB,EAC5F,MAAM,IAAI,SAAA5E,cAAc,yBAAyBiC,uBAAwB,SAAAhC,WAAWC,YAE1F,G,CAEMmE,UAAUrC,I,yDAGZ,WAFuBzG,KAAK6I,cAAcE,QAAQ,CAAC/D,IAAKyB,MAGtD,MAAM,IAAI,SAAAhC,cAAc,uBAAuBgC,oBAAqB,SAAA/B,WAAWC,YAErF,G,GArCSsD,gBAAe,qBAD3B,WAAAjG,cAEgB,gCAAAsH,aAAY,kBAAAhB,SAAS5B,O,wCAAkC,mB,QAAA,IAAL,WAAA6C,OAAA,WAAAA,OAAK,aAD3DtB,iBAAA,QAAAA,gBAAAA,e,0OCPb,mCACA,uCACA,8CACA,0CAEA,8CAGO,IAAMd,sBAAN,MAAMA,sBACXtH,YAA6B2J,kBAAA,KAAAA,iBAAAA,gBAAqC,CAI5DhC,S,yDAGF,OAFA,SAAAF,OAAOC,IAAI,kCAEJvH,KAAKwJ,iBAAiBhC,QACjC,G,CAGMiC,wBAA+BpH,K,yDAGnC,OAFE,SAAAiF,OAAOC,IAAI,kDAENvH,KAAKwJ,iBAAiBC,wBAAwBpH,IACvD,G,CAGMqH,yBAAgCrH,K,yDAGpC,OAFE,SAAAiF,OAAOC,IAAI,mDAENvH,KAAKwJ,iBAAiBE,yBAAyBrH,IACxD,G,CAIMgF,QAC4BZ,I,yDAIhC,OAFA,SAAAa,OAAOC,IAAI,8BAA8Bd,mBAE5BzG,KAAKwJ,iBAAiBnC,QAAQZ,GAC7C,G,CAGM5B,OAAe8E,mBAA+CtH,K,yDAGhE,OAFA,SAAAiF,OAAOC,IAAI,+BAEJvH,KAAKwJ,iBAAiB3E,OAAO8E,mBAAoBtH,IAC5D,G,CAGMuH,OAAuCnD,GAAmBpE,IAAawH,oB,yDAI3E,OAFA,SAAAvC,OAAOC,IAAI,8BAA8Bd,eAElCzG,KAAKwJ,iBAAiBI,OAAOnD,GAAIoD,mBAAoBxH,IAC9D,G,CAGMqF,OAAuCjB,GAAmBpE,K,yDAI9D,OAFA,SAAAiF,OAAOC,IAAI,8BAA8Bd,eAElCzG,KAAKwJ,iBAAiB9B,OAAOjB,GAAIpE,IAC1C,G,CAMMyH,KAAqCrD,GAAmBpE,K,yDAI5D,OAFA,SAAAiF,OAAOC,IAAI,8BAA8Bd,eAElCzG,KAAKwJ,iBAAiBM,KAAKrD,GAAIpE,IACxC,G,CAGM0H,MAAsCtD,GAAmBpE,K,yDAI7D,OAFA,SAAAiF,OAAOC,IAAI,8BAA8Bd,eAElCzG,KAAKwJ,iBAAiBO,MAAMtD,GAAIpE,IACzC,G,GAtEM,qBAFL,gBAAAM,WACA,WAAA1C,O,6HACsB,mB,GAAA,oBAAP4H,SAAAA,SAAO,Y,+CAOjB,qBADL,WAAA5H,KAAI,WAC0B,8BAAA+J,Q,mIAAmB,mB,GAAA,oBAAPnC,SAAAA,SAAO,Y,gEAO5C,qBADL,WAAA5H,KAAI,YAC2B,8BAAA+J,Q,mIAAmB,mB,GAAA,oBAAPnC,SAAAA,SAAO,Y,iEAQ7C,qBAFL,gBAAAlF,WACA,WAAA1C,KAAI,OAEF,8BAAA0H,OAAM,KAAM,oBAAAC,oB,mIAAuC,mB,GAAA,oBAAPC,SAAAA,SAAO,Y,gDAQhD,qBADL,WAAA/E,QACa,8BAAAE,SAAgD,8BAAAgH,Q,mFAAH,mB,QAAA,IAAlB,gBAAAC,oBAAA,gBAAAA,oBAAkB,mB,uCAAsB,mB,GAAA,oBAAPpC,SAAAA,SAAO,Y,+CAO3E,qBADL,WAAAqC,OAAM,OACO,8BAAAvC,OAAM,KAAM,oBAAAC,oBAAgC,8BAAAoC,QAAY,8BAAAhH,S,iGAA6C,mB,QAAA,IAAlB,gBAAAmH,oBAAA,gBAAAA,oBAAkB,Y,uCAAU,mB,GAAA,oBAAPtC,SAAAA,SAAO,Y,+CAQvH,qBADL,WAAAG,QAAO,OACM,8BAAAL,OAAM,KAAM,oBAAAC,oBAAgC,8BAAAoC,Q,0IAAmB,mB,GAAA,oBAAPnC,SAAAA,SAAO,Y,+CAWvE,qBADL,WAAA/E,MAAK,YACM,8BAAA6E,OAAM,KAAM,oBAAAC,oBAAgC,8BAAAoC,Q,0IAAmB,mB,GAAA,oBAAPnC,SAAAA,SAAO,Y,6CAQrE,qBADL,WAAA/E,MAAK,aACO,8BAAA6E,OAAM,KAAM,oBAAAC,oBAAgC,8BAAAoC,Q,0IAAmB,mB,GAAA,oBAAPnC,SAAAA,SAAO,Y,8CAtEjEV,sBAAqB,qBADjC,WAAAjH,YAAW,e,wCAEqD,mB,QAAA,IAAhB,oBAAAkK,kBAAA,oBAAAA,kBAAgB,aADpDjD,uBAAA,QAAAA,sBAAAA,qB,0NCRb,4CAEA,MAAa8C,oBACX,qBAAC,oBAAA/B,UAAS,CAAEnG,QAAS,4BACpB,oBAAAoG,WAAU,CAAEpG,QAAS,uBACrB,oBAAAsI,WAAU,EAAG,CAAEtI,QAAS,6C,sFAGzB,qBAAC,oBAAAmG,UAAS,CAAEnG,QAAS,mCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,8BACrB,oBAAAqG,YAAW,CAAErG,QAAS,iC,6FAGvB,qBAAC,oBAAAmG,UAAS,CAAEnG,QAAS,gCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,2BACrB,oBAAAqG,YAAW,CAAErG,QAAS,8B,0FAGvB,qBAAC,oBAAAuI,WAAU,CAAEvI,QAAS,iCACrB,oBAAAoG,WAAU,CAAEpG,QAAS,2BACrB,oBAAAqG,YAAW,CAAErG,QAAS,8B,2FAIvB,qBAAC,oBAAAwI,eAAc,CAAExI,QAAS,iCACzB,oBAAAoG,WAAU,CAAEpG,QAAS,6B,2FAvBxB,8CA2BA,MAAaoI,oBACX,qBAAC,oBAAAK,eACA,oBAAAtC,UAAS,CAAEnG,QAAS,4BACpB,oBAAAoG,WAAU,CAAEpG,QAAS,uBACrB,oBAAAsI,WAAU,EAAG,CAAEtI,QAAS,6C,sFAGzB,qBAAC,oBAAAyI,eACA,oBAAAtC,UAAS,CAAEnG,QAAS,mCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,8BACrB,oBAAAqG,YAAW,CAAErG,QAAS,iC,6FAGvB,qBAAC,oBAAAyI,eACA,oBAAAtC,UAAS,CAAEnG,QAAS,gCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,2BACrB,oBAAAqG,YAAW,CAAErG,QAAS,8B,0FAGvB,qBAAC,oBAAAyI,eACA,oBAAAF,WAAU,CAAEvI,QAAS,iCACrB,oBAAAqG,YAAW,CAAErG,QAAS,8B,2FAGvB,qBAAC,oBAAAyI,eACA,oBAAAD,eAAc,CAAExI,QAAS,iCACzB,oBAAAqG,YAAW,CAAErG,QAAS,gC,2FA1BzB,6C,2LC7BA,mCACA,qCACA,4CACA,wCACA,iDACA,4CACA,8CAYO,IAAMd,gBAAN,MAAMA,kBAAAA,gBAAe,qBAV3B,WAAAZ,QAAO,CACNC,QAAS,CACP,WAAAC,eAAe8H,WAAW,CACxB,CAAE3B,KAAM,mBAAA+D,UAAU/D,KAAM6B,OAAQ,mBAAAmC,oBAC9B,WAAAC,aAAW,IAAM,kBAAAtJ,kBAAiB,WAAAsJ,aAAW,IAAM,cAAAxJ,cAEzDI,YAAa,CAAC,uBAAA4F,uBACd3F,UAAW,CAAC,oBAAA4I,kBACZnG,QAAS,CAAC,oBAAAmG,iBAAkB,WAAA7J,mBAEjBU,iBAAA,QAAAA,gBAAAA,e,uNClBb,qCAEA,4CAMA,wCAKO,IAAMwJ,UAAN,MAAMA,YAGX,qBAAC,oBAAAvC,UAAS,CAAEnG,QAAS,4BACpB,oBAAAoG,WAAU,CAAEpG,QAAS,uBACrB,oBAAAsI,WAAU,EAAG,CAAEtI,QAAS,8CACxB,aAAA0G,MAAK,CAACmC,QAAQ,I,6EAIf,qBAAC,oBAAA1C,UAAS,CAAEnG,QAAS,mCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,8BACrB,oBAAAqG,YAAW,CAAErG,QAAS,kCACtB,aAAA0G,Q,oFAGD,qBAAC,oBAAAoC,QAAO,CAAE9I,QAAS,mCAClB,aAAA0G,Q,iCACiB,mB,GAAA,oBAAJqC,MAAAA,MAAI,Y,2CAElB,qBAAC,oBAAA5C,UAAS,CAAEnG,QAAS,6BACpB,aAAA0G,Q,iFAGD,qBAAC,aAAAA,Q,kFAGD,qBAAC,aAAAA,MAAK,CACJsC,QAAS,K,kFAIX,qBAAC,aAAAtC,MAAK,CACJsC,QAAS,GACTC,IAAK,S,oFAIP,qBAAC,aAAAvC,MAAK,CACJsC,QAAS,K,+EAIX,qBAAC,aAAAtC,Q,iCACc,mB,QAAA,IAAJ,cAAAtF,MAAA,cAAAA,MAAI,Y,wCA5CJsH,UAAS,qBADrB,aAAA/B,WACY+B,WAAA,QAAAA,UAAAA,UA+CA,QAAAC,gBAAkB,WAAA/B,cAAcC,eAAe6B,U,0MC5D5D,mCACA,qCACA,qCACA,sCAEA,6CACA,8CAEA,yCAEA,4CAGO,IAAML,iBAAN,MAAMA,iBACTvK,YAAiDoL,eAChC7D,gBAC8BlD,aAFE,KAAA+G,eAAAA,eAChC,KAAA7D,gBAAAA,gBAC8B,KAAAlD,YAAAA,WAA4B,CAGrEmD,QAAQrC,K,yDAGV,aAFMhF,KAAK8I,UAAU9D,WAERhF,KAAKiL,eAAelC,QAAQ,CAAE/D,KAC/C,G,CAEMwC,S,yDACF,aAAaxH,KAAKiL,eAAejC,KAAK,CAAC,EAC3C,G,CAEMS,wBAAwBpH,K,oEAE1B,MAAM6I,kBAAkC,GAElCxI,WAAa1C,KAAKkE,YAAYmD,QAAQhF,IAAIK,KAAK+D,I,IAErD,IAAgC,IAAsB,GAAtB,yBAAA/D,KAAKwI,qBAAiB,2BAA3C,MAAMC,YAAW,SACxBD,kBAAkBE,WAAWpL,KAAKqH,QAAQ8D,YAAYE,Y,+HAG1D,OAAOH,iB,IAGLxB,yBAAyBrH,K,oEAE3B,MAAMiJ,mBAAmC,GAEnC5I,WAAa1C,KAAKkE,YAAYmD,QAAQhF,IAAIK,KAAK+D,I,IAErD,IAAgC,IAAuB,GAAvB,yBAAA/D,KAAK4I,sBAAkB,2BAA5C,MAAMH,YAAW,SACxBG,mBAAmBF,WAAWpL,KAAKqH,QAAQ8D,YAAYE,Y,+HAG3D,OAAOC,kB,IAGLzG,OAAO8E,mBAAyCtH,K,0EAC5CrC,KAAKwG,SAASmD,oBAEpB,MAAM4B,gBAA+B,G,IAErC,IAA6B,IAA6B,GAA7B,yBAAA5B,mBAAmB6B,cAAU,2BAA/C,MAAMC,SAAQ,SACrBF,gBAAgBH,WAAWpL,KAAKoH,gBAAgBC,QAAQoE,U,+HAG5D,MAAMC,cAAgB1L,KAAKkE,YAAYmD,QAAQhF,IAAIK,KAAK+D,WACjDiF,QAAQ1K,SAEf,MAAM2K,gBAAkB,IAAI3L,KAAKiL,eAAe,OAAD,wBACvCtB,oBAAkB,CACtBiC,aAAc,IAAId,KAClBU,WAAaD,gBACbM,UAAWH,WAGTI,gBAAkB9L,KAAKiL,eAAepG,OAAO8G,iBAMnD,aAJM3L,KAAKkE,YAAY6H,oBAAoB1J,IAAIK,KAAK+D,GAAIqF,UAAU9G,KAElEgH,QAAQzE,IAAIuE,UAAUG,SAEfH,S,IAGLlC,OAAOsC,SAAkBrC,mBAAwCxH,K,0EAC7DrC,KAAK8I,UAAUoD,gBACflM,KAAKmM,iBAAiB9J,IAAIK,KAAK+D,GAAIyF,SAAU7J,WAC7CrC,KAAKwG,SAASqD,mBAAoBqC,UAExC,IAAIE,aAAe,CAAC,EAEpB,GAAGvC,mBAAmB2B,WAAY,CAC9B,MAAMA,WAA0B,G,IAEhC,IAA6B,IAA6B,GAA7B,yBAAA3B,mBAAmB2B,cAAU,2BAA/C,MAAMC,SAAQ,SACrBD,WAAWJ,WAAWpL,KAAKoH,gBAAgBC,QAAQoE,U,sIAGhD5B,mBAAmB2B,WAC1BY,aAAe,CAACZ,W,CAKpB,OAFAY,aAAe,OAAH,wBAAOvC,oBAAuBuC,cAEnCpM,KAAKiL,eAAeoB,iBAAiB,CAAErH,IAAMkH,UAAYE,aAAc,CAAEE,KAAK,G,IAGnF5E,OAAO1C,IAAa3C,K,0EAChBrC,KAAK8I,UAAU9D,WACfhF,KAAKmM,iBAAiB9J,IAAIK,KAAK+D,GAAIzB,IAAK3C,KAE9C,MAAMyJ,gBAAkB9L,KAAKiL,eAAelC,QAAQ,CAAE/D,MAChD0G,cAAgB1L,KAAKkE,YAAYmD,QAAQyE,UAAUD,UAAU7G,IAAIqG,kBAEjErL,KAAKkE,YAAYqI,uBAAuBb,QAAQ1G,IAAIqG,WAAYS,UAAU9G,K,IAEhF,IAAkC,IAAsB,GAAtB,yBAAA8G,UAAUU,gBAAY,2BAA7C,MAAMC,cAAa,eACpBzM,KAAKkE,YAAYwI,sBAAsBD,cAAcpB,WAAYS,UAAU9G,I,+HAGrF,aAAahF,KAAKiL,eAAe/B,iBAAiB,CAAElE,K,IAKlD8E,KAAKqB,YAAsB9I,K,yDAG7B,SAFMrC,KAAK8I,UAAUqC,oBAEXnL,KAAKiL,eAAejC,KAAK,CAACG,KAAM,CAAC,CAACnE,IAAMmG,aAAc,CAAE,gBAAkB9I,IAAIK,KAAK+D,QAASkG,OAAS,EAC3G,MAAM,IAAI,SAAAlI,cAAc,sCAAuC,SAAAC,WAAWC,aAGzE,gBAAiB3E,KAAKiL,eAAejC,KAAK,CAAEG,KAAM,CAAE,CAACnE,IAAKmG,aAAc,CAACqB,aAAc,CAAEI,IAAMvK,IAAIK,KAAK+D,SAAWkG,QAAS,EAC7H,MAAM,IAAI,SAAAlI,cAAc,mDAAoD,SAAAC,WAAWC,aAK3F,aAFM3E,KAAKkE,YAAY2I,mBAAmBxK,IAAIK,KAAK+D,GAAI0E,aAEhDnL,KAAKiL,eAAeoB,iBAAiB,CAAErH,IAAMmG,aAAe,CAAE2B,MAAQ,CAAEN,aAAenK,IAAIK,KAAK+D,KAAQ,CAAE6F,KAAK,GAC1H,G,CAEMvC,MAAMoB,YAAsB9I,K,yDAK9B,SAJMrC,KAAK8I,UAAUqC,aAErBa,QAAQzE,IAAI4D,oBAEFnL,KAAKiL,eAAejC,KAAK,CAACG,KAAM,CAAC,CAACnE,IAAMmG,aAAc,CAAE,gBAAkB9I,IAAIK,KAAK+D,QAASkG,OAAS,EAC3G,MAAM,IAAI,SAAAlI,cAAc,uCAAwC,SAAAC,WAAWC,aAI1E,GAA8H,iBAA7G3E,KAAKiL,eAAejC,KAAK,CAAEG,KAAM,CAAE,CAACnE,IAAKmG,aAAc,CAACqB,aAAc,CAAEI,IAAMvK,IAAIK,KAAK+D,SAAWkG,QACpH,MAAM,IAAI,SAAAlI,cAAc,+CAAgD,SAAAC,WAAWC,aAKvF,aAFM3E,KAAKkE,YAAYwI,sBAAsBrK,IAAIK,KAAK+D,GAAI0E,aAEnDnL,KAAKiL,eAAeoB,iBAAiB,CAAErH,IAAMmG,aAAe,CAAE4B,MAAQ,CAAEP,aAAenK,IAAIK,KAAK+D,KAAQ,CAAE6F,KAAK,GAC1H,G,CAIMU,cAAcC,UAAoBvB,S,+DAC9B1L,KAAKiL,eAAeiC,WAAW,CAAE,gBAAkBD,WAAa,CAAEE,KAAO,CAAEtB,UAAYH,UACjG,G,CAGMlF,SAASsF,UAAgCsB,oB,yDAC3C,GAAGtB,UAAUpF,aACC1G,KAAKiL,eAAejC,KAAK,CAACG,KAAM,CAAC,CAACzC,KAAMoF,UAAUpF,MAAQ,CAAC1B,IAAM,CAAEoE,IAAKgE,yBAA0BT,OAAS,EACjH,MAAM,IAAI,SAAAlI,cAAc,8BAA8BqH,UAAUpF,uBAAwB,SAAAhC,WAAWC,aAI3G,GAAGmH,UAAUN,oBACExL,KAAKqN,kBAAkBvB,UAAUN,aACxC,MAAM,IAAI,SAAA/G,cAAc,wEAAyE,SAAAC,WAAWC,YAGxH,G,CAEM0I,kBAAkBC,O,yDACpB,OAAOA,MAAMC,OAAO9G,IAAO,oBAAAmB,kBAAkB4F,gBAAgB/G,KACjE,G,CAEM0F,iBAAiBsB,cAAyBtC,YAAuB9I,K,yDACnE,MAAMyJ,gBAAkB9L,KAAKiL,eAAelC,QAAQ,CAAE/D,IAAMmG,cAE5D,IAAK,IAAI,WAAAuC,MAAMC,SAASF,eAAeG,OAAO9B,UAAUD,UAAU7G,OAAW3C,IAAIK,KAAKc,MAAM0D,SAAS,YAAAhE,KAAK4E,OACtG,MAAM,IAAI,SAAArD,cAAc,qDAAsD,SAAAC,WAAWC,YAGjG,G,CAEMmE,UAAUqC,a,yDAGZ,WAFwBnL,KAAKiL,eAAelC,QAAQ,CAAE/D,IAAMmG,eAGxD,MAAM,IAAI,SAAA1G,cAAc,wBAAwB0G,6BAA8B,SAAAzG,WAAWC,YAEjG,G,GA1LSyF,iBAAgB,qBAD5B,WAAApI,cAEgB,gCAAAsH,aAAY,mBAAAmB,UAAU/D,OAElC,8BAAAmH,SAAO,WAAAlD,aAAW,IAAM,eAAApF,gB,wCAF6C,mB,QAAA,IAAL,WAAAgE,OAAA,WAAAA,OAAK,UACpB,mBADoB,QACpB,IAAf,mBAAAtB,iBAAA,mBAAAA,iBAAe,UACsB,mBADtB,QACsB,IAAX,eAAA1C,aAAA,eAAAA,aAAW,aAH/D6E,kBAAA,QAAAA,iBAAAA,gB,6NCbb,mCACA,uCACA,8CAEA,sCAEA,4CAGO,IAAM0D,kBAAN,MAAMA,kBACXjO,YAA6BkO,gBAAA,KAAAA,eAAAA,cAAiC,CAIxD1G,QACqC8D,YACH6C,SACCC,W,yDAKvC,OAFA,SAAA3G,OAAOC,IAAI,4BAA4B0G,0BAE1BjO,KAAK+N,eAAe1G,QAAQ8D,YAAa6C,SAAUC,UAChE,G,CAIMzG,OACqC2D,YACH6C,U,yDAKtC,OAFA,SAAA1G,OAAOC,IAAI,qCAEEvH,KAAK+N,eAAevG,OAAO2D,YAAa6C,SACvD,G,CAGMnJ,OACqCsG,YACH6C,SAC/B3L,IACC6L,Y,yDAIR,OADA,SAAA5G,OAAOC,IAAI,qCACEvH,KAAK+N,eAAelJ,OAAOsG,YAAa6C,SAAU3L,IAAK6L,WACtE,G,CAGMtE,OAAgDuB,YAChB6C,SACCC,UAChC5L,IACC6L,Y,yDAGN,OAFA,SAAA5G,OAAOC,IAAI,2BAA2ByG,qBAE/BhO,KAAK+N,eAAenE,OAAOuB,YAAa6C,SAAUC,UAAWC,WAAY7L,IAClF,G,CAGMqF,OAAgDyD,YAChB6C,SACCC,UAChC5L,K,yDAIL,OAFA,SAAAiF,OAAOC,IAAI,2BAA2ByG,oCAAoC7C,wBAEnEnL,KAAK+N,eAAerG,OAAOyD,YAAa6C,SAAUC,UAAW5L,IACtE,G,CAGM8L,KAA8ChD,YACb6C,SACCC,UAChC5L,K,yDAGJ,OAFA,SAAAiF,OAAOC,IAAI,2BAA2ByG,mBAE/BhO,KAAK+N,eAAeI,KAAKhD,YAAa6C,SAAUC,UAAW5L,IACtE,G,GAjEI,qBAFL,gBAAAM,WACA,WAAA1C,KAAI,kEAEF,8BAAA0H,OAAM,cAAe,oBAAAC,oBACrB,8BAAAD,OAAM,WAAY,oBAAAC,oBAClB,8BAAAD,OAAM,YAAa,oBAAAC,oB,iJACV,mB,GAAA,oBAAPC,SAAAA,SAAO,Y,4CASJ,qBAFL,gBAAAlF,WACA,WAAA1C,KAAI,uDAEF,8BAAA0H,OAAM,cAAe,oBAAAC,oBACrB,8BAAAD,OAAM,WAAY,oBAAAC,oB,0IACR,mB,GAAA,oBAAPC,SAAAA,SAAO,Y,2CAQP,qBADL,WAAA/E,MAAK,uDAEH,8BAAA6E,OAAM,cAAe,oBAAAC,oBACrB,8BAAAD,OAAM,WAAY,oBAAAC,oBAClB,8BAAAoC,QACA,8BAAAhH,S,wGAA6B,mB,QAAA,IAAV,cAAAoL,YAAA,cAAAA,YAAU,Y,uCACnB,mB,GAAA,oBAAPvG,SAAAA,SAAO,Y,2CAOP,qBADL,WAAAqC,OAAM,kEACO,8BAAAvC,OAAM,cAAe,oBAAAC,oBAClC,8BAAAD,OAAM,WAAY,oBAAAC,oBAClB,8BAAAD,OAAM,YAAa,oBAAAC,oBACnB,8BAAAoC,QACA,8BAAAhH,S,+GAA6B,mB,QAAA,IAAV,cAAAoL,YAAA,cAAAA,YAAU,Y,uCAAU,mB,GAAA,oBAAPvG,SAAAA,SAAO,Y,2CAOlC,qBADL,WAAAG,QAAO,kEACM,8BAAAL,OAAM,cAAe,oBAAAC,oBAClC,8BAAAD,OAAM,WAAY,oBAAAC,oBAClB,8BAAAD,OAAM,YAAa,oBAAAC,oBACnB,8BAAAoC,Q,wJAAmB,mB,GAAA,oBAAPnC,SAAAA,SAAO,Y,2CAQd,qBADL,WAAA/E,MAAK,uEACM,8BAAA6E,OAAM,cAAe,oBAAAC,oBAC/B,8BAAAD,OAAM,WAAY,oBAAAC,oBAClB,8BAAAD,OAAM,YAAa,oBAAAC,oBACnB,8BAAAoC,Q,wJAAmB,mB,GAAA,oBAAPnC,SAAAA,SAAO,Y,yCAlEZiG,kBAAiB,qBAD7B,WAAA5N,c,wCAE4D,mB,QAAA,IAAd,kBAAAmO,gBAAA,kBAAAA,gBAAc,aADhDP,mBAAA,QAAAA,kBAAAA,iB,qLCTb,4CAEA,MAAaM,YACT,qBAAC,oBAAAlG,UAAS,CAAEnG,QAAS,4BACpB,oBAAAoG,WAAU,CAAEpG,QAAS,sB,8EAF1B,6B,yLCFA,mCACA,qCACA,4CACA,+CACA,2CACA,4CAYO,IAAMT,cAAN,MAAMA,gBAAAA,cAAa,qBAVzB,WAAAjB,QAAO,CACJC,QAAS,CACL,WAAAC,eAAe8H,WAAW,CACxB,CAAE3B,KAAM,iBAAA4H,QAAQ5H,KAAM6B,OAAQ,iBAAAgG,iBAC5B,mBAAAtN,iBAERO,UAAW,CAAC,kBAAA6M,gBACZ9M,YAAa,CAAC,qBAAAuM,mBACd7J,QAAS,CAAC,kBAAAoK,mBAED/M,eAAA,QAAAA,cAAAA,a,oNCjBb,qCAEA,4CAGA,qCAKO,IAAMgN,QAAN,MAAMA,UAKX,qBAAC,oBAAApG,UAAS,CAAEnG,QAAS,4BACpB,oBAAAoG,WAAU,CAAEpG,QAAS,uBACrB,aAAA0G,MAAK,CAACmC,QAAQ,I,2EAGf,qBAAC,aAAAnC,MAAK,CACJ+F,SAAU,GACVxD,IAAK,S,2EAIP,qBAAC,oBAAAH,QAAO,CAAE9I,QAAS,mCAClB,aAAA0G,Q,iCACoB,mB,GAAA,oBAAJqC,MAAAA,MAAI,Y,4CAGrB,qBAAC,aAAArC,MAAK,CACJuC,IAAK,S,iCAEa,mB,QAAA,IAAR,WAAA2C,UAAA,WAAAA,UAAQ,Y,sCAxBTW,QAAO,qBADnB,aAAA5F,WACY4F,SAAA,QAAAA,QAAAA,QA2BA,QAAAC,cAAgB,WAAA5F,cAAcC,eAAe0F,Q,qMCrC1D,mCACA,qCACA,qCACA,sCACA,4CAGA,2CAIO,IAAMD,eAAN,MAAMA,eACXxO,YACuCoL,eACFwD,cADE,KAAAxD,eAAAA,eACF,KAAAwD,aAAAA,YAChC,CAGCpH,QAAQ8D,YAAqB6C,SAAmBC,W,+DAC9CjO,KAAK8I,UAAUqC,YAAa6C,SAAUC,WAE5C,MAAMS,cAAgB1O,KAAKiL,eAAe0D,UAAU,CAClD,CAAEC,OAAS,CAAE5J,IAAM,IAAI,WAAA0I,MAAMC,SAASxC,eACtC,CAAE0D,QAAU,CAAEC,KAAM,gBAAiBC,4BAA4B,IACjE,CAAEC,SAAW,CACThK,IAAM,EACN,QAAY,CACRiK,QAAU,CACNC,MAAQ,WACRC,GAAK,SACLC,MAAO,MAInB,CAAEP,QAAU,CAAEC,KAAM,WAAYC,4BAA4B,IAC5D,CAAEF,QAAU,CAAEC,KAAM,qBAAsBC,4BAA4B,IAEtE,CAAEM,QAAU,CACRC,KAAO,QACPC,WAAa,oBACbC,aAAe,MACfL,GAAK,sBAET,CAAEN,QAAU,CAAEC,KAAM,oBAAqBC,4BAA4B,IACrE,CAAEM,QAAU,CACRC,KAAO,QACPC,WAAa,6BACbC,aAAe,MACfL,GAAK,+BAET,CAAEhC,KAAM,CACJ,6BAA8B,gCAElC,CAAEsC,OAAQ,CACNzK,IAAK,eACL0K,SAAU,CACR5C,MAAO,uBAGb,CAAE6C,OAAQ,CAAC,8BAA+B,8BAC1C,GAAGD,SAASE,QAAO7N,SAAW,IAAI,WAAA2L,MAAMC,SAAS5L,QAAQiD,KAAK4I,OAAO,IAAI,WAAAF,MAAMC,SAASM,cAAa,GAEzG,OAAO,OAAP,wBAAYS,QAAM,CAAE7C,UAAW6C,OAAO7C,UAAU,IAEhD,G,CAEMrE,OAAO2D,YAAsB6C,U,yDAGjC,aAFMhO,KAAK8I,UAAUqC,YAAa6C,iBAEpBhO,KAAKiL,eAAe0D,UAAU,CAC1C,CAAEC,OAAS,CAAE5J,IAAM,IAAI,WAAA0I,MAAMC,SAASxC,eACtC,CAAE0D,QAAU,CAAEC,KAAM,gBAAiBC,4BAA4B,IACjE,CAAEC,SAAW,CACThK,IAAM,EACN,QAAY,CACRiK,QAAU,CACNC,MAAQ,WACRC,GAAK,SACLC,MAAO,MAInB,CAAEP,QAAU,CAAEC,KAAM,WAAYC,4BAA4B,IAC5D,CAAEF,QAAU,CAAEC,KAAM,qBAAsBC,4BAA4B,IAEtE,CAAEM,QAAU,CACRC,KAAO,QACPC,WAAa,oBACbC,aAAe,MACfL,GAAK,sBAET,CAAEN,QAAU,CAAEC,KAAM,oBAAqBC,4BAA4B,IACrE,CAAEM,QAAU,CACRC,KAAO,QACPC,WAAa,6BACbC,aAAe,MACfL,GAAK,+BAET,CAAEhC,KAAM,CACJ,6BAA8B,gCAElC,CAAEsC,OAAQ,CACNzK,IAAK,eACL0K,SAAU,CACR5C,MAAO,uBAGb,CAAE6C,OAAQ,CAAC,8BAA+B,8BAC1C,GAAGD,SAASG,KAAI9N,SAAoB,OAAP,wBAAYA,SAAO,CAAE8J,UAAW9J,QAAQ8J,UAAU,MACnF,G,CAEMhH,OAAOsG,YAAa6C,SAAU3L,IAAK6L,Y,+DAC/BlO,KAAK8I,UAAUqC,YAAa6C,UAElC,MAAMlC,gBAAkB9L,KAAKiL,eAAelC,QAAQ,CAAE/D,IAAKmG,cAE3D,YAAYnL,KAAKiL,eAAejC,KAAK,CAACG,KAAM,CAAC,CAACnE,IAAKmG,aAAc,CAACqB,aAAc,CAAEI,IAAM,CAACvK,IAAIK,KAAK+D,UAAUkG,OAAS,GAChHb,UAAUD,UAAU7G,IAAI4I,OAAO,IAAI,WAAAF,MAAMC,SAAStL,IAAIK,KAAK+D,MAC3DpE,IAAIK,KAAKc,MAAM0D,SAAS,YAAAhE,KAAK4E,QAChC,MAAM,IAAI,SAAArD,cAAc,0CAA2C,SAAAC,WAAWC,aAGhF,MAAMmL,cAAgB,IAAI9P,KAAKyO,aAAa,OAAD,wBACtCP,YAAU,CACb6B,gBAAiB,IAAIjF,KACrBe,UAAWxJ,IAAIK,KAAK+D,MAItB,aADqBzG,KAAKiL,eAAeoB,iBAAiB,CAAErH,IAAMmG,aAAgB,CAAE2B,MAAO,CAAE,6BAA+BgD,gBAAmB,CAAEE,aAAc,CAAC,CAAE,aAAc,IAAI,WAAAtC,MAAMC,SAASK,YAAc1B,KAAK,KACxML,QAAQ2D,QAAOlB,QAAUA,OAAO1J,IAAI4I,OAAO,IAAI,WAAAF,MAAMC,SAASK,aAAY,GAAG0B,SAASE,QAAO7N,SAAWA,QAAQiD,IAAI4I,OAAOkC,cAAc9K,OAAM,EACjK,G,CAEM4E,OAAOuB,YAAqB6C,SAAkBC,UAAmBC,WAAwB7L,K,+DACrFrC,KAAK8I,UAAUqC,YAAa6C,SAAUC,WAE5C,MAAMgC,iBAAmBjQ,KAAKqH,QAAQ8D,YAAa6C,SAAUC,WACvDlM,QAAU,OAAH,wBAAOkO,YAAe/B,YAEnC,WAAWlO,KAAKkQ,SAASnO,QAAQ8J,UAAUR,WAAYhJ,IAAIK,KAAK+D,OAAUpE,IAAIK,KAAKc,MAAM0D,SAAS,YAAAhE,KAAK4E,OACrG,MAAM,IAAI,SAAArD,cAAc,0CAA2C,SAAAC,WAAWC,aAGhF,aAAc3E,KAAKiL,eAAeoB,iBAAiB,CAACrH,IAAK,IAAI,WAAA0I,MAAMC,SAASxC,aAAc,cAAe,IAAI,WAAAuC,MAAMC,SAASK,WAAY,CAAClB,MAAO,CAAC,qBAAsB,OAAF,wBAAM/K,SAAYmM,cAAe,CAAC5B,KAAK,KAAQL,QAAQ2D,QAAOlB,QAAUA,OAAO1J,IAAI4I,OAAO,IAAI,WAAAF,MAAMC,SAASK,aAAY,GAAG0B,SAASE,QAAO7N,SAAWA,QAAQiD,IAAI4I,OAAO,IAAI,WAAAF,MAAMC,SAASM,cAAa,EACjX,G,CAEIvG,OAAOyD,YAAsB6C,SAAmBC,UAAoB5L,K,+DAClErC,KAAK8I,UAAUqC,YAAa6C,SAAUC,WAE5C,MAAMlM,cAAgB/B,KAAKqH,QAAQ8D,YAAa6C,SAAUC,WAE1D,WAAWjO,KAAKkQ,SAASnO,QAAQ8J,UAAUR,WAAYhJ,IAAIK,KAAK+D,OAAUpE,IAAIK,KAAKc,MAAM0D,SAAS,YAAAhE,KAAK4E,OACnG,MAAM,IAAI,SAAArD,cAAc,0CAA2C,SAAAC,WAAWC,aAGlF,aAAc3E,KAAKiL,eAAeoB,iBAAiB,CAACrH,IAAK,IAAI,WAAA0I,MAAMC,SAASxC,aAAc,cAAe,IAAI,WAAAuC,MAAMC,SAASK,WAAY,CAACjB,MAAO,CAAC,qBAAsBhL,UAAW,CAACuK,KAAM,KAAQL,QAAQ2D,QAAOlB,QAAUA,OAAO1J,IAAI4I,OAAO,IAAI,WAAAF,MAAMC,SAASK,aAAY,EAC7Q,G,CAGIG,KAAKhD,YAAsB6C,SAAmBC,UAAoB5L,K,yDAGtE,IAAIyJ,UASJ,aAXM9L,KAAK8I,UAAUqC,YAAa6C,SAAUC,WAK1CnC,UADwM,WAA/L9L,KAAKiL,eAAejC,KAAK,CAAEG,KAAM,CAAC,CAACnE,IAAKmG,aAAc,CAACc,QAAS,CAACkE,WAAY,CAACnL,IAAKgJ,SAAU0B,SAAW,CAACS,WAAa,CAACnL,IAAKiJ,UAAWmC,MAAQ,CAACxD,IAAK,CAACvK,IAAIK,KAAK+D,cAAqBkG,aAC1K3M,KAAKiL,eAAeoB,iBAAiB,CAACrH,IAAK,IAAI,WAAA0I,MAAMC,SAASxC,aAAc,cAAe,IAAI,WAAAuC,MAAMC,SAASK,WAAY,CAAClB,MAAO,CAAC,sCAAuCzK,IAAIK,KAAK+D,KAAM,CAACuJ,aAAc,CAAC,CAAE,cAAe,IAAI,WAAAtC,MAAMC,SAASM,aAAe3B,KAAK,UAGjQtM,KAAKiL,eAAeoB,iBAAiB,CAACrH,IAAK,IAAI,WAAA0I,MAAMC,SAASxC,aAAc,cAAe,IAAI,WAAAuC,MAAMC,SAASK,WAAY,CAACjB,MAAO,CAAC,sCAAuC1K,IAAIK,KAAK+D,KAAM,CAACuJ,aAAc,CAAC,CAAE,cAAe,IAAI,WAAAtC,MAAMC,SAASM,aAAe3B,KAAK,IAG/QR,UAAUG,QAAQ2D,QAAOlB,QAAUA,OAAO1J,IAAI4I,OAAO,IAAI,WAAAF,MAAMC,SAASK,aAAY,GAAG0B,SAASE,QAAO7N,SAAWA,QAAQiD,IAAI4I,OAAO,IAAI,WAAAF,MAAMC,SAASM,cAAa,EAC9K,G,CAEQiC,SAASzC,cAAoC4C,c,yDACjD,OAAO,IAAI,WAAA3C,MAAMC,SAASF,eAAeG,OAAO,IAAI,WAAAF,MAAMC,SAAS0C,cACrE,G,CAEMvH,UAAUqC,YAAsB6C,SAAoBC,W,yDACxD,MAAMnC,gBAAkB9L,KAAKiL,eAAelC,QAAQ,CAAE/D,IAAMmG,cAC5D,IAAIc,QAEJ,IAAIH,UACF,MAAM,IAAI,SAAArH,cAAc,wBAAwB0G,6BAA8B,SAAAzG,WAAWC,aAG3F,GAAGqJ,WACD/B,cAAgBH,UAAUG,QAAQ2D,QAAOlB,QAAUA,OAAO1J,IAAI4I,OAAO,IAAI,WAAAF,MAAMC,SAASK,eACnF/B,QAAQU,OAAS,IACpB,MAAM,IAAI,SAAAlI,cAAc,qBAAqBuJ,sDAAsD7C,eAAgB,SAAAzG,WAAWC,aAIlI,GAAGqJ,UAAYC,aACRhC,QAAQ,GAAGyD,SAASE,QAAO7N,SAAWA,QAAQiD,IAAI4I,OAAO,IAAI,WAAAF,MAAMC,SAASM,cAAatB,OAAS,GACrG,MAAM,IAAI,SAAAlI,cAAc,sBAAsBwJ,oDAAoDD,YAAa,SAAAtJ,WAAWC,YAGhI,G,GA1LW0J,eAAc,qBAD1B,WAAArM,cAGI,gCAAAsH,aAAY,mBAAAmB,UAAU/D,OACtB,gCAAA4C,aAAY,iBAAAgF,QAAQ5H,O,wCADqC,mB,QAAA,IAAL,WAAA6C,OAAA,WAAAA,OAAK,UACJ,mBADI,QACJ,IAAL,WAAAA,OAAA,WAAAA,OAAK,aAH7C8E,gBAAA,QAAAA,eAAAA,c,oPCXA,QAAAiC,aAAe,eACf,QAAAC,aAAe,c,0MCD5B,mCAEA,4CACA,yCACA,uCAKO,IAAM5P,YAAW,cAAjB,MAAMA,YACX6P,eAAeC,QACb,MAAO,CACLC,OAAQ,cACRlP,UAAW,CACT,gBAAAS,aACA,CACER,QAAS,kBAAA6O,aACTK,SAAUF,QAEZ,CACEhP,QAAS,kBAAA8O,aACTK,OAAQ,CAAC,kBAAAN,cACTO,WAAaJ,SAAwB,eAAAK,cAAaL,UAGtDxM,QAAS,CAAC,gBAAAhC,cAEd,GAlBWtB,YAAW,mCADvB,WAAAN,QAAO,CAAC,IACIM,aAAA,QAAAA,YAAAA,W,kMCTb,mCACA,yCACA,mDACA,4CAGO,IAAMsB,aAAN,MAAMA,aAEXpC,YACyC4Q,OACAM,QADA,KAAAN,OAAAA,OACA,KAAAM,OAAAA,MACtC,CAEHC,YACE,OAAOhR,KAAK+Q,MACd,CAEAE,YACE,OAAOjR,KAAKyQ,MACd,CAEAS,eAAeC,UACb,OAAOnR,KAAK+Q,OAAOK,QAAQ,CACzBD,SAAUA,UAAYnR,KAAKyQ,OAAOU,SAClCE,kBAAmB,uBAAMD,QAAQE,MAErC,CAEAC,gBAAgBJ,UACd,OAAOnR,KAAK+Q,OAAOK,QAAQ,CACzBD,SAAUA,UAAYnR,KAAKyQ,OAAOU,SAClCE,kBAAmB,uBAAMD,QAAQI,OAErC,CAEAC,KAAKC,OAAgBC,OAA6BR,UAEhD,OADgBnR,KAAKkR,eAAeC,UACrBS,IAAIF,OAAQC,OAC7B,CAEAE,MAAMH,OAAgBC,OAA6BR,UAEjD,OADgBnR,KAAKuR,gBAAgBJ,UACtBS,IAAIF,OAAQC,OAC7B,GArCW1P,aAAY,qBADxB,WAAAD,cAII,8BAAA6L,QAAO,kBAAAyC,eACP,8BAAAzC,QAAO,kBAAA0C,e,wCADkD,mB,QAAA,IAAX,yBAAAuB,aAAA,yBAAAA,aAAW,UACL,mBADK,QACL,IAAN,eAAAC,QAAA,eAAAA,QAAM,aAJ5C9P,cAAA,QAAAA,aAAAA,Y,yLCNb,yCAGa,QAAA6O,aAAsBL,QAAwB,QAAD,4CACtD,MAAMM,OAAiB,uBAAMA,OACzB,GAAGN,OAAO7P,YAAY6P,OAAO5P,QAAQ4P,OAAO3P,OAC5C,uBAAMkR,KAAKC,MAAMxB,OAAO1P,SAAU0P,OAAOzP,WAK7C,aAFM+P,OAAOmB,qBAENnB,MACX,G,yJCZA,yCAEA,MAAaoB,4BAA4B,SAAAC,oBACvCvS,YAAmBwS,kBACjB3M,QADiB,KAAA2M,iBAAAA,gBAEnB,EAHF,+C,6LCFA,mCACA,iDAGO,IAAMC,iBAAN,MAAMA,iBACXC,MAAMC,UAAgC3R,MAIpC,OAHYA,KAAKiG,eACI2L,cAELC,OAAO,KAAKC,KAAK,CAC7BC,WAAY,IACZC,WAAW,IAAI/H,MAAOgI,cACtBC,OAAQP,UAAUH,kBAExB,GAVWC,iBAAgB,qBAD5B,WAAAU,OAAM,uBAAAb,sBACMG,kBAAA,QAAAA,iBAAAA,gB,8LCJb,mCACA,oCACA,iDAGO,IAAM1K,kBAAN,MAAMA,kBAEFqL,UAAU3F,OACb,IAEI,OADsC,UAAAK,SAASuF,oBAAoB5F,M,CAErE,MAAO6F,OACL,MAAM,IAAI,uBAAAhB,oBAAoB,CAAC,6BAA6B7E,iC,CAEpE,CAEOkD,uBAAuBlD,OAC1B,IAEI,OADA,UAAAK,SAASuF,oBAAoB5F,QACtB,C,CACT,MAAO6F,OACL,OAAO,C,CAEf,GAlBSvL,kBAAiB,qBAD7B,WAAA5F,eACY4F,mBAAA,QAAAA,kBAAAA,iB,oNCLb,4CAEA,MAAawL,iBACX,qBAAC,oBAAAlL,UAAS,CAAEnG,QAAS,6BACpB,oBAAAoG,WAAU,CAAEpG,QAAS,wBACrB,oBAAAsI,WAAU,EAAG,CAAEtI,QAAS,8C,oFAGzB,qBAAC,oBAAAmG,UAAS,CAAEnG,QAAS,+BACpB,oBAAAoG,WAAU,CAAEpG,QAAS,yB,sFAGtB,qBAAC,oBAAAmG,UAAS,CAAEnG,QAAS,gCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,0B,uFAGtB,qBAAC,oBAAAmG,UAAS,CAAEnG,QAAS,kCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,4B,yFAfxB,wCAmBA,MAAasR,iBACX,qBAAC,oBAAA7I,eACA,oBAAAtC,UAAS,CAAEnG,QAAS,6BACpB,oBAAAoG,WAAU,CAAEpG,QAAS,wBACrB,oBAAAsI,WAAU,EAAG,CAAEtI,QAAS,8C,oFAGzB,qBAAC,oBAAAyI,eACA,oBAAAtC,UAAS,CAAEnG,QAAS,+BACpB,oBAAAoG,WAAU,CAAEpG,QAAS,yB,sFAGtB,qBAAC,oBAAAyI,eACA,oBAAAtC,UAAS,CAAEnG,QAAS,gCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,0B,uFAGtB,qBAAC,oBAAAyI,eACA,oBAAAtC,UAAS,CAAEnG,QAAS,kCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,4B,yFAnBxB,uC,4NCrBA,mCACA,uCACA,8CACA,uCAEA,2CAGO,IAAMuR,iBAAN,MAAMA,iBACXzT,YAA6B0T,eAAA,KAAAA,cAAAA,aAA+B,CAItDlM,QACqC8D,YACH6C,U,yDAKtC,OAFA,SAAA1G,OAAOC,IAAI,2BAA2ByG,sCAAsC7C,4BAE/DnL,KAAKuT,cAAclM,QAAQ8D,YAAa6C,SACvD,G,CAIMxG,OACqC2D,a,yDAIvC,OAFA,SAAA7D,OAAOC,IAAI,qDAAqD4D,sBAEzDnL,KAAKuT,cAAc/L,OAAO2D,YACnC,G,CAGItG,OAAgDsG,YAC/C9I,IACCmR,iB,yDAGJ,OAFA,SAAAlM,OAAOC,IAAI,4BAEJvH,KAAKuT,cAAc1O,OAAO2O,gBAAiBrI,YAAa9I,IACnE,G,CAGMuH,OAAgDuB,YAChB6C,SAC/B3L,IACCoR,iB,yDAGN,OAFA,SAAAnM,OAAOC,IAAI,2BAA2ByG,qBAE/BhO,KAAKuT,cAAc3J,OAAOuB,YAAa6C,SAAU3L,IAAKoR,gBAC/D,G,CAGM/L,OAAgDyD,YAChB6C,SAC/B3L,K,yDAIL,OAFA,SAAAiF,OAAOC,IAAI,2BAA2ByG,oCAAoC7C,wBAEnEnL,KAAKuT,cAAc7L,OAAOyD,YAAa6C,SAAU3L,IAC1D,G,CAGMqR,OAAgDvI,YACf6C,SAC/B3L,K,yDAGJ,OAFA,SAAAiF,OAAOC,IAAI,4BAEJvH,KAAKuT,cAAcG,OAAOvI,YAAa6C,SAAU3L,IAC5D,G,GAxDM,qBAFL,gBAAAM,WACA,WAAA1C,KAAI,8CAEF,8BAAA0H,OAAM,cAAe,oBAAAC,oBACrB,8BAAAD,OAAM,WAAY,oBAAAC,oB,0IACT,mB,GAAA,oBAAPC,SAAAA,SAAO,Y,2CASN,qBAFL,gBAAAlF,WACA,WAAA1C,KAAI,oCAEF,8BAAA0H,OAAM,cAAe,oBAAAC,oB,mIAAiD,mB,GAAA,oBAAPC,SAAAA,SAAO,Y,0CAQnE,qBADL,WAAA/E,MAAK,oCACQ,8BAAA6E,OAAM,cAAe,oBAAAC,oBAClC,8BAAAoC,QACA,8BAAAhH,S,iGAAuC,mB,QAAA,IAAf,aAAAoQ,iBAAA,aAAAA,iBAAe,Y,uCAAU,mB,GAAA,oBAAPvL,SAAAA,SAAO,Y,0CAO5C,qBADL,WAAAqC,OAAM,8CACO,8BAAAvC,OAAM,cAAe,oBAAAC,oBAClC,8BAAAD,OAAM,WAAY,oBAAAC,oBAClB,8BAAAoC,QACA,8BAAAhH,S,wGAAuC,mB,QAAA,IAAf,aAAAqQ,iBAAA,aAAAA,iBAAe,Y,uCAAU,mB,GAAA,oBAAPxL,SAAAA,SAAO,Y,0CAO5C,qBADL,WAAAG,QAAO,8CACM,8BAAAL,OAAM,cAAe,oBAAAC,oBAClC,8BAAAD,OAAM,WAAY,oBAAAC,oBAClB,8BAAAoC,Q,iJAAmB,mB,GAAA,oBAAPnC,SAAAA,SAAO,Y,0CAQd,qBADL,WAAA/E,MAAK,qDACQ,8BAAA6E,OAAM,cAAe,oBAAAC,oBACjC,8BAAAD,OAAM,WAAY,oBAAAC,oBAClB,8BAAAoC,Q,iJAAmB,mB,GAAA,oBAAPnC,SAAAA,SAAO,Y,0CAzDVyL,iBAAgB,qBAD5B,WAAApT,c,wCAE0D,mB,QAAA,IAAb,iBAAAyT,eAAA,iBAAAA,eAAa,aAD9CL,kBAAA,QAAAA,iBAAAA,gB,yLCRb,mCACA,qCACA,4CACA,wCACA,8CACA,0CACA,2CAWO,IAAMpS,aAAN,MAAMA,eAAAA,aAAY,qBATxB,WAAAb,QAAO,CACNC,QAAS,CACP,WAAAC,eAAe8H,WAAW,CACxB,CAAE3B,KAAM,gBAAAkN,OAAOlN,KAAM6B,OAAQ,gBAAAsL,gBAC3B,mBAAA5S,gBAAiB,cAAAE,YAEvBI,YAAa,CAAC,oBAAA+R,kBACd9R,UAAW,CAAC,iBAAAmS,cAAe,WAAApT,mBAEhBW,cAAA,QAAAA,aAAAA,Y,kNCjBb,qCAEA,4CAKA,qCAMO,IAAM0S,OAAN,MAAMA,SAGX,qBAAC,oBAAA1L,UAAS,CAAEnG,QAAS,4BACpB,oBAAAoG,WAAU,CAAEpG,QAAS,uBACrB,oBAAAsI,WAAU,EAAG,CAAEtI,QAAS,8CACxB,aAAA0G,Q,2EAGD,qBAAC,aAAAA,Q,6EAGD,qBAAC,oBAAAP,UAAS,CAAEnG,QAAS,iCACpB,aAAA0G,Q,8EAGD,qBAAC,oBAAAP,UAAS,CAAEnG,QAAS,kCACpB,aAAA0G,Q,gFAGD,qBAAC,aAAAA,Q,2EAGD,qBAAC,aAAAA,MAAK,CACJsC,QAAS,GACTC,IAAK,S,4EAIP,qBAAC,oBAAAH,QAAO,CAAE9I,QAAS,sCAClB,aAAA0G,Q,iCACoB,mB,GAAA,oBAAJqC,MAAAA,MAAI,Y,2CAErB,qBAAC,aAAArC,MAAK,CACJsC,QAAS,K,6EAIX,qBAAC,aAAAtC,MAAK,CACJuC,IAAK,S,iCAEY,mB,QAAA,IAAR,WAAA2C,UAAA,WAAAA,UAAQ,Y,qCAzCRiG,OAAM,qBADlB,aAAAlL,WACYkL,QAAA,QAAAA,OAAAA,OA4CA,QAAAC,aAAe,WAAAlL,cAAcC,eAAegL,O,oMCzDzD,mCACA,qCACA,qCACA,sCACA,4CACA,yCAKO,IAAMD,cAAN,MAAMA,cACT9T,YAAiDoL,eAChC/G,aADgC,KAAA+G,eAAAA,eAChC,KAAA/G,YAAAA,WAA6B,CAExCmD,QAAQ8D,YAAsB6C,U,+DAC1BhO,KAAK8I,UAAUqC,YAAa6C,gBAE5BhO,KAAKiL,eAAeoB,iBAAiB,CAACrH,IAAM,IAAI,WAAA0I,MAAMC,SAASxC,aAAc,cAAgB,IAAI,WAAAuC,MAAMC,SAASK,WAAY,CAAC8F,KAAM,CAAC,kBAAoB,KAE9J,MAAMpF,cAAiB1O,KAAKiL,eAAe0D,UAAU,CACjD,CAAEC,OAAS,CAAE5J,IAAM,IAAI,WAAA0I,MAAMC,SAASxC,eACtC,CAAEyD,OAAS,CAAE,cAAgB,IAAI,WAAAlB,MAAMC,SAASK,YAChD,CAAEa,QAAU,CAAEC,KAAM,gBAAiBC,4BAA4B,IACjE,CAAEC,SAAW,CACThK,IAAM,EACN,QAAY,CACRiK,QAAU,CACNC,MAAQ,WACRC,GAAK,SACLC,KAAO,CAAE2E,IAAM,CAAC,eAAgB,IAAI,WAAArG,MAAMC,SAASK,gBAI/D,CAAEa,QAAU,CAAEC,KAAM,WAAYC,4BAA4B,IAC5D,CAAEM,QAAU,CACRC,KAAO,QACPC,WAAa,oBACbC,aAAe,MACfL,GAAK,sBAET,CAAEN,QAAU,CAAEC,KAAM,oBAAqBC,4BAA4B,IACrE,CAAEM,QAAU,CACRC,KAAO,QACPC,WAAa,6BACbC,aAAe,MACfL,GAAK,+BAET,CAAEhC,KAAM,CACJ,6BAA8B,gCAElC,CAAEsC,OAAQ,CACNzK,IAAK,eACLgP,MAAO,CACLC,OAAQ,kBAEVC,QAAS,CACPD,OAAQ,oBAEVE,WAAY,CACRF,OAAQ,uBAEZG,MAAO,CACLH,OAAQ,kBAEVI,SAAU,CACNJ,OAAQ,qBAEZK,QAAS,CACPL,OAAQ,oBAEVvE,SAAU,CACR5C,MAAO,qBAETiD,gBAAiB,CACbkE,OAAQ,4BAEZpI,UAAW,CACToI,OAAQ,wBAGd,CAAEtE,OAAQ,CAAC,qBAAsB,gBAAiB,8BAA+B,8BACjF,GAEJ,OAAO,OAAP,wBAAWjB,QAAM,CAAE7C,UAAY6C,OAAO7C,UAAU,GAAI6D,SAAWhB,OAAOgB,SAASG,KAAI9N,SAAY,OAAD,wBAAKA,SAAO,CAAE8J,UAAY9J,QAAQ8J,UAAU,QAC9I,G,CAEMrE,OAAO2D,a,yDAGV,aAFOnL,KAAK8I,UAAUqC,oBAERnL,KAAKiL,eAAe0D,UAAU,CACvC,CAAEC,OAAS,CAAE5J,IAAM,IAAI,WAAA0I,MAAMC,SAASxC,eACtC,CAAE0D,QAAU,CAAEC,KAAM,gBAAiBC,4BAA4B,IACjE,CAAEC,SAAW,CACThK,IAAM,EACN,QAAY,CACRiK,QAAU,CACNC,MAAQ,WACRC,GAAK,SACLC,MAAO,MAInB,CAAEP,QAAU,CAAEC,KAAM,WAAYC,4BAA4B,IAC5D,CAAEF,QAAU,CAAEC,KAAM,qBAAsBC,4BAA4B,IAEtE,CAAEM,QAAU,CACRC,KAAO,QACPC,WAAa,oBACbC,aAAe,MACfL,GAAK,sBAET,CAAEN,QAAU,CAAEC,KAAM,oBAAqBC,4BAA4B,IACrE,CAAEM,QAAU,CACRC,KAAO,QACPC,WAAa,6BACbC,aAAe,MACfL,GAAK,+BAET,CAAEhC,KAAM,CACJ,6BAA8B,gCAElC,CAAEsC,OAAQ,CACNzK,IAAK,eACLgP,MAAO,CACLC,OAAQ,kBAEVC,QAAS,CACPD,OAAQ,oBAEVE,WAAY,CACRF,OAAQ,uBAEZG,MAAO,CACLH,OAAQ,kBAEVI,SAAU,CACNJ,OAAQ,qBAEZK,QAAS,CACPL,OAAQ,oBAEVvE,SAAU,CACR5C,MAAO,qBAETiD,gBAAiB,CACbkE,OAAQ,4BAEZpI,UAAW,CACPoI,OAAQ,wBAGhB,CAAEtE,OAAQ,CAAC,qBAAsB,gBAAiB,8BAA+B,8BACjFE,KAAInB,QAAmB,OAAH,wBAAOA,QAAM,CAAE7C,UAAW6C,OAAO7C,UAAU,GAAI6D,SAAUhB,OAAOgB,SAASG,KAAI9N,SAAqB,OAAH,wBAAOA,SAAO,CAAE8J,UAAW9J,QAAQ8J,UAAU,UACxK,G,CAEMhH,OAAO2O,gBAAmCrI,YAAsB9I,K,+DAC5DrC,KAAK8I,UAAUqC,aAErB,MAAMW,gBAAkB9L,KAAKiL,eAAelC,QAAQ,CAAE/D,IAAMmG,cAE5D,YAAYnL,KAAKiL,eAAejC,KAAK,CAACG,KAAM,CAAC,CAACnE,IAAKmG,aAAc,CAACqB,aAAc,CAAEI,IAAM,CAACvK,IAAIK,KAAK+D,UAAUkG,OAAS,GAChHb,UAAUD,UAAU7G,IAAI4I,OAAO,IAAI,WAAAF,MAAMC,SAAStL,IAAIK,KAAK+D,MAC3DpE,IAAIK,KAAKc,MAAM0D,SAAS,YAAAhE,KAAK4E,QAC9B,MAAM,IAAI,SAAArD,cAAc,yCAA0C,SAAAC,WAAWC,aAGjF,MAAM4P,aAAe,OAAH,sBAAIvP,IAAK,IAAI,WAAA0I,MAAMC,UAC9B6F,iBAAe,CAClBY,MAAO,EACPE,QAAS,GACTvE,gBAAiB,IAAIjF,KACrB4E,SAAU,GACV7D,UAAWxJ,IAAIK,KAAK+D,KAGxB,aAAazG,KAAKiL,eAAeoB,iBAC7B,CAAErH,IAAKmG,aACP,CAAC2B,MAAO,CAAEb,QAAUsI,eACpB,CAAEjI,KAAK,GACf,G,CAEM1C,OAAOuB,YAAqB6C,SAAmB3L,IAAKoR,iB,+DAChDzT,KAAK8I,UAAUqC,YAAa6C,UAElC,MAAMU,cAAgB1O,KAAKiL,eAAelC,QACtC,CAAC/D,IAAKmG,aACN,CAACc,QAAQ,CAACkE,WAAW,CAACnL,IAAKgJ,cAC1B/B,QAAQ2D,QAAalB,QAAU,QAAD,0CAAC,OAAAA,OAAO1J,MAAQ,IAAI,WAAA0I,MAAMC,SAASK,SAAS,MAAE,GAEjF,WAAWhO,KAAKkQ,SAASxB,OAAO7C,UAAUR,WAAYhJ,IAAIK,KAAK+D,OAAUpE,IAAIK,KAAKc,MAAM0D,SAAS,YAAAhE,KAAK4E,OAClG,MAAM,IAAI,SAAArD,cAAc,0CAA2C,SAAAC,WAAWC,aAGlF,aAAa3E,KAAKiL,eAAeoB,iBAC7B,CAACrH,IAAMmG,YAAa,cAAgB6C,UACpC,CAACb,KAAM,CAAC,YAAW,+BAAOuB,QAAW+E,mBACrC,CAACnH,KAAK,GACd,G,CAEM5E,OAAOyD,YAAsB6C,SAAmB3L,K,+DAC5CrC,KAAK8I,UAAUqC,YAAa6C,UAElC,MAAMU,cAAgB1O,KAAKiL,eAAelC,QACtC,CAAC/D,IAAKmG,aACN,CAACc,QAAQ,CAACkE,WAAW,CAACnL,IAAKgJ,cAC1B/B,QAAQ2D,QAAalB,QAAU,QAAD,0CAAC,OAAAA,OAAO1J,MAAQ,IAAI,WAAA0I,MAAMC,SAASK,SAAS,MAAE,GAEjF,WAAWhO,KAAKkQ,SAASxB,OAAO7C,UAAUR,WAAYhJ,IAAIK,KAAK+D,OAAUpE,IAAIK,KAAKc,MAAM0D,SAAS,YAAAhE,KAAK4E,OAClG,MAAM,IAAI,SAAArD,cAAc,0CAA2C,SAAAC,WAAWC,aAGlF,aAAc3E,KAAKiL,eAAeoB,iBAC9B,CAAErH,IAAK,IAAI,WAAA0I,MAAMC,SAASxC,cAC1B,CAAC4B,MAAO,CAAEd,QAAU,CAACjH,IAAK,IAAI,WAAA0I,MAAMC,SAASK,aAC7C,CAAE1B,KAAK,GACf,G,CAEMoH,OAAOvI,YAAsB6C,SAAmB3L,K,yDAGlD,IAAIyJ,UAQJ,aAVM9L,KAAK8I,UAAUqC,YAAa6C,UAK9BlC,UADoJ,WAA7I9L,KAAKiL,eAAejC,KAAK,CAAEG,KAAM,CAAC,CAACnE,IAAKmG,aAAc,CAACc,QAAS,CAACkE,WAAY,CAACnL,IAAKgJ,SAAUsG,QAAS,CAAC1H,IAAK,CAACvK,IAAIK,KAAK+D,YAAYkG,aACvH3M,KAAKiL,eAAeoB,iBAAiB,CAACrH,IAAMmG,YAAa,cAAgB6C,UAAW,CAAClB,MAAO,CAAC,oBAAsBzK,IAAIK,KAAK+D,KAAO,CAAC6F,KAAK,UAEzItM,KAAKiL,eAAeoB,iBAAiB,CAACrH,IAAMmG,YAAa,cAAgB6C,UAAW,CAACjB,MAAO,CAAC,oBAAsB1K,IAAIK,KAAK+D,KAAO,CAAC6F,KAAK,IAGxJR,UAAUG,QAAQ2D,QAAalB,QAAU,QAAD,0CAAC,OAAAA,OAAO1J,MAAQ,IAAI,WAAA0I,MAAMC,SAASK,SAAS,MAAE,EACjG,G,CAGMkC,SAASzC,cAAyB4C,c,yDACpC,OAAO,IAAI,WAAA3C,MAAMC,SAASF,eAAeG,OAAO,IAAI,WAAAF,MAAMC,SAAS0C,cACvE,G,CAEMvH,UAAUqC,YAAsB6C,U,yDAClC,MAAMlC,gBAAkB9L,KAAKiL,eAAelC,QAAQ,CAAE/D,IAAMmG,cAE5D,IAAIW,UACA,MAAM,IAAI,SAAArH,cAAc,wBAAwB0G,6BAA8B,SAAAzG,WAAWC,aAG7F,GAAGqJ,YACMlC,UAAUG,QAAQ2D,QAAOlB,QAAUA,OAAO1J,IAAI4I,OAAO,IAAI,WAAAF,MAAMC,SAASK,aAAYrB,OAAS,GAC9F,MAAM,IAAI,SAAAlI,cAAc,qBAAqBuJ,sDAAsD7C,eAAgB,SAAAzG,WAAWC,YAG1I,G,GA9OSgP,cAAa,qBADzB,WAAA3R,cAEgB,gCAAAsH,aAAY,mBAAAmB,UAAU/D,O,wCAAmC,mB,QAAA,IAAL,WAAA6C,OAAA,WAAAA,OAAK,UAC5B,mBAD4B,QAC5B,IAAX,eAAAhE,aAAA,eAAAA,aAAW,aAFjCoO,eAAA,QAAAA,cAAAA,a,uNCVb,mCACA,uCACA,sCACA,8CACA,qCAEA,yCAGO,IAAMa,eAAN,MAAMA,eACX3U,YAA6BqE,aAAA,KAAAA,YAAAA,WAA2B,CAGlDmD,QAC4BZ,I,yDAIhC,OAFA,SAAAa,OAAOC,IAAI,yBAAyBd,mBAEvBzG,KAAKkE,YAAYmD,QAAQZ,GACxC,G,CAGMe,S,yDAEF,OADA,SAAAF,OAAOC,IAAI,4BACJvH,KAAKkE,YAAYsD,QAC5B,G,CAIM3C,OAAeD,e,yDAGjB,OAFA,SAAA0C,OAAOC,IAAI,+BAEJvH,KAAKkE,YAAYW,OAAOD,cACnC,G,CAGMgF,OAAcvH,IAAqCoE,GAAoBgO,e,yDAI3E,OAFA,SAAAnN,OAAOC,IAAI,yBAAyBd,eAE7BzG,KAAKkE,YAAY0F,OAAOnD,GAAIgO,cAAepS,IACpD,G,CAIMqS,OAAcrS,IAAqCoE,I,yDAGvD,OAFA,SAAAa,OAAOC,IAAI,yBAAyBd,aAE7BzG,KAAKkE,YAAYwQ,OAAOjO,GAAIpE,IACrC,G,CAGMsS,SAAgBtS,IAAqCoE,I,yDAGzD,OAFA,SAAAa,OAAOC,IAAI,yBAAyBd,aAE7BzG,KAAKkE,YAAYyQ,SAASlO,GAAIpE,IACvC,G,GA3CM,qBADL,WAAApC,KAAI,aAEF,8BAAA0H,OAAM,KAAM,oBAAAC,oB,mIAAuC,mB,GAAA,oBAAPC,SAAAA,SAAO,Y,yCAQhD,qBADL,WAAA5H,KAAI,S,6HACkB,mB,GAAA,oBAAP4H,SAAAA,SAAO,Y,wCAOjB,qBAFL,gBAAA5E,OAAM,YAAAC,KAAK4E,QACX,WAAAhF,MAAK,SACQ,8BAAAE,S,mFAAmC,mB,QAAA,IAAb,WAAAR,eAAA,WAAAA,eAAa,Y,uCAAU,mB,GAAA,oBAAPqF,SAAAA,SAAO,Y,wCAOrD,qBADL,WAAAqC,OAAM,aACO,8BAAAF,QAAY,8BAAArC,OAAM,KAAM,oBAAAC,oBAAgC,8BAAA5E,S,iGAAmC,mB,QAAA,IAAb,WAAA4R,eAAA,WAAAA,eAAa,Y,uCAAU,mB,GAAA,oBAAP/M,SAAAA,SAAO,Y,wCAS7G,qBADL,WAAA/E,MAAK,oBACQ,8BAAAkH,QAAY,8BAAArC,OAAM,KAAM,oBAAAC,oB,0IAAuC,mB,GAAA,oBAAPC,SAAAA,SAAO,Y,wCAOvE,qBADL,WAAA/E,MAAK,sBACU,8BAAAkH,QAAY,8BAAArC,OAAM,KAAM,oBAAAC,oB,8LA3C7B4M,eAAc,qBAD1B,WAAAtU,c,wCAEsD,mB,QAAA,IAAX,eAAAqF,aAAA,eAAAA,aAAW,aAD1CiP,gBAAA,QAAAA,eAAAA,c,0NCTb,4CAEA,MAAahS,eACT,qBAAC,oBAAA0F,UAAS,CAAEnG,QAAS,gCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,2BACrB,oBAAAsI,WAAU,EAAG,CAAEtI,QAAS,iD,qFAGzB,qBAAC,oBAAAmG,UAAS,CAAEnG,QAAS,iCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,2B,sFAGtB,qBAAC,oBAAAmG,UAAS,CAAEnG,QAAS,iCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,2B,qFAGtB,qBAAC,oBAAA8S,SAAQ,CAAE9S,QAAS,kCACnB,oBAAAmG,UAAS,CAAEnG,QAAS,6BACpB,oBAAAoG,WAAU,CAAEpG,QAAS,uB,kFAGtB,qBAAC,oBAAA+S,SAAQ,8BAA+B,CAAE/S,QAAS,sDAClD,oBAAAoG,WAAU,CAAEpG,QAAS,+B,iCACL,mB,GAAA,oBAAJ+I,MAAAA,MAAI,Y,8CAEjB,qBAAC,oBAAA5C,UAAS,CAAEnG,QAAS,gCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,2BACrB,oBAAAsI,WAAU,EAAG,CAAEtI,QAAS,iD,qFAGzB,qBAAC,oBAAAmG,UAAS,CAAEnG,QAAS,oCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,8B,yFA7B1B,oCAiCA,MAAa6S,eACT,qBAAC,oBAAApK,eACA,oBAAAtC,UAAS,CAAEnG,QAAS,gCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,2BACrB,oBAAAsI,WAAU,EAAG,CAAEtI,QAAS,iD,qFAIzB,qBAAC,oBAAAyI,eACA,oBAAAtC,UAAS,CAAEnG,QAAS,iCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,2B,sFAGtB,qBAAC,oBAAAyI,eACA,oBAAAtC,UAAS,CAAEnG,QAAS,iCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,2B,qFAGtB,qBAAC,oBAAAyI,eACA,oBAAAqK,SAAQ,CAAE9S,QAAS,kCACnB,oBAAAmG,UAAS,CAAEnG,QAAS,6BACpB,oBAAAoG,WAAU,CAAEpG,QAAS,uB,kFAGtB,qBAAC,oBAAAyI,eACA,oBAAAsK,SAAQ,8BAA+B,CAAE/S,QAAS,sDAClD,oBAAAoG,WAAU,CAAEpG,QAAS,+B,iCACL,mB,GAAA,oBAAJ+I,MAAAA,MAAI,Y,8CAEjB,qBAAC,oBAAAN,eACA,oBAAAtC,UAAS,CAAEnG,QAAS,gCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,2BACrB,oBAAAsI,WAAU,EAAG,CAAEtI,QAAS,iD,qFAGzB,qBAAC,oBAAAyI,eACA,oBAAAtC,UAAS,CAAEnG,QAAS,oCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,8B,yFArC1B,mC,uLCnCA,mCACA,qCACA,4CACA,yCACA,4CACA,wCACA,yCAmBO,IAAMZ,WAAN,MAAMA,aAAAA,WAAU,qBAjBtB,WAAAd,QAAO,CACJC,QAAS,CACP,eAAAK,YAAYH,QAAQ,CAClBI,OAAQ,OACRC,KAAM,YACNC,KAAM,KACNC,SAAU,QACVC,SAAU,QAEV,WAAAT,eAAe8H,WAAW,CACxB,CAAE3B,KAAM,cAAAvD,KAAKuD,KAAM6B,OAAQ,cAAAwM,eACzB,WAAApK,aAAW,IAAM,mBAAA1J,mBAEzBO,UAAW,CAAC,eAAA+D,aACZhE,YAAa,CAAC,kBAAAiT,gBACdvQ,QAAS,CAAC,eAAAsB,gBAEDpE,YAAA,QAAAA,WAAAA,U,8MCzBb,qCAEA,4CAUO,IAAMgC,KAAN,MAAMA,OAGX,qBAAC,oBAAA+E,UAAS,CAAEnG,QAAS,gCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,2BACrB,oBAAAsI,WAAU,EAAG,CAAEtI,QAAS,kDACxB,aAAA0G,Q,4EAGD,qBAAC,oBAAAP,UAAS,CAAEnG,QAAS,iCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,4BACrB,aAAA0G,Q,6EAGD,qBAAC,oBAAAP,UAAS,CAAEnG,QAAS,gCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,2BACrB,aAAA0G,Q,4EAGD,qBAAC,oBAAAoM,SAAQ,CAAE9S,QAAS,kCACnB,oBAAAmG,UAAS,CAAEnG,QAAS,6BACpB,oBAAAoG,WAAU,CAAEpG,QAAS,wBACrB,aAAA0G,Q,yEAGD,qBAAC,oBAAAqM,SAAQ,8BAA+B,CAAE/S,QAAS,sDAClD,oBAAAoG,WAAU,CAAEpG,QAAS,gCACrB,aAAA0G,Q,iCACgB,mB,GAAA,oBAAJqC,MAAAA,MAAI,Y,qCAEjB,qBAAC,oBAAA5C,UAAS,CAAEnG,QAAS,gCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,2BACrB,oBAAAsI,WAAU,EAAG,CAAEtI,QAAS,kDACxB,aAAA0G,Q,4EAGD,qBAAC,oBAAAP,UAAS,CAAEnG,QAAS,oCACpB,oBAAAoG,WAAU,CAAEpG,QAAS,+BACrB,aAAA0G,Q,gFAGD,qBAAC,oBAAAoC,QAAO,CAAE9I,QAAS,mCAClB,aAAA0G,Q,iCACiB,mB,GAAA,oBAAJqC,MAAAA,MAAI,Y,sCAElB,qBAAC,oBAAAR,WAAU,CAACvI,QAAS,iCACpB,aAAA0G,Q,6EAGD,qBAAC,aAAAA,Q,wEAGD,qBAAC,aAAAA,MAAK,CACJsC,QAAS,GACTC,IAAK,c,oFAIP,qBAAC,aAAAvC,MAAK,CACJsC,QAAS,GACTC,IAAK,c,qFAIP,qBAAC,aAAAvC,MAAK,CACJsC,QAAS,GACTC,IAAK,S,4EAIP,qBAAC,aAAAvC,MAAK,CACJsC,QAAS,GACTC,IAAK,S,4EAxEI7H,KAAI,qBADhB,aAAAuF,WACYvF,MAAA,QAAAA,KAAAA,KA6EA,QAAA4R,WAAa,WAAApM,cAAcC,eAAezF,K,wMCzFvD,mCACA,qCACA,iCACA,qCACA,sCACA,4CACA,8CACA,yCACA,iDAEA,wCAIO,IAAMoC,YAAN,MAAMA,YACX1F,YACkCmV,UACK/J,eACezB,iBACnC1H,cAHe,KAAAkT,UAAAA,UACK,KAAA/J,eAAAA,eACe,KAAAzB,iBAAAA,iBACnC,KAAA1H,aAAAA,YAA4B,CAEzCwC,sBAAsBvD,U,yDAC1B,aAAaf,KAAKgV,UAAUjM,QAAQ,CAACkM,IAAK,CAAC,CAAClU,UAAW,CAAEoE,MAAQpE,YACnE,G,CAEMsG,QAAQrC,K,yDAGZ,aAFMhF,KAAK8I,UAAU9D,YAEPhF,KAAKgV,UAAUrG,UAAU,CACrC,CAACC,OAAQ,CAAE,IAAO,IAAI,WAAAlB,MAAMC,SAAS3I,OACrC,CAACqK,QAAS,CACRC,KAAM,QACNC,WAAY,YACZC,aAAc,MACdL,GAAI,cAEN,CAACE,QAAS,CACRC,KAAM,QACNC,WAAY,YACZC,aAAc,MACdL,GAAI,cAEN,CAACQ,OAAQ,CAAC,WAAY,WACpB,EACN,G,CAEMnI,S,yDACJ,aAAaxH,KAAKgV,UAAUrG,UAAU,CACpC,CAACU,QAAS,CACRC,KAAM,QACNC,WAAY,YACZC,aAAc,MACdL,GAAI,cAEN,CAACE,QAAS,CACRC,KAAM,QACNC,WAAY,YACZC,aAAc,MACdL,GAAI,cAEN,CAACQ,OAAQ,CAAC,WAAY,SAE1B,G,CAEM9K,OAAOD,e,+DACH5E,KAAKwG,SAAS5B,eAEpBA,cAAcsQ,YAAc,IAAIpK,KAAKlG,cAAcsQ,aACnDtQ,cAAcsQ,YAAYC,SAASvQ,cAAcsQ,YAAYE,WAAa,GAE1E,MAAMC,WAAa,OAAH,wBAAOzQ,eAAa,CAAEgH,aAAc,IAAId,KAAQwK,UAAU,EAAM9R,MAAO,CAAC,YAAAN,KAAKC,MAAOnC,eAAgBuD,OAAOgR,SAAS3Q,cAAc5D,SAAU,MAEtJ0B,WAAa,IAAI1C,KAAKgV,UAAUK,YAAYG,OAWlD,aATMxV,KAAK8B,aAAa+P,MAAM,+CAGvBnP,KAAKsC,IAAIqG,kCACH3I,KAAK3B,oCACF2B,KAAKwS,YAAYpC,0BAEnC,CAAC,GAEQpQ,IACX,G,CAEMkH,OAAO6L,aAAsB/S,KAAqBL,K,+DAChDrC,KAAK8I,UAAU2M,cAErB,MAAMC,YAAcrT,IAAIK,KAExB,UAAS1C,KAAKkQ,SAASuF,aAAcC,YAAYjP,MAAOiP,YAAYlS,MAAM0D,SAAS,YAAAhE,KAAK4E,OAetF,aAdM9H,KAAKwG,SAAS9D,KAAMgT,YAAYjP,GAAIgP,cAEvC/S,KAAKwS,cACNxS,KAAKwS,YAAc,IAAIpK,KAAKpI,KAAKwS,aACjCxS,KAAKwS,YAAYC,SAASzS,KAAKwS,YAAYE,WAAa,IAGvD1S,KAAK1B,WACN0B,KAAK1B,eAAiBuD,OAAOgR,SAAS7S,KAAK1B,SAAU,WAIjDhB,KAAKwJ,iBAAiBwD,cAAcyI,aAAc,OAAF,+BAAazV,KAAKgV,UAAUjM,QAAQ,CAAE/D,IAAMyQ,gBAAiBE,YAAejT,OAE3H1C,KAAKgV,UAAU3I,iBAAiB,CAAErH,IAAMyQ,cAAgB/S,KAAM,CAAE4J,KAAK,IAE9E,MAAM,IAAI,uBAAA6F,oBAAoB,CAAC,kCACjC,G,CAIMuC,OAAOkB,aAAsBvT,K,yDAGjC,SAFMrC,KAAK8I,UAAU8M,oBAEZ5V,KAAKkQ,SAAS0F,aAAcvT,IAAIK,KAAK+D,IAC5C,MAAM,IAAI,uBAAA0L,oBAAoB,CAAC,gCAGjC,gBAAiBnS,KAAKgV,UAAUhM,KAAK,CAAEG,KAAM,CAAE,CAACnE,IAAK3C,IAAIK,KAAK+D,IAAK,CAACoP,UAAW,CAAEjJ,IAAMgJ,mBAAqBjJ,QAAS,EACnH,MAAM,IAAI,uBAAAwF,oBAAoB,CAAC,oCAMjC,MAAO,OAHYnS,KAAKgV,UAAU3I,iBAAiB,CAAErH,IAAK3C,IAAIK,KAAK+D,IAAM,CAAEqG,MAAO,CAAE+I,UAAWD,eAAkB,CAACtJ,KAAK,UAC/FtM,KAAKgV,UAAU3I,iBAAiB,CAAErH,IAAK4Q,cAAe,CAAE9I,MAAO,CAAEgJ,UAAWzT,IAAIK,KAAK+D,KAAQ,CAAC6F,KAAK,IAG7H,G,CAEMqI,SAASiB,aAAsBvT,K,yDAGnC,SAFMrC,KAAK8I,UAAU8M,oBAEZ5V,KAAKkQ,SAAS0F,aAAcvT,IAAIK,KAAK+D,IAC5C,MAAM,IAAI,uBAAA0L,oBAAoB,CAAC,kCAGjC,GAAuH,iBAAtGnS,KAAKgV,UAAUhM,KAAK,CAAEG,KAAM,CAAE,CAACnE,IAAK3C,IAAIK,KAAK+D,IAAK,CAACoP,UAAW,CAAEjJ,IAAMgJ,mBAAqBjJ,QAC1G,MAAM,IAAI,uBAAAwF,oBAAoB,CAAC,kCAMjC,MAAO,OAHYnS,KAAKgV,UAAU3I,iBAAiB,CAAErH,IAAK3C,IAAIK,KAAK+D,IAAM,CAACsG,MAAO,CAAE8I,UAAYD,eAAiB,CAAEtJ,KAAK,UAC/FtM,KAAKgV,UAAU3I,iBAAiB,CAAErH,IAAK4Q,cAAgB,CAAC7I,MAAO,CAAE+I,UAAYzT,IAAIK,KAAK+D,KAAO,CAAE6F,KAAK,IAG9H,G,CAGMO,mBAAmBkJ,OAAiB5K,a,yDAGxC,aAFMnL,KAAK8I,UAAUiN,cAER/V,KAAKgV,UAAU3I,iBAAiB,CAAErH,IAAK+Q,QAAU,CAAEjJ,MAAO,CAAE5B,kBAAmBC,cAAiB,CAACmB,KAAK,GACrH,G,CAEMI,sBAAsBqJ,OAAiB5K,a,yDAG3C,aAFMnL,KAAK8I,UAAUiN,cAER/V,KAAKgV,UAAU3I,iBAAiB,CAAErH,IAAK+Q,QAAU,CAAEhJ,MAAO,CAAE7B,kBAAmBC,cAAiB,CAACmB,KAAK,GACrH,G,CAGQP,oBAAoBgK,OAAiB5K,a,0EACnCnL,KAAK8I,UAAUiN,QAGrB,MAAMrT,WAAa1C,KAAKgV,UAAUjM,QAAQ,CAAE/D,IAAK+Q,S,IAEjD,IAAuC,IAAuB,GAAvB,yBAAArT,KAAK4I,sBAAkB,2BAAnD,MAAM0K,mBAAkB,eAC3BhW,KAAKiL,eAAeiC,WAAW,CAAElI,IAAKgR,mBAAoB,gBAAiB,IAAI,WAAAtI,MAAMC,SAASoI,SAAW,CAAEjJ,MAAQ,CAAC,qCAAsC3B,c,+HAGlK,aAAanL,KAAKgV,UAAU3I,iBAAiB,CAAErH,IAAK+Q,QAAU,CAAEjJ,MAAO,CAAExB,mBAAoBH,cAAiB,CAACmB,KAAK,G,IAGhHC,uBAAuBwJ,OAAiB5K,a,0EACtCnL,KAAK8I,UAAUiN,QAErB,MAAMrT,WAAa1C,KAAKgV,UAAUjM,QAAQ,CAAE/D,IAAK+Q,S,IAEjD,IAAuC,IAAuB,GAAvB,yBAAArT,KAAK4I,sBAAkB,2BAAnD,MAAM0K,mBAAkB,eAC3BhW,KAAKiL,eAAeiC,WAAW,CAAElI,IAAKgR,mBAAoB,gBAAiB,IAAI,WAAAtI,MAAMC,SAASoI,SAAW,CAAEhJ,MAAQ,CAAC,qCAAsC5B,c,+HAGlK,aAAanL,KAAKgV,UAAU3I,iBAAiB,CAAErH,IAAK+Q,QAAU,CAAEhJ,MAAO,CAAEzB,mBAAoBH,cAAiB,CAACmB,KAAK,G,IAKlH9F,SAAS9D,KAAM+K,cAAyBgI,c,yDAC5C,UAAUzV,KAAKgV,UAAUhM,KACvB,CACEiM,IACA,CACI,CAAElU,SAAU2B,KAAK3B,UACjB,CAAEoE,MAAOzC,KAAKyC,WAGnBwH,OAAS,WAAa3M,KAAKkQ,SAASzC,cAAegI,eACtD,MAAM,IAAI,SAAAhR,cAAc,uCAAwC,SAAAC,WAAWC,aAG3E,GAAG,IAAImG,KAAKpI,KAAKwS,aAAe,IAAIpK,KACpC,MAAM,IAAI,SAAArG,cAAc,yCAA0C,SAAAC,WAAWC,YAE/E,G,CAEMuL,SAASzC,cAAyB4C,c,yDACtC,OAAO,IAAI,WAAA3C,MAAMC,SAASF,eAAeG,OAAO,IAAI,WAAAF,MAAMC,SAAS0C,cACrE,G,CAEMvH,UAAUiN,Q,yDAGd,WAFmB/V,KAAKgV,UAAUjM,QAAQ,CAAC/D,IAAK+Q,UAG9C,MAAM,IAAI,SAAAtR,cAAc,mBAAmBsR,wBAAyB,SAAArR,WAAWC,YAEnF,G,GA1MWY,YAAW,qBADvB,WAAAvD,cAGI,gCAAAsH,aAAY,cAAAnG,KAAKuD,OACjB,gCAAA4C,aAAY,mBAAAmB,UAAU/D,OACtB,8BAAAmH,SAAO,WAAAlD,aAAW,IAAM,oBAAAP,qB,wCAFuB,mB,QAAA,IAAL,WAAAb,OAAA,WAAAA,OAAK,UACU,mBADV,QACU,IAAL,WAAAA,OAAA,WAAAA,OAAK,UAC6B,mBAD7B,QAC6B,IAAhB,oBAAAa,kBAAA,oBAAAA,kBAAgB,UAC5C,mBAD4C,QAC5C,IAAZ,gBAAAnI,cAAA,gBAAAA,cAAY,aALlCsD,aAAA,QAAAA,YAAAA,W,6HCdA,QAAA9E,YAAc,CACzBwV,YAAY,EAEZvV,oBAAqB,mCAGrBwV,WAAY,YACZC,WAAY,KACZC,eAAgB,QAChBC,eAAgB,M,gBCTlB3F,OAAOzM,QAAUqS,QAAQ,iB,eCAzB5F,OAAOzM,QAAUqS,QAAQ,e,gBCAzB5F,OAAOzM,QAAUqS,QAAQ,c,gBCAzB5F,OAAOzM,QAAUqS,QAAQ,mB,gBCAzB5F,OAAOzM,QAAUqS,QAAQ,mB,gBCAzB5F,OAAOzM,QAAUqS,QAAQ,W,gBCAzB5F,OAAOzM,QAAUqS,QAAQ,kB,gBCAzB5F,OAAOzM,QAAUqS,QAAQ,U,gBCAzB5F,OAAOzM,QAAUqS,QAAQ,W,gBCAzB5F,OAAOzM,QAAUqS,QAAQ,e,eCAzB5F,OAAOzM,QAAUqS,QAAQ,e,gBCAzB5F,OAAOzM,QAAUqS,QAAQ,iB,eCAzB5F,OAAOzM,QAAUqS,QAAQ,Q,GCCrBC,yBAA2B,CAAC,EAGhC,SAASC,oBAAoBC,UAE5B,IAAIC,aAAeH,yBAAyBE,UAC5C,QAAqBxN,IAAjByN,aACH,OAAOA,aAAazS,QAGrB,IAAIyM,OAAS6F,yBAAyBE,UAAY,CAGjDxS,QAAS,CAAC,GAOX,OAHA0S,oBAAoBF,UAAU/F,OAAQA,OAAOzM,QAASuS,qBAG/C9F,OAAOzM,OACf,C,+JCtBA,mCACA,gCAEA,uCACA,iDACA,+CAEA,W,kDACE,MAAM2S,UAAY,OAAAC,YAAYhS,OAAO,aAAAzE,WAErCwW,IAAIE,gBADiB,OAErBF,IAAIG,aACJ,MAAMjW,KAAOkW,QAAQC,IAAIC,MAAQ,IACjCN,IAAIO,iBAAiB,IAAI,oBAAA7E,kBACzBsE,IAAIQ,eAAe,IAAI,SAAAC,eAAe,CACpCC,uBAAuB,EACvBC,iBAAmBxE,SACjB,MAAMrD,SAAWqD,OAAOlD,KAAIsD,OAAS,GAAGA,MAAMqE,6BAA6BrE,MAAM7F,UAAUmK,OAAOC,OAAOvE,MAAMwE,aAAa7N,KAAK,UACjI,OAAO,IAAI,uBAAAqI,oBAAoBzC,SAAS,WAItCkH,IAAIgB,OAAO9W,MACjB,SAAAwG,OAAOC,IACL,kDAAkDzG,WAEtD,G,CAEA+W,E","sources":["webpack://riddet-app/./apps/riddet-api/src/app/app.controller.ts","webpack://riddet-app/./apps/riddet-api/src/app/app.module.ts","webpack://riddet-app/./apps/riddet-api/src/app/app.service.ts","webpack://riddet-app/./apps/riddet-api/src/app/auth/auth.controller.ts","webpack://riddet-app/./apps/riddet-api/src/app/auth/auth.module.ts","webpack://riddet-app/./apps/riddet-api/src/app/auth/auth.service.ts","webpack://riddet-app/./apps/riddet-api/src/app/auth/constants.ts","webpack://riddet-app/./apps/riddet-api/src/app/auth/jwt-auth.guard.ts","webpack://riddet-app/./apps/riddet-api/src/app/auth/jwt.strategy.ts","webpack://riddet-app/./apps/riddet-api/src/app/auth/local.strategy.ts","webpack://riddet-app/./apps/riddet-api/src/app/auth/role.enum.ts","webpack://riddet-app/./apps/riddet-api/src/app/auth/roles.guard.ts","webpack://riddet-app/./apps/riddet-api/src/app/category/category.controller.ts","webpack://riddet-app/./apps/riddet-api/src/app/category/category.dto.ts","webpack://riddet-app/./apps/riddet-api/src/app/category/category.module.ts","webpack://riddet-app/./apps/riddet-api/src/app/category/category.schema.ts","webpack://riddet-app/./apps/riddet-api/src/app/category/category.service.ts","webpack://riddet-app/./apps/riddet-api/src/app/community/community.controller.ts","webpack://riddet-app/./apps/riddet-api/src/app/community/community.dto.ts","webpack://riddet-app/./apps/riddet-api/src/app/community/community.module.ts","webpack://riddet-app/./apps/riddet-api/src/app/community/community.schema.ts","webpack://riddet-app/./apps/riddet-api/src/app/community/community.service.ts","webpack://riddet-app/./apps/riddet-api/src/app/message/message.controller.ts","webpack://riddet-app/./apps/riddet-api/src/app/message/message.dto.ts","webpack://riddet-app/./apps/riddet-api/src/app/message/message.module.ts","webpack://riddet-app/./apps/riddet-api/src/app/message/message.schema.ts","webpack://riddet-app/./apps/riddet-api/src/app/message/message.service.ts","webpack://riddet-app/./apps/riddet-api/src/app/neo4j/neo4j.constants.ts","webpack://riddet-app/./apps/riddet-api/src/app/neo4j/neo4j.module.ts","webpack://riddet-app/./apps/riddet-api/src/app/neo4j/neo4j.service.ts","webpack://riddet-app/./apps/riddet-api/src/app/neo4j/neo4j.util.ts","webpack://riddet-app/./apps/riddet-api/src/app/shared/filters/validation.exception.ts","webpack://riddet-app/./apps/riddet-api/src/app/shared/filters/validation.filter.ts","webpack://riddet-app/./apps/riddet-api/src/app/shared/pipes/ParseObjectIdPipe.ts","webpack://riddet-app/./apps/riddet-api/src/app/thread/thread-dto.ts","webpack://riddet-app/./apps/riddet-api/src/app/thread/thread.controller.ts","webpack://riddet-app/./apps/riddet-api/src/app/thread/thread.module.ts","webpack://riddet-app/./apps/riddet-api/src/app/thread/thread.schema.ts","webpack://riddet-app/./apps/riddet-api/src/app/thread/thread.service.ts","webpack://riddet-app/./apps/riddet-api/src/app/user/user.controller.ts","webpack://riddet-app/./apps/riddet-api/src/app/user/user.dto.ts","webpack://riddet-app/./apps/riddet-api/src/app/user/user.module.ts","webpack://riddet-app/./apps/riddet-api/src/app/user/user.schema.ts","webpack://riddet-app/./apps/riddet-api/src/app/user/user.service.ts","webpack://riddet-app/./apps/riddet-api/src/environments/environment.prod.ts","webpack://riddet-app/external commonjs \"@nestjs/common\"","webpack://riddet-app/external commonjs \"@nestjs/core\"","webpack://riddet-app/external commonjs \"@nestjs/jwt\"","webpack://riddet-app/external commonjs \"@nestjs/mongoose\"","webpack://riddet-app/external commonjs \"@nestjs/passport\"","webpack://riddet-app/external commonjs \"bcryptjs\"","webpack://riddet-app/external commonjs \"class-validator\"","webpack://riddet-app/external commonjs \"mongodb\"","webpack://riddet-app/external commonjs \"mongoose\"","webpack://riddet-app/external commonjs \"neo4j-driver\"","webpack://riddet-app/external commonjs \"passport-jwt\"","webpack://riddet-app/external commonjs \"passport-local\"","webpack://riddet-app/external commonjs \"tslib\"","webpack://riddet-app/webpack/bootstrap","webpack://riddet-app/./apps/riddet-api/src/main.ts"],"sourcesContent":["import { Controller, Get } from '@nestjs/common';\r\nimport { AppService } from './app.service';\r\n\r\n@Controller()\r\nexport class AppController {\r\n  constructor(private readonly appService: AppService) {}\r\n\r\n  @Get()\r\n  getData() {\r\n    return this.appService.getData();\r\n  }\r\n}\r\n","import { AuthModule } from './auth/auth.module';\r\n\r\nimport { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\n\r\nimport { APP_GUARD } from '@nestjs/core';\r\nimport { CommunityModule } from '../app/community/community.module';\r\nimport { ThreadModule } from '../app/thread/thread.module';\r\nimport { environment } from '../environments/environment.prod';\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\r\nimport { RolesGuard } from './auth/roles.guard';\r\nimport { CategoryModule } from './category/category.module';\r\nimport { MessageModule } from './message/message.module';\r\nimport { Neo4jModule } from './neo4j/neo4j.module';\r\nimport { UserModule } from './user/user.module';\r\n\r\n@Module({\r\n  imports: [\r\n    MongooseModule.forRoot(environment.DATABASE_CONNECTION),\r\n    Neo4jModule.forRoot({\r\n      scheme: 'bolt',\r\n      host: '127.0.0.1',\r\n      port: 7687,\r\n      username: 'neo4j',\r\n      password: 'neo',\r\n    }),\r\n    CommunityModule,\r\n    ThreadModule,\r\n    UserModule,\r\n    AuthModule,\r\n    CategoryModule,\r\n    MessageModule,\r\n\r\n  ],\r\n  controllers: [AppController],\r\n  providers: [\r\n    {\r\n      provide: APP_GUARD,\r\n      useClass: JwtAuthGuard,\r\n    },\r\n    {\r\n      provide: APP_GUARD,\r\n      useClass: RolesGuard,\r\n    },\r\n    AppService,\r\n  ],\r\n})\r\nexport class AppModule {}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { Neo4jService } from './neo4j/neo4j.service';\r\n\r\n@Injectable()\r\nexport class AppService {\r\n\r\n  constructor(private readonly neo4jService: Neo4jService) { }\r\n\r\n  getData(): { message: string } {\r\n    return { message: 'Welcome to riddet-api!' };\r\n  }\r\n\r\n}\r\n","import { Body, Controller, Get, Post, Request, UseGuards } from '@nestjs/common';\r\nimport { AuthGuard } from '@nestjs/passport';\r\nimport { CreateUserDto } from '../user/user.dto';\r\nimport { Public, Roles } from './auth.module';\r\nimport { AuthService } from './auth.service';\r\nimport { Role } from './role.enum';\r\n@Controller()\r\nexport class AuthController {\r\n  constructor(private readonly authService : AuthService) {}\r\n\r\n  @Public()\r\n  @UseGuards(AuthGuard('local'))\r\n  @Post('auth/login')\r\n  async login(@Request() req) {\r\n      return this.authService.login(req.body);\r\n  }\r\n\r\n  @Public()\r\n  @Post('auth/register')\t\r\n  async register(@Body() CreateUserDto : CreateUserDto) {\r\n      return this.authService.register(CreateUserDto);\r\n  }\r\n\r\n  @Roles(Role.User)\r\n  @Get('profile')\r\n  getProfile(@Request() req) {\r\n    return req.user;\r\n  }\r\n}\r\n","export const IS_PUBLIC_KEY = 'isPublic';\r\nexport const Public = () => SetMetadata(IS_PUBLIC_KEY, true);\r\n\r\nexport const ROLES_KEY = 'roles';\r\nexport const Roles = (...roles: Role[]) => SetMetadata(ROLES_KEY, roles);\r\n\r\nimport { Module, SetMetadata } from '@nestjs/common';\r\nimport { JwtModule } from '@nestjs/jwt';\r\nimport { PassportModule } from '@nestjs/passport';\r\nimport { UserModule } from '../user/user.module';\r\nimport { AuthController } from './auth.controller';\r\nimport { AuthService } from './auth.service';\r\nimport { jwtConstants } from './constants';\r\nimport { JwtStrategy } from './jwt.strategy';\r\nimport { LocalStrategy } from './local.strategy';\r\nimport { Role } from './role.enum';\r\n\r\n@Module({\r\n  imports: [\r\n    UserModule,\r\n    PassportModule,\r\n    JwtModule.register({\r\n      secret: jwtConstants.secret,\r\n      signOptions: { expiresIn: '2d' },\r\n    }),\r\n\r\n  ],\r\n  providers: [AuthService, LocalStrategy, JwtStrategy],\r\n  exports: [AuthService],\r\n  controllers: [AuthController]\r\n})\r\nexport class AuthModule {}\r\n","import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport * as bcrypt from 'bcryptjs';\r\nimport { CreateUserDto } from '../user/user.dto';\r\nimport { User } from '../user/user.schema';\r\nimport { UserService } from '../user/user.service';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n  constructor(\r\n    private userService: UserService,\r\n    private jwtService: JwtService,\r\n  ) {}\r\n\r\n  async validateUser(username: string, pass: string): Promise<any> {\r\n    const user : User = await this.userService.findByUsernameOrEmail(username);\r\n    \r\n    if (user && await bcrypt.compareSync(pass, user.password)) {\r\n      return user;\r\n    } \r\n\r\n    throw new HttpException(`Incorrect credentials!`, HttpStatus.BAD_REQUEST);\r\n  }\r\n\r\n  async register(createUserDto: CreateUserDto) {\r\n    const user : User = await this.userService.create(createUserDto);\r\n    return this.login(user);\r\n  }\r\n\r\n  async login(user: any) {\r\n    const payload = { username: user.username };\r\n\r\n    const loggedInUser = await this.userService.findByUsernameOrEmail(user.username);\r\n\r\n    return {\r\n      _id: loggedInUser._id,\r\n      username: loggedInUser.username,\r\n      firstname: loggedInUser.firstname,\r\n      lastname: loggedInUser.lastname,\r\n      email: loggedInUser.email,\r\n      roles: loggedInUser.roles,\r\n      userImageUrl: loggedInUser.userImageUrl,\r\n      access_token: this.jwtService.sign(payload),\r\n    };\r\n  }\r\n}","export const jwtConstants = {\r\n    secret: 'secretKey',\r\n  };","import { ExecutionContext, Injectable } from \"@nestjs/common\";\r\nimport { Reflector } from \"@nestjs/core\";\r\nimport { AuthGuard } from \"@nestjs/passport\";\r\nimport { IS_PUBLIC_KEY } from \"./auth.module\";\r\n\r\n@Injectable()\r\nexport class JwtAuthGuard extends AuthGuard('jwt') {\r\n  constructor(private reflector: Reflector) {\r\n    super();\r\n  }\r\n\r\n  canActivate(context: ExecutionContext) {\r\n    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [\r\n      context.getHandler(),\r\n      context.getClass(),\r\n    ]);\r\n    if (isPublic) {\r\n      return true;\r\n    }\r\n    return super.canActivate(context);\r\n  }\r\n}\r\n","import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\r\nimport { PassportStrategy } from '@nestjs/passport';\r\nimport { ExtractJwt, Strategy } from 'passport-jwt';\r\nimport { UserService } from '../user/user.service';\r\nimport { jwtConstants } from './constants';\r\n\r\n@Injectable()\r\nexport class JwtStrategy extends PassportStrategy(Strategy) {\r\n  constructor(private readonly userService : UserService) {\r\n    super({\r\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\r\n      ignoreExpiration: false,\r\n      secretOrKey: jwtConstants.secret,\r\n    });\r\n  }\r\n\r\n  async validate(payload: any) {\r\n    const user = await this.userService.findByUsernameOrEmail(payload.username);\r\n\r\n    if(user) {\r\n      return { id: user._id, username: payload.username, email: user.email, name: user.firstname + ' ' + user.lastname, roles: user.roles };\r\n    } else {\r\n      throw new HttpException('Login has expired!', HttpStatus.UNAUTHORIZED);\r\n    }\r\n  }\r\n}","import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\r\nimport { PassportStrategy } from '@nestjs/passport';\r\nimport { Strategy } from 'passport-local';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable()\r\nexport class LocalStrategy extends PassportStrategy(Strategy) {\r\n  constructor(private authService: AuthService) {\r\n    super();\r\n  }\r\n\r\n  async validate(username: string, password: string): Promise<any> {\r\n    const user = await this.authService.validateUser(username, password);\r\n\r\n    if (!user) {\r\n      throw new HttpException(`No user found with current username or email!`, HttpStatus.NOT_FOUND);\r\n    }\r\n\r\n    return user;\r\n  }\r\n}","export enum Role {\r\n    User = 'user',\r\n    Admin = 'admin',\r\n  }","import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\r\nimport { Reflector } from '@nestjs/core';\r\nimport { ROLES_KEY } from './auth.module';\r\nimport { Role } from './role.enum';\r\n\r\n@Injectable()\r\nexport class RolesGuard implements CanActivate {\r\n  constructor(private reflector: Reflector) {}\r\n\r\n  canActivate(context: ExecutionContext): boolean {\r\n    const requiredRoles = this.reflector.getAllAndOverride<Role[]>(ROLES_KEY, [\r\n      context.getHandler(),\r\n      context.getClass(),\r\n    ]);\r\n    if (!requiredRoles) {\r\n      return true;\r\n    }\r\n    const { user } = context.switchToHttp().getRequest();\r\n    return requiredRoles.some((role) => user.roles?.includes(role));\r\n  }\r\n}","import { Body, Controller, Delete, Get, Logger, Param, Post } from '@nestjs/common';\r\nimport { Roles } from '../auth/auth.module';\r\nimport { Role } from '../auth/role.enum';\r\nimport { ParseObjectIdPipe } from '../shared/pipes/ParseObjectIdPipe';\r\nimport { CategoryDto } from './category.dto';\r\nimport { Category } from \"./category.schema\";\r\nimport { CategoryService } from './category.service';\r\n\r\n@Controller('categories')\r\nexport class CommunitiesController {\r\n  constructor(private readonly categoryService: CategoryService) {}\r\n\r\n  @Get(':id')\r\n  async getById(\r\n    @Param('id', ParseObjectIdPipe) id: string): Promise<Category> {\r\n      \r\n    Logger.log(`Getting category with id: ${id} (READ)`);\r\n\r\n    return await this.categoryService.getById(id);\r\n  }\r\n\r\n  @Get()\r\n  async getAll(): Promise<Category[]> {\r\n      Logger.log(`Getting all categories (READ)`);\r\n\r\n      return this.categoryService.getAll();\r\n  }\r\n\r\n\r\n  @Roles(Role.Admin)\r\n  @Post()\r\n  async create(@Body() categoryDto: CategoryDto): Promise<Category> {\r\n      Logger.log(`Creating category (CREATE)`);\r\n\r\n      return this.categoryService.create(categoryDto);\r\n  }\r\n\r\n  @Roles(Role.Admin)\r\n  @Delete(':id')\r\n  async delete(@Param('id', ParseObjectIdPipe) id: string): Promise<Category> {\r\n\r\n    Logger.log(`Getting category with id: ${id} (DELETE)`);\r\n    \r\n    return this.categoryService.delete(id);\r\n  }\r\n\r\n}","import { IsDefined, IsNotEmpty, IsString } from \"class-validator\";\r\n\r\nexport class CategoryDto {\r\n    @IsString({ message: 'Name must be a string!' })\r\n    @IsDefined({ message: 'Name is required!' })\r\n    @IsNotEmpty({ message: 'Name cannot be empty!' })\r\n    name: string;\r\n  }","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { CommunitiesController } from './category.controller';\r\nimport { Category, CategorySchema } from './category.schema';\r\nimport { CategoryService } from './category.service';\r\n\r\n@Module({\r\n    imports: [\r\n        MongooseModule.forFeature([\r\n          { name: Category.name, schema: CategorySchema },\r\n        ]),\r\n      ],\r\n      controllers: [CommunitiesController],\r\n      providers: [CategoryService],\r\n      exports: [CategoryService]\r\n})\r\nexport class CategoryModule {}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { ICategory } from '@riddet-app/data';\r\nimport { IsDefined, IsNotEmpty, IsString } from 'class-validator';\r\nimport { Document, Types } from 'mongoose';\r\n \r\nexport type CategoryDocument = Category & Document;\r\n\r\n@Schema()\r\nexport class Category implements ICategory {\r\n  _id : Types.ObjectId\r\n\r\n  @IsString({ message: 'Name must be a string!' })\r\n  @IsDefined({ message: 'Name is required!' })\r\n  @IsNotEmpty({ message: 'Name cannot be empty!' })\r\n  @Prop()\r\n  name: string;\r\n}\r\n\r\nexport const CategorySchema = SchemaFactory.createForClass(Category);","import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\r\nimport { InjectModel } from \"@nestjs/mongoose\";\r\nimport { Model } from \"mongoose\";\r\nimport { CategoryDto } from \"./category.dto\";\r\nimport { Category, CategoryDocument } from \"./category.schema\";\r\n\r\n@Injectable()\r\nexport class CategoryService {\r\n    constructor(@InjectModel(Category.name) private categoryModel: Model<CategoryDocument>) {}\r\n\r\n    async getById(_id: string): Promise<Category> {\r\n        await this.doesExist(_id);\r\n\r\n        return this.categoryModel.findOne({ _id });\r\n    }\r\n\r\n    async getAll(): Promise<Category[]> {\r\n        return this.categoryModel.find({});\r\n    }\r\n\r\n    async create(categoryDto : CategoryDto): Promise<Category> {\r\n        await this.validate(undefined, categoryDto.name);\r\n\r\n        return this.categoryModel.create(categoryDto);\r\n    }\r\n    \r\n    async delete(_id: string): Promise<Category> {\r\n        await this.doesExist(_id);\r\n\r\n        return this.categoryModel.findOneAndDelete({ _id });\r\n    }\r\n\r\n    async validate(id : string, name: string): Promise<void> {\r\n        if(await this.categoryModel.find({$and: [{_id: {$ne: id}}, {name: name}]}).countDocuments() > 0) {\r\n          throw new HttpException(`Category with name of ${name} already exists!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n    }\r\n\r\n    async doesExist(id : string): Promise<void> {\r\n        const category = await this.categoryModel.findOne({_id: id});\r\n    \r\n        if(!category) {\r\n          throw new HttpException(`Category with id of ${id} doesn't exist!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n    }\r\n}","import { Body, Controller, Delete, Get, Logger, Param, Patch, Post, Req } from '@nestjs/common';\r\nimport { Public } from '../auth/auth.module';\r\nimport { ParseObjectIdPipe } from '../shared/pipes/ParseObjectIdPipe';\r\nimport { CreateCommunityDto, UpdateCommunityDto } from './community.dto';\r\nimport { Community } from \"./community.schema\";\r\nimport { CommunityService } from './community.service';\r\n\r\n@Controller('communities')\r\nexport class CommunitiesController {\r\n  constructor(private readonly communityService: CommunityService) {}\r\n\r\n  @Public()\r\n  @Get()\r\n  async getAll(): Promise<Community[]> {\r\n      Logger.log(`Getting all communities (READ)`);\r\n\r\n      return this.communityService.getAll();\r\n  }\r\n\r\n  @Get('/joined')\r\n  async getAllJoinedCommunities(@Req() req): Promise<Community[]> {\r\n      Logger.log(`Getting all communities user has joined (READ)`);\r\n\r\n    return this.communityService.getAllJoinedCommunities(req);\r\n  }\r\n\r\n  @Get('/created')\r\n  async getAllCreatedCommunities(@Req() req): Promise<Community[]> {\r\n      Logger.log(`Getting all communities user has created (READ)`);\r\n\r\n    return this.communityService.getAllCreatedCommunities(req);\r\n  }\r\n\r\n  @Public()\r\n  @Get(':id')\r\n  async getById(\r\n    @Param('id', ParseObjectIdPipe) id: string): Promise<Community> {\r\n      \r\n    Logger.log(`Getting community with id: ${id} (READ)`);\r\n\r\n    return await this.communityService.getById(id);\r\n  }\r\n\r\n  @Post()\r\n  async create(@Body() createCommunityDto: CreateCommunityDto, @Req() req): Promise<Community> {\r\n      Logger.log(`Creating community (CREATE)`);\r\n\r\n      return this.communityService.create(createCommunityDto, req);\r\n  }\r\n\r\n  @Patch(':id')\r\n  async update(@Param('id', ParseObjectIdPipe) id: string, @Req() req, @Body() updateCommunityDto: UpdateCommunityDto): Promise<Community> {\r\n\r\n    Logger.log(`Getting community with id: ${id} (UPDATE)`);\r\n\r\n    return this.communityService.update(id, updateCommunityDto, req);\r\n  }\r\n\r\n  @Delete(':id')\r\n  async delete(@Param('id', ParseObjectIdPipe) id: string, @Req() req): Promise<Community> {\r\n\r\n    Logger.log(`Getting community with id: ${id} (DELETE)`);\r\n\r\n    return this.communityService.delete(id, req);\r\n  }\r\n\r\n\r\n  //participation routes\r\n\r\n  @Post(':id/join')\r\n  async join(@Param('id', ParseObjectIdPipe) id: string, @Req() req): Promise<Community> {\r\n\r\n    Logger.log(`Getting community with id: ${id} (DELETE)`);\r\n\r\n    return this.communityService.join(id, req);\r\n  }\r\n\r\n  @Post(':id/leave')\r\n  async leave(@Param('id', ParseObjectIdPipe) id: string, @Req() req): Promise<Community> {\r\n\r\n    Logger.log(`Getting community with id: ${id} (DELETE)`);\r\n\r\n    return this.communityService.leave(id, req);\r\n  }\r\n}","import { ArrayNotEmpty, IsBoolean, IsDefined, IsNotEmpty, IsOptional, IsString, MinLength } from \"class-validator\";\r\n\r\nexport class CreateCommunityDto {\r\n  @IsString({ message: 'Name must be a string!' })\r\n  @IsDefined({ message: 'Name is required!' })\r\n  @MinLength(5, { message: 'Name must be at least 5 characters long!' })\r\n  name: string;\r\n\r\n  @IsString({ message: 'Description must be a string!' })\r\n  @IsDefined({ message: 'Description is required!' })\r\n  @IsNotEmpty({ message: 'Description cannot be empty!' })\r\n  description: string;\r\n\r\n  @IsString({ message: 'ImageUrl must be a string!' })\r\n  @IsDefined({ message: 'ImageUrl is required!' })\r\n  @IsNotEmpty({ message: 'ImageUrl cannot be empty!' })\r\n  imageUrl: string;\r\n\r\n  @IsBoolean({ message: 'isPublic must be a boolean!' })\r\n  @IsDefined({ message: 'isPublic is required!' })\r\n  @IsNotEmpty({ message: 'isPublic cannot be empty!' })\r\n  isPublic: boolean;\r\n\r\n\r\n  @ArrayNotEmpty({ message: 'Categories cannot be empty!' })\r\n  @IsDefined({ message: 'Categories are required!' })\r\n  categories : string[]\r\n}\r\n\r\nexport class UpdateCommunityDto {\r\n  @IsOptional()\r\n  @IsString({ message: 'Name must be a string!' })\r\n  @IsDefined({ message: 'Name is required!' })\r\n  @MinLength(5, { message: 'Name must be at least 5 characters long!' })\r\n  name: string;\r\n\r\n  @IsOptional()\r\n  @IsString({ message: 'Description must be a string!' })\r\n  @IsDefined({ message: 'Description is required!' })\r\n  @IsNotEmpty({ message: 'Description cannot be empty!' })\r\n  description: string;\r\n\r\n  @IsOptional()\r\n  @IsString({ message: 'ImageUrl must be a string!' })\r\n  @IsDefined({ message: 'ImageUrl is required!' })\r\n  @IsNotEmpty({ message: 'ImageUrl cannot be empty!' })\r\n  imageUrl: string;\r\n\r\n  @IsOptional()\r\n  @IsBoolean({ message: 'isPublic must be a boolean!' })\r\n  @IsNotEmpty({ message: 'isPublic cannot be empty!' })\r\n  isPublic: boolean;\r\n\r\n  @IsOptional()\r\n  @ArrayNotEmpty({ message: 'Categories cannot be empty!' })\r\n  @IsNotEmpty({ message: 'Categories cannot be empty!' })\r\n  categories : string[]\r\n\r\n}","import { forwardRef, Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { CategoryModule } from '../category/category.module';\r\nimport { UserModule } from '../user/user.module';\r\nimport { CommunitiesController } from './community.controller';\r\nimport { Community, CommunitySchema } from './community.schema';\r\nimport { CommunityService } from './community.service';\r\n\r\n@Module({\r\n  imports: [\r\n    MongooseModule.forFeature([\r\n      { name: Community.name, schema: CommunitySchema },\r\n    ]), forwardRef(() => CategoryModule), forwardRef(() => UserModule),\r\n  ],\r\n  controllers: [CommunitiesController],\r\n  providers: [CommunityService],\r\n  exports: [CommunityService, MongooseModule]\r\n})\r\nexport class CommunityModule  {}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { ICommunity } from '@riddet-app/data';\r\nimport {\r\n  IsDate, IsDefined, IsNotEmpty, IsString, MinLength\r\n} from 'class-validator';\r\nimport { Document, ObjectId, Types } from 'mongoose';\r\nimport { Category } from '../category/category.schema';\r\nimport { Thread } from '../thread/thread.schema';\r\nimport { User } from '../user/user.schema';\r\n \r\nexport type CommunityDocument = Community & Document;\r\n\r\n@Schema()\r\nexport class Community implements ICommunity {\r\n  _id : Types.ObjectId\r\n\r\n  @IsString({ message: 'Name must be a string!' })\r\n  @IsDefined({ message: 'Name is required!' })\r\n  @MinLength(5, { message: 'Name must be at least 5 characters long!' })\r\n  @Prop({unique: true})\r\n  name: string;\r\n\r\n\r\n  @IsString({ message: 'Description must be a string!' })\r\n  @IsDefined({ message: 'Description is required!' })\r\n  @IsNotEmpty({ message: 'Description cannot be empty!' })\r\n  @Prop()\r\n  description: string;\r\n\r\n  @IsDate({ message: 'Creation date must be a date!' })\r\n  @Prop()\r\n  creationDate: Date;\r\n\r\n  @IsString({ message: 'Image must be a string!' })\r\n  @Prop()\r\n  imageUrl: string;\r\n\r\n  @Prop()\r\n  isPublic: boolean;\r\n\r\n  @Prop({\r\n    default: [],\r\n  })\r\n  categories: [Category]\r\n\r\n  @Prop({\r\n    default: [],\r\n    ref: 'User',\r\n  })\r\n  participants: [ObjectId]\r\n\r\n  @Prop({\r\n    default: [],\r\n  })\r\n  threads: [Thread]\r\n\r\n  @Prop()\r\n  createdBy: User\r\n}\r\n\r\nexport const CommunitySchema = SchemaFactory.createForClass(Community);\r\n","import { forwardRef, HttpException, HttpStatus, Inject, Injectable } from \"@nestjs/common\";\r\nimport { InjectModel } from \"@nestjs/mongoose\";\r\nimport { Model, Types } from \"mongoose\";\r\nimport { Role } from \"../auth/role.enum\";\r\nimport { Category } from \"../category/category.schema\";\r\nimport { CategoryService } from \"../category/category.service\";\r\nimport { ParseObjectIdPipe } from \"../shared/pipes/ParseObjectIdPipe\";\r\nimport { User } from \"../user/user.schema\";\r\nimport { UserService } from \"../user/user.service\";\r\nimport { CreateCommunityDto, UpdateCommunityDto } from \"./community.dto\";\r\nimport { Community, CommunityDocument } from \"./community.schema\";\r\n\r\n@Injectable()\r\nexport class CommunityService {\r\n    constructor(@InjectModel(Community.name) private communityModel: Model<CommunityDocument>,\r\n    private readonly categoryService : CategoryService,\r\n    @Inject(forwardRef(() => UserService)) private userService : UserService) {}\r\n    \r\n\r\n    async getById(_id: string): Promise<Community> {\r\n        await this.doesExist(_id);\r\n\r\n        return await this.communityModel.findOne({ _id });\r\n    }\r\n\r\n    async getAll(): Promise<Community[]> {\r\n        return await this.communityModel.find({})\r\n    }\r\n\r\n    async getAllJoinedCommunities(req) : Promise<Community[]> {\r\n\r\n        const joinedCommunities : Community[] = []\r\n\r\n        const user = await this.userService.getById(req.user.id);\r\n\r\n        for await (const communityId of user.joinedCommunities) {\r\n            joinedCommunities.push(await this.getById(communityId.toString()));\r\n        }\r\n\r\n        return joinedCommunities;\r\n    }\r\n\r\n    async getAllCreatedCommunities(req) : Promise<Community[]> {\r\n\r\n        const createdCommunities : Community[] = []\r\n\r\n        const user = await this.userService.getById(req.user.id);\r\n\r\n        for await (const communityId of user.createdCommunities) {\r\n            createdCommunities.push(await this.getById(communityId.toString()));\r\n        }\r\n\r\n        return createdCommunities;\r\n    }\r\n\r\n    async create(createCommunityDto : CreateCommunityDto, req): Promise<Community> {\r\n        await this.validate(createCommunityDto);\r\n\r\n        const embedCategories : Category[] = [];\r\n\r\n        for await (const category of createCommunityDto.categories) {\r\n            embedCategories.push(await this.categoryService.getById(category));\r\n        }\r\n\r\n        const creator = await this.userService.getById(req.user.id);\r\n        delete creator.password;\r\n\r\n        const mergedCommunity = new this.communityModel(\r\n            {...createCommunityDto, \r\n            creationDate: new Date(), \r\n            categories : embedCategories, \r\n            createdBy: creator\r\n        });\r\n\r\n        const community = await this.communityModel.create(mergedCommunity);\r\n\r\n        await this.userService.addCreatedCommunity(req.user.id, community._id);\r\n\r\n        console.log(community.threads)\r\n\r\n        return community;\r\n    }\r\n\r\n    async update(updateId: string, updateCommunityDto: UpdateCommunityDto, req): Promise<Community> {\r\n        await this.doesExist(updateId);\r\n        await this.isAllowedToAlter(req.user.id, updateId, req);\r\n        await this.validate(updateCommunityDto, updateId);\r\n\r\n        let updateObject = {};\r\n\r\n        if(updateCommunityDto.categories) {\r\n            const categories : Category[] = [];\r\n\r\n            for await (const category of updateCommunityDto.categories) {\r\n                categories.push(await this.categoryService.getById(category));\r\n            }\r\n\r\n            delete updateCommunityDto.categories;\r\n            updateObject = {categories};\r\n        }\r\n\r\n        updateObject = {...updateCommunityDto, ...updateObject};\r\n\r\n        return this.communityModel.findOneAndUpdate({ _id : updateId }, updateObject, { new: true });\r\n    }\r\n\r\n    async delete(_id: string, req): Promise<Community> {\r\n        await this.doesExist(_id);\r\n        await this.isAllowedToAlter(req.user.id, _id, req);\r\n\r\n        const community = await this.communityModel.findOne({ _id });\r\n        const creator = await this.userService.getById(community.createdBy._id.toString());\r\n\r\n        await this.userService.removeCreatedCommunity(creator._id.toString(), community._id);\r\n\r\n        for await (const participantId of community.participants) {\r\n            await this.userService.removeJoinedCommunity(participantId.toString(), community._id);\r\n        };\r\n\r\n        return await this.communityModel.findOneAndDelete({ _id });\r\n    }\r\n\r\n    //participating in communities\r\n\r\n    async join(communityId : string, req) : Promise<Community> {\r\n        await this.doesExist(communityId);\r\n\r\n        if((await this.communityModel.find({$and: [{_id : communityId}, { \"createdBy._id\" : req.user.id }]})).length > 0) {\r\n            throw new HttpException(`You cannot join your own community!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n        \r\n        else if (await (await this.communityModel.find({ $and: [ {_id: communityId}, {participants: { $in : req.user.id}} ] })).length > 0) {\r\n            throw new HttpException(`You are already a participant of this community!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n\r\n        await this.userService.addJoinedCommunity(req.user.id, communityId);\r\n\r\n        return this.communityModel.findOneAndUpdate({ _id : communityId }, { $push : { participants : req.user.id } }, { new: true });\r\n    }\r\n\r\n    async leave(communityId : string, req) : Promise<Community> {\r\n        await this.doesExist(communityId);\r\n\r\n        console.log(communityId)\r\n\r\n        if((await this.communityModel.find({$and: [{_id : communityId}, { \"createdBy._id\" : req.user.id }]})).length > 0) {\r\n            throw new HttpException(`You cannot leave your own community!`, HttpStatus.BAD_REQUEST);\r\n\r\n        }\r\n        \r\n        else if (await (await this.communityModel.find({ $and: [ {_id: communityId}, {participants: { $in : req.user.id}} ] })).length === 0) {\r\n            throw new HttpException(`You are not a participant of this community!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n\r\n        await this.userService.removeJoinedCommunity(req.user.id, communityId);\r\n\r\n        return this.communityModel.findOneAndUpdate({ _id : communityId }, { $pull : { participants : req.user.id } }, { new: true });\r\n    }\r\n\r\n\r\n    //update creator\r\n    async updateCreator(creatorId : string, creator : Partial<User>) : Promise<void> {\r\n        await this.communityModel.updateMany({ \"createdBy._id\" : creatorId }, { $set : { createdBy : creator } });\r\n    }\r\n\r\n    //validation\r\n    async validate(community : CreateCommunityDto, currentCommunityId?: string) {\r\n        if(community.name) {\r\n            if((await this.communityModel.find({$and: [{name: community.name }, {_id : { $ne: currentCommunityId }}]})).length > 0 ) {\r\n                throw new HttpException(`Community with the name of ${community.name} already exists!`, HttpStatus.BAD_REQUEST);\r\n            }\r\n        }\r\n\r\n        if(community.categories) {\r\n            if(!(await this.areValidObjectIds(community.categories as string[]))) {\r\n                throw new HttpException(`Categories contains invalid data, all input must be of type ObjectId!`, HttpStatus.BAD_REQUEST);\r\n            }\r\n        }\r\n    }\r\n\r\n    async areValidObjectIds(value: string[]) {\r\n        return value.every((id) => ParseObjectIdPipe.isValidObjectId(id));\r\n    }\r\n\r\n    async isAllowedToAlter(currentUserId? : string, communityId? : string, req?) : Promise<void> {\r\n        const community = await this.communityModel.findOne({ _id : communityId });\r\n\r\n        if(!(new Types.ObjectId(currentUserId).equals(community.createdBy._id)) && !(req.user.roles.includes(Role.Admin))) {\r\n            throw new HttpException(`Only the creator can alter data of this community!`, HttpStatus.BAD_REQUEST);\r\n\r\n        }\r\n    }\r\n\r\n    async doesExist(communityId : string) : Promise<void> {\r\n        const community = await this.communityModel.findOne({ _id : communityId });\r\n\r\n        if(!community) {\r\n            throw new HttpException(`Community with id of ${communityId} doesn't exist!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n    }\r\n}","import { Body, Controller, Delete, Get, Logger, Param, Patch, Post, Req } from \"@nestjs/common\";\r\nimport { Public } from \"../auth/auth.module\";\r\nimport { ParseObjectIdPipe } from \"../shared/pipes/ParseObjectIdPipe\";\r\nimport { Thread } from \"../thread/thread.schema\";\r\nimport { MessageDto } from \"./message.dto\";\r\nimport { Message } from \"./message.schema\";\r\nimport { MessageService } from \"./message.service\";\r\n\r\n@Controller()\r\nexport class MessageController {\r\n  constructor(private readonly messageService: MessageService) {}\r\n\r\n  @Public()\r\n  @Get('communities/:communityId/threads/:threadId/messages/:messageId')\r\n  async getById(\r\n    @Param('communityId', ParseObjectIdPipe) communityId : string,\r\n    @Param('threadId', ParseObjectIdPipe) threadId: string,\r\n    @Param('messageId', ParseObjectIdPipe) messageId: string\r\n    ): Promise<Message> {\r\n      \r\n    Logger.log(`Getting message with id: ${messageId} (READ)`);\r\n\r\n    return await this.messageService.getById(communityId, threadId, messageId);\r\n    }\r\n\r\n    @Public()\r\n    @Get('communities/:communityId/threads/:threadId/messages')\r\n    async getAll(\r\n      @Param('communityId', ParseObjectIdPipe) communityId : string,\r\n      @Param('threadId', ParseObjectIdPipe) threadId : string\r\n      ) : Promise<Message[]> {\r\n        \r\n      Logger.log(`Getting all messages (READ)`);\r\n      \r\n      return await this.messageService.getAll(communityId, threadId);\r\n    }\r\n\r\n    @Post('communities/:communityId/threads/:threadId/messages')\r\n    async create(\r\n      @Param('communityId', ParseObjectIdPipe) communityId : string,\r\n      @Param('threadId', ParseObjectIdPipe) threadId : string,  \r\n      @Req() req, \r\n      @Body() messageDto: MessageDto\r\n      ) : Promise<Message> {\r\n        \r\n      Logger.log(`Getting all messages (READ)`);\r\n      return await this.messageService.create(communityId, threadId, req, messageDto);\r\n    }\r\n\r\n    @Patch('communities/:communityId/threads/:threadId/messages/:messageId')\r\n    async update(@Param('communityId', ParseObjectIdPipe) communityId: string,\r\n    @Param('threadId', ParseObjectIdPipe) threadId: string,\r\n    @Param('messageId', ParseObjectIdPipe) messageId : string,\r\n    @Req() req,\r\n    @Body() messageDto: MessageDto): Promise<Message> {\r\n      Logger.log(`Getting thread with id: ${threadId} (UPDATE)`);\r\n\r\n      return this.messageService.update(communityId, threadId, messageId, messageDto, req);\r\n    }\r\n  \r\n    @Delete('communities/:communityId/threads/:threadId/messages/:messageId')\r\n    async delete(@Param('communityId', ParseObjectIdPipe) communityId: string, \r\n    @Param('threadId', ParseObjectIdPipe) threadId: string, \r\n    @Param('messageId', ParseObjectIdPipe) messageId : string,\r\n    @Req() req): Promise<Thread> {\r\n  \r\n      Logger.log(`Getting thread with id: ${threadId} from community with id: ${communityId} (DELETE)`);\r\n      \r\n      return this.messageService.delete(communityId, threadId, messageId, req);\r\n    }\r\n\r\n    @Post('communities/:communityId/threads/:threadId/messages/:messageId/like')\r\n    async like(@Param('communityId', ParseObjectIdPipe) communityId : string,\r\n     @Param('threadId', ParseObjectIdPipe) threadId : string,\r\n     @Param('messageId', ParseObjectIdPipe) messageId : string,\r\n     @Req() req): Promise<Message> {\r\n        Logger.log(`Getting thread with id: ${threadId} (LIKE)`);\r\n  \r\n        return this.messageService.like(communityId, threadId, messageId, req);\r\n    }\r\n  }","import { IsDefined, IsString } from \"class-validator\";\r\n\r\nexport class MessageDto {\r\n    @IsString({ message: 'Text must be a string!' })\r\n    @IsDefined({ message: 'Text is required!' })\r\n    text: string;\r\n}","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { CommunityModule } from '../community/community.module';\r\nimport { MessageController } from './message.controller';\r\nimport { Message, MessageSchema } from './message.schema';\r\nimport { MessageService } from './message.service';\r\n\r\n@Module({\r\n    imports: [\r\n        MongooseModule.forFeature([\r\n          { name: Message.name, schema: MessageSchema },\r\n        ]), CommunityModule\r\n      ],\r\n    providers: [MessageService],\r\n    controllers: [MessageController],\r\n    exports: [MessageService]\r\n})\r\nexport class MessageModule {}","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { IMessage } from '@riddet-app/data';\r\nimport {\r\n  IsDate, IsDefined, IsString\r\n} from 'class-validator';\r\nimport { Document, ObjectId, Types } from 'mongoose';\r\n \r\nexport type MessageDocument = Message & Document;\r\n\r\n@Schema()\r\nexport class Message implements IMessage{\r\n  hasLikes: boolean;\r\n  containsReplies: boolean;\r\n  _id : Types.ObjectId\r\n\r\n  @IsString({ message: 'Text must be a string!' })\r\n  @IsDefined({ message: 'Text is required!' })\r\n  @Prop({unique: true})\r\n  text: string;\r\n\r\n  @Prop({\r\n    dedfault: [],\r\n    ref: 'User',\r\n  })\r\n  likes : [ObjectId]\r\n\r\n  @IsDate({ message: 'Creation date must be a date!' })\r\n  @Prop()\r\n  publicationDate: Date;\r\n\r\n\r\n  @Prop({\r\n    ref: 'User',\r\n  })\r\n  createdBy : ObjectId\r\n}\r\n\r\nexport const MessageSchema = SchemaFactory.createForClass(Message);\r\n","import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model, Types } from 'mongoose';\r\nimport { Role } from '../auth/role.enum';\r\nimport { Community, CommunityDocument } from '../community/community.schema';\r\nimport { Thread } from '../thread/thread.schema';\r\nimport { MessageDto } from './message.dto';\r\nimport { Message, MessageDocument } from './message.schema';\r\n\r\n\r\n@Injectable()\r\nexport class MessageService {\r\n  constructor(\r\n    @InjectModel(Community.name) private communityModel: Model<CommunityDocument>,\r\n    @InjectModel(Message.name) private messageModel: Model<MessageDocument>\r\n    ) {}\r\n\r\n\r\n  async getById(communityId: string, threadId : string, messageId : string): Promise<Message> {\r\n    await this.doesExist(communityId, threadId, messageId);\r\n\r\n    const thread = (await this.communityModel.aggregate([\r\n      { $match : { _id : new Types.ObjectId(communityId)}},\r\n      { $unwind : { path: \"$participants\", preserveNullAndEmptyArrays: true }},\r\n      { $project : {\r\n          _id : 0,\r\n          \"threads\" : {\r\n              $filter : {\r\n                  input : \"$threads\",\r\n                  as : \"thread\",\r\n                  cond : true\r\n              }\r\n          }}\r\n      },\r\n      { $unwind : { path: \"$threads\", preserveNullAndEmptyArrays: false }},\r\n      { $unwind : { path: \"$threads.createdBy\", preserveNullAndEmptyArrays: true }},\r\n\r\n      { $lookup : { \r\n          from : \"users\",\r\n          localField : \"threads.createdBy\",\r\n          foreignField : \"_id\",\r\n          as : \"threads.createdBy\"\r\n      }},\r\n      { $unwind : { path: \"$threads.messages\", preserveNullAndEmptyArrays: true }},\r\n      { $lookup : { \r\n          from : \"users\",\r\n          localField : \"threads.messages.createdBy\",\r\n          foreignField : \"_id\",\r\n          as : \"threads.messages.createdBy\"\r\n      }},\r\n      { $set: {\r\n          \"threads.messages.createdBy\": \"$threads.messages.createdBy\" \r\n      }},\r\n      { $group: {\r\n          _id: \"$threads._id\",\r\n          messages: {\r\n            $push: \"$threads.messages\"   \r\n          },\r\n      }},\r\n      { $unset: [\"messages.createdBy.password\", \"messages.createdBy.__v\"]},\r\n  ]))[0].messages.filter(message => new Types.ObjectId(message._id).equals(new Types.ObjectId(messageId)))[0]\r\n\r\n  return { ...thread, createdBy: thread.createdBy[0] }\r\n\r\n  }\r\n\r\n  async getAll(communityId : string, threadId : string): Promise<Message[]> {\r\n    await this.doesExist(communityId, threadId);\r\n\r\n    return (await this.communityModel.aggregate([\r\n      { $match : { _id : new Types.ObjectId(communityId)}},\r\n      { $unwind : { path: \"$participants\", preserveNullAndEmptyArrays: true }},\r\n      { $project : {\r\n          _id : 0,\r\n          \"threads\" : {\r\n              $filter : {\r\n                  input : \"$threads\",\r\n                  as : \"thread\",\r\n                  cond : true\r\n              }\r\n          }}\r\n      },\r\n      { $unwind : { path: \"$threads\", preserveNullAndEmptyArrays: false }},\r\n      { $unwind : { path: \"$threads.createdBy\", preserveNullAndEmptyArrays: true }},\r\n\r\n      { $lookup : { \r\n          from : \"users\",\r\n          localField : \"threads.createdBy\",\r\n          foreignField : \"_id\",\r\n          as : \"threads.createdBy\"\r\n      }},\r\n      { $unwind : { path: \"$threads.messages\", preserveNullAndEmptyArrays: true }},\r\n      { $lookup : { \r\n          from : \"users\",\r\n          localField : \"threads.messages.createdBy\",\r\n          foreignField : \"_id\",\r\n          as : \"threads.messages.createdBy\"\r\n      }},\r\n      { $set: {\r\n          \"threads.messages.createdBy\": \"$threads.messages.createdBy\" \r\n      }},\r\n      { $group: {\r\n          _id: \"$threads._id\",\r\n          messages: {\r\n            $push: \"$threads.messages\"   \r\n          },\r\n      }},\r\n      { $unset: [\"messages.createdBy.password\", \"messages.createdBy.__v\"]},\r\n  ]))[0].messages.map(message => { return { ...message, createdBy: message.createdBy[0] }}) \r\n  }\r\n\r\n  async create(communityId, threadId, req, messageDto : MessageDto) : Promise<Message> {\r\n      await this.doesExist(communityId, threadId);\r\n\r\n      const community = await this.communityModel.findOne({ _id: communityId });\r\n\r\n      if(!((await this.communityModel.find({$and: [{_id: communityId}, {participants: { $in : [req.user.id]}}]})).length > 0)\r\n      && !(community.createdBy._id.equals(new Types.ObjectId(req.user.id)))\r\n      && !(req.user.roles.includes(Role.Admin))) {\r\n        throw new HttpException(`You are not a member of this community!`, HttpStatus.BAD_REQUEST);\r\n      }\r\n\r\n      const mergedMessage = new this.messageModel({\r\n        ...messageDto, \r\n        publicationDate: new Date(), \r\n        createdBy: req.user.id\r\n      }) \r\n\r\n      const result = await this.communityModel.findOneAndUpdate({ _id : communityId } , { $push: { \"threads.$[thread].messages\" : mergedMessage } }, { arrayFilters: [{ \"thread._id\": new Types.ObjectId(threadId) }], new: true });\r\n      return result.threads.filter(thread => thread._id.equals(new Types.ObjectId(threadId)))[0].messages.filter(message => message._id.equals(mergedMessage._id))[0];\r\n  }\r\n\r\n  async update(communityId: string, threadId: string, messageId: string, messageDto: MessageDto, req): Promise<Message> {\r\n      await this.doesExist(communityId, threadId, messageId);\r\n      \r\n      const oldMessage = await this.getById(communityId, threadId, messageId);\r\n      const message = {...oldMessage, ...messageDto};\r\n\r\n      if(!(await this.isMyData(message.createdBy.toString(), req.user.id)) && !(req.user.roles.includes(Role.Admin))) {\r\n        throw new HttpException(`You cannot alter data that isn't yours!`, HttpStatus.BAD_REQUEST);\r\n      }\r\n\r\n      return (await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(communityId), \"threads._id\": new Types.ObjectId(threadId)}, {$push: {\"threads.$.messages\": {...message, ...messageDto}}}, {new: true})).threads.filter(thread => thread._id.equals(new Types.ObjectId(threadId)))[0].messages.filter(message => message._id.equals(new Types.ObjectId(messageId)))[0];\r\n    }\r\n\r\n  async delete(communityId : string, threadId : string, messageId : string, req): Promise<Thread> {\r\n    await this.doesExist(communityId, threadId, messageId);\r\n\r\n    const message = await this.getById(communityId, threadId, messageId);\r\n\r\n    if(!(await this.isMyData(message.createdBy.toString(), req.user.id)) && !(req.user.roles.includes(Role.Admin))) {\r\n        throw new HttpException(`You cannot alter data that isn't yours!`, HttpStatus.BAD_REQUEST);\r\n    }\r\n\r\n    return (await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(communityId), \"threads._id\": new Types.ObjectId(threadId)}, {$pull: {\"threads.$.messages\": message}}, {new : true})).threads.filter(thread => thread._id.equals(new Types.ObjectId(threadId)))[0];\r\n  }\r\n\r\n\r\nasync like(communityId : string, threadId : string, messageId : string, req): Promise<Message> {\r\n  await this.doesExist(communityId, threadId, messageId);\r\n\r\n  let community;\r\n\r\n  if ((await this.communityModel.find({ $and: [{_id: communityId}, {threads: {$elemMatch: {_id: threadId, messages : {$elemMatch : {_id: messageId, likes : {$in: [req.user.id] } } } } } } ]})).length === 0) {\r\n    community = (await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(communityId), \"threads._id\": new Types.ObjectId(threadId)}, {$push: {\"threads.$.messages.$[message].likes\": req.user.id}}, {arrayFilters: [{ \"message._id\": new Types.ObjectId(messageId) }], new: true}))\r\n  } \r\n  else {\r\n    community = (await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(communityId), \"threads._id\": new Types.ObjectId(threadId)}, {$pull: {\"threads.$.messages.$[message].likes\": req.user.id}}, {arrayFilters: [{ \"message._id\": new Types.ObjectId(messageId) }], new: true}))\r\n  }\r\n\r\n  return community.threads.filter(thread => thread._id.equals(new Types.ObjectId(threadId)))[0].messages.filter(message => message._id.equals(new Types.ObjectId(messageId)))[0];\r\n}\r\n\r\n  async isMyData(currentUserId : string | undefined, targetUserId : string | undefined) : Promise<boolean> {\r\n    return new Types.ObjectId(currentUserId).equals(new Types.ObjectId(targetUserId) )\r\n  }\r\n\r\n  async doesExist(communityId : string, threadId? : string, messageId? : string) : Promise<void> {\r\n    const community = await this.communityModel.findOne({ _id : communityId });\r\n    let threads : Thread[];\r\n\r\n    if(!community) {\r\n      throw new HttpException(`Community with id of ${communityId} doesn't exist!`, HttpStatus.BAD_REQUEST);\r\n    }\r\n\r\n    if(threadId) {\r\n      threads = await community.threads.filter(thread => thread._id.equals(new Types.ObjectId(threadId)));\r\n      if(!(threads.length > 0)) {\r\n        throw new HttpException(`Thread with id of ${threadId} doesn't exist in the community with id of ${communityId}!`, HttpStatus.BAD_REQUEST);\r\n      }\r\n    }\r\n\r\n    if(threadId && messageId) {\r\n      if(!(threads[0].messages.filter(message => message._id.equals(new Types.ObjectId(messageId))).length > 0)) {\r\n        throw new HttpException(`Message with id of ${messageId} doesn't exist in the thread with id of ${threadId}!`, HttpStatus.BAD_REQUEST);\r\n      }\r\n    }\r\n  }\r\n}\r\n","export const NEO4J_CONFIG = 'NEO4J_CONFIG';\r\nexport const NEO4J_DRIVER = 'NEO4J_DRIVER';","import { DynamicModule, Module } from '@nestjs/common';\nimport { Neo4jConfig } from './neo4j-config.interface';\nimport { NEO4J_CONFIG, NEO4J_DRIVER } from './neo4j.constants';\nimport { Neo4jService } from './neo4j.service';\nimport { createDriver } from './neo4j.util';\n\n\n\n@Module({})\nexport class Neo4jModule {\n  static forRoot(config: Neo4jConfig): DynamicModule {\n    return {\n      module: Neo4jModule,\n      providers: [\n        Neo4jService,\n        {\n          provide: NEO4J_CONFIG,\n          useValue: config,\n        },\n        {\n          provide: NEO4J_DRIVER,\n          inject: [NEO4J_CONFIG],\n          useFactory: (config: Neo4jConfig) => createDriver(config),\n        }\n      ],\n      exports: [Neo4jService],\n    }\n  }\n}","import { Inject, Injectable } from '@nestjs/common';\r\nimport neo4j, { Driver, Result } from 'neo4j-driver';\r\nimport { Neo4jConfig } from './neo4j-config.interface';\r\nimport { NEO4J_CONFIG, NEO4J_DRIVER } from './neo4j.constants';\r\n\r\n@Injectable()\r\nexport class Neo4jService {\r\n\r\n  constructor(\r\n    @Inject(NEO4J_CONFIG) private readonly config: Neo4jConfig,\r\n    @Inject(NEO4J_DRIVER) private readonly driver: Driver\r\n  ) {}\r\n\r\n  getDriver(): Driver {\r\n    return this.driver;\r\n  }\r\n\r\n  getConfig(): Neo4jConfig {\r\n    return this.config;\r\n  }\r\n\r\n  getReadSession(database?: string) {\r\n    return this.driver.session({\r\n      database: database || this.config.database,\r\n      defaultAccessMode: neo4j.session.READ\r\n    });\r\n  }\r\n\r\n  getWriteSession(database?: string) {\r\n    return this.driver.session({\r\n      database: database || this.config.database,\r\n      defaultAccessMode: neo4j.session.WRITE\r\n    })\r\n  }\r\n\r\n  read(cypher: string, params: Record<string, any>, database?: string): Result {\r\n    const session = this.getReadSession(database);\r\n    return session.run(cypher, params);\r\n  }\r\n\r\n  write(cypher: string, params: Record<string, any>, database?: string): Result {\r\n    const session = this.getWriteSession(database);\r\n    return session.run(cypher, params);\r\n  }\r\n}","import neo4j, { Driver } from \"neo4j-driver\";\r\nimport { Neo4jConfig } from \"./neo4j-config.interface\";\r\n\r\nexport const createDriver = async (config: Neo4jConfig) => {\r\n    const driver: Driver = neo4j.driver(\r\n        `${config.scheme}://${config.host}:${config.port}`,\r\n        neo4j.auth.basic(config.username, config.password)\r\n    );\r\n\r\n    await driver.verifyConnectivity();\r\n\r\n    return driver;\r\n}","import { BadRequestException } from \"@nestjs/common\";\r\n\r\nexport class ValidationException extends BadRequestException {\r\n  constructor(public validationErrors: string[]) {\r\n    super();\r\n  }\r\n}","import { ArgumentsHost, Catch, ExceptionFilter } from \"@nestjs/common\";\r\nimport { ValidationException } from \"./validation.exception\";\r\n\r\n@Catch(ValidationException)\r\nexport class ValidationFilter implements ExceptionFilter {\r\n  catch(exception: ValidationException, host: ArgumentsHost) {\r\n    const ctx = host.switchToHttp();\r\n    const response = ctx.getResponse();\r\n\r\n    return response.status(400).json({\r\n        statusCode: 400,\r\n        timestamp: new Date().toISOString(),\r\n        errors: exception.validationErrors\r\n    });\r\n  }\r\n}\r\n\r\n","import { Injectable, PipeTransform } from '@nestjs/common';\r\nimport { ObjectId } from 'mongodb';\r\nimport { ValidationException } from '../filters/validation.exception';\r\n\r\n@Injectable()\r\nexport class ParseObjectIdPipe implements PipeTransform<any, ObjectId> {\r\n\r\n    public transform(value: any): ObjectId {\r\n        try {\r\n            const transformedObjectId: ObjectId = ObjectId.createFromHexString(value);\r\n            return transformedObjectId;\r\n        } catch (error) {\r\n            throw new ValidationException([`ObjectId has wrong value: ${value}, ObjectId is not valid!`]);\r\n        }\r\n    }\r\n\r\n    public static isValidObjectId(value: any): boolean {\r\n        try {\r\n            ObjectId.createFromHexString(value);\r\n            return true;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n}","import { IsDefined, IsOptional, IsString, MinLength } from \"class-validator\";\r\n\r\nexport class CreateThreadDto {\r\n  @IsString({ message: 'Title must be a string!' })\r\n  @IsDefined({ message: 'Title is required!' })\r\n  @MinLength(5, { message: 'Title must be at least 5 characters long!' })\r\n  title: string;\r\n\r\n  @IsString({ message: 'Content must be a string!' })\r\n  @IsDefined({ message: 'Content is required!' })\r\n  content: string;\r\n\r\n  @IsString({ message: 'ImageUrl must be a string!' })\r\n  @IsDefined({ message: 'ImageUrl is required!' })\r\n  imageUrl: string;\r\n\r\n  @IsString({ message: 'ExternLink must be a string!' })\r\n  @IsDefined({ message: 'ExternLink is required!' })\r\n  externLink: string;\r\n}\r\n\r\nexport class UpdateThreadDto {\r\n  @IsOptional()\r\n  @IsString({ message: 'Title must be a string!' })\r\n  @IsDefined({ message: 'Title is required!' })\r\n  @MinLength(5, { message: 'Title must be at least 5 characters long!' })\r\n  title: string;\r\n\r\n  @IsOptional()\r\n  @IsString({ message: 'Content must be a string!' })\r\n  @IsDefined({ message: 'Content is required!' })\r\n  content: string;\r\n\r\n  @IsOptional()\r\n  @IsString({ message: 'ImageUrl must be a string!' })\r\n  @IsDefined({ message: 'ImageUrl is required!' })\r\n  imageUrl: string;\r\n\r\n  @IsOptional()\r\n  @IsString({ message: 'ExternLink must be a string!' })\r\n  @IsDefined({ message: 'ExternLink is required!' })\r\n  externLink: string;\r\n}","import { Body, Controller, Delete, Get, Logger, Param, Patch, Post, Req } from '@nestjs/common';\r\nimport { Public } from '../auth/auth.module';\r\nimport { ParseObjectIdPipe } from '../shared/pipes/ParseObjectIdPipe';\r\nimport { CreateThreadDto, UpdateThreadDto } from './thread-dto';\r\nimport { Thread } from \"./thread.schema\";\r\nimport { ThreadService } from './thread.service';\r\n\r\n@Controller()\r\nexport class ThreadController {\r\n  constructor(private readonly threadService: ThreadService) {}\r\n\r\n  @Public()\r\n  @Get('communities/:communityId/threads/:threadId')\r\n  async getById(\r\n    @Param('communityId', ParseObjectIdPipe) communityId: string,\r\n    @Param('threadId', ParseObjectIdPipe) threadId: string,\r\n    ): Promise<Thread> {\r\n    \r\n    Logger.log(`Getting thread with id: ${threadId} from community with id of ${communityId} (READ)`);\r\n    \r\n    return await this.threadService.getById(communityId, threadId);\r\n  }\r\n\r\n  @Public()\r\n  @Get('communities/:communityId/threads')\r\n  async getAll(\r\n    @Param('communityId', ParseObjectIdPipe) communityId : string): Promise<Thread[]> {\r\n\r\n      Logger.log(`Getting all threads from community with an id of: ${communityId} (READ)`);\r\n\r\n      return this.threadService.getAll(communityId);\r\n    }\r\n\r\n  @Post('communities/:communityId/threads')\r\n  async create(@Param('communityId', ParseObjectIdPipe) communityId : string, \r\n  @Req() req, \r\n  @Body() createThreadDto: CreateThreadDto): Promise<Thread> {\r\n      Logger.log(`Creating thread (CREATE)`);\r\n\r\n      return this.threadService.create(createThreadDto, communityId, req);\r\n  }\r\n\r\n  @Patch('communities/:communityId/threads/:threadId')\r\n  async update(@Param('communityId', ParseObjectIdPipe) communityId: string,\r\n  @Param('threadId', ParseObjectIdPipe) threadId: string,\r\n  @Req() req,\r\n  @Body() updateThreadDto: UpdateThreadDto): Promise<Thread> {\r\n    Logger.log(`Getting thread with id: ${threadId} (UPDATE)`);\r\n\r\n    return this.threadService.update(communityId, threadId, req, updateThreadDto);\r\n  }\r\n\r\n  @Delete('communities/:communityId/threads/:threadId')\r\n  async delete(@Param('communityId', ParseObjectIdPipe) communityId: string, \r\n  @Param('threadId', ParseObjectIdPipe) threadId: string, \r\n  @Req() req): Promise<Thread> {\r\n\r\n    Logger.log(`Getting thread with id: ${threadId} from community with id: ${communityId} (DELETE)`);\r\n    \r\n    return this.threadService.delete(communityId, threadId, req);\r\n  }\r\n\r\n  @Post('communities/:communityId/threads/:threadId/upvote')\r\n  async upvote(@Param('communityId', ParseObjectIdPipe) communityId : string,\r\n   @Param('threadId', ParseObjectIdPipe) threadId : string,\r\n   @Req() req): Promise<Thread> {\r\n      Logger.log(`Creating thread (CREATE)`);\r\n\r\n      return this.threadService.upvote(communityId, threadId, req);\r\n  }\r\n\r\n}","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { CommunityModule } from '../community/community.module';\r\nimport { UserModule } from '../user/user.module';\r\nimport { ThreadController } from './thread.controller';\r\nimport { Thread, ThreadSchema } from './thread.schema';\r\nimport { ThreadService } from './thread.service';\r\n\r\n@Module({\r\n  imports: [\r\n    MongooseModule.forFeature([\r\n      { name: Thread.name, schema: ThreadSchema },\r\n    ]), CommunityModule, UserModule\r\n  ],\r\n  controllers: [ThreadController],\r\n  providers: [ThreadService, MongooseModule],\r\n})\r\nexport class ThreadModule {}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { IThread } from '@riddet-app/data';\r\nimport {\r\n  IsDate,\r\n  IsDefined, IsString,\r\n  MinLength\r\n} from 'class-validator';\r\nimport { Document, ObjectId, Types } from 'mongoose';\r\nimport { Message } from '../message/message.schema';\r\n \r\nexport type ThreadDocument = Thread & Document;\r\n\r\n@Schema()\r\nexport class Thread implements IThread {\r\n  _id : Types.ObjectId\r\n\r\n  @IsString({ message: 'Name must be a string!' })\r\n  @IsDefined({ message: 'Name is required!' })\r\n  @MinLength(5, { message: 'Name must be at least 5 characters long!' })\r\n  @Prop()\r\n  title: string;\r\n\r\n  @Prop()\r\n  content: string;\r\n\r\n  @IsString({ message: 'Image URL must be a string!' })\r\n  @Prop()\r\n  imageUrl: string;\r\n\r\n  @IsString({ message: 'ExternLink must be a string!' })\r\n  @Prop()\r\n  externLink: string;\r\n\r\n  @Prop()\r\n  views: number;\r\n\r\n  @Prop({\r\n    default: [],\r\n    ref: 'User',\r\n  })\r\n  upvotes: [ObjectId]\r\n\r\n  @IsDate({ message: 'Publication date must be a date!' })\r\n  @Prop()\r\n  publicationDate: Date;\r\n\r\n  @Prop({\r\n    default: [],\r\n  })\r\n  messages: [Message]\r\n\r\n  @Prop({\r\n    ref: 'User',\r\n  })\r\n  createdBy: ObjectId\r\n}\r\n\r\nexport const ThreadSchema = SchemaFactory.createForClass(Thread);\r\n","import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\r\nimport { InjectModel } from \"@nestjs/mongoose\";\r\nimport { Model, Types } from \"mongoose\";\r\nimport { Role } from \"../auth/role.enum\";\r\nimport { Community, CommunityDocument } from \"../community/community.schema\";\r\nimport { UserService } from \"../user/user.service\";\r\nimport { CreateThreadDto, UpdateThreadDto } from \"./thread-dto\";\r\nimport { Thread } from \"./thread.schema\";\r\n\r\n@Injectable()\r\nexport class ThreadService {\r\n    constructor(@InjectModel(Community.name) private communityModel: Model<CommunityDocument>,\r\n    private readonly userService : UserService ) {}\r\n\r\n    async getById(communityId : string, threadId : string): Promise<Thread> {\r\n        await this.doesExist(communityId, threadId);\r\n\r\n        await this.communityModel.findOneAndUpdate({_id : new Types.ObjectId(communityId), \"threads._id\" : new Types.ObjectId(threadId)}, {$inc: {\"threads.$.views\" : 1}});\r\n\r\n        const thread =  (await this.communityModel.aggregate([\r\n            { $match : { _id : new Types.ObjectId(communityId)}},\r\n            { $match : { \"threads._id\" : new Types.ObjectId(threadId)}},\r\n            { $unwind : { path: \"$participants\", preserveNullAndEmptyArrays: true }},\r\n            { $project : {\r\n                _id : 0,\r\n                \"threads\" : {\r\n                    $filter : {\r\n                        input : \"$threads\",\r\n                        as : \"thread\",\r\n                        cond : { $eq : [\"$$thread._id\", new Types.ObjectId(threadId)]}\r\n                    }\r\n                }}\r\n            },\r\n            { $unwind : { path: \"$threads\", preserveNullAndEmptyArrays: true }},\r\n            { $lookup : { \r\n                from : \"users\",\r\n                localField : \"threads.createdBy\",\r\n                foreignField : \"_id\",\r\n                as : \"threads.createdBy\"\r\n            }},\r\n            { $unwind : { path: \"$threads.messages\", preserveNullAndEmptyArrays: true }},\r\n            { $lookup : { \r\n                from : \"users\",\r\n                localField : \"threads.messages.createdBy\",\r\n                foreignField : \"_id\",\r\n                as : \"threads.messages.createdBy\"\r\n            }},\r\n            { $set: {\r\n                \"threads.messages.createdBy\": \"$threads.messages.createdBy\" \r\n            }},\r\n            { $group: {\r\n                _id: \"$threads._id\",\r\n                title: {\r\n                  $first: \"$threads.title\"\r\n                },\r\n                content: {\r\n                  $first: \"$threads.content\"\r\n                },\r\n                externLink: {\r\n                    $first: \"$threads.externLink\"\r\n                },\r\n                views: {\r\n                  $first: \"$threads.views\"\r\n                },\r\n                imageUrl: {\r\n                    $first: \"$threads.imageUrl\"\r\n                },\r\n                upvotes: {\r\n                  $first: \"$threads.upvotes\"\r\n                },\r\n                messages: {\r\n                  $push: \"$threads.messages\"   \r\n                },\r\n                publicationDate: {\r\n                    $first: \"$threads.publicationDate\"\r\n                },\r\n                createdBy: {\r\n                  $first: \"$threads.createdBy\"\r\n                }\r\n            }},\r\n            { $unset: [\"createdBy.password\", \"createdBy.__v\", \"messages.createdBy.password\", \"messages.createdBy.__v\"]},\r\n        ]))[0]\r\n\r\n        return {...thread, createdBy : thread.createdBy[0], messages : thread.messages.map(message => ({...message, createdBy : message.createdBy[0]}))}\r\n    }\r\n\r\n    async getAll(communityId : string): Promise<Thread[]> {\r\n        await this.doesExist(communityId);\r\n\r\n       return (await this.communityModel.aggregate([\r\n            { $match : { _id : new Types.ObjectId(communityId)}},\r\n            { $unwind : { path: \"$participants\", preserveNullAndEmptyArrays: true }},\r\n            { $project : {\r\n                _id : 0,\r\n                \"threads\" : {\r\n                    $filter : {\r\n                        input : \"$threads\",\r\n                        as : \"thread\",\r\n                        cond : true\r\n                    }\r\n                }}\r\n            },\r\n            { $unwind : { path: \"$threads\", preserveNullAndEmptyArrays: false }},\r\n            { $unwind : { path: \"$threads.createdBy\", preserveNullAndEmptyArrays: true }},\r\n\r\n            { $lookup : { \r\n                from : \"users\",\r\n                localField : \"threads.createdBy\",\r\n                foreignField : \"_id\",\r\n                as : \"threads.createdBy\"\r\n            }},\r\n            { $unwind : { path: \"$threads.messages\", preserveNullAndEmptyArrays: true }},\r\n            { $lookup : { \r\n                from : \"users\",\r\n                localField : \"threads.messages.createdBy\",\r\n                foreignField : \"_id\",\r\n                as : \"threads.messages.createdBy\"\r\n            }},\r\n            { $set: {\r\n                \"threads.messages.createdBy\": \"$threads.messages.createdBy\" \r\n            }},\r\n            { $group: {\r\n                _id: \"$threads._id\",\r\n                title: {\r\n                  $first: \"$threads.title\"\r\n                },\r\n                content: {\r\n                  $first: \"$threads.content\"\r\n                },\r\n                externLink: {\r\n                    $first: \"$threads.externLink\"\r\n                },\r\n                views: {\r\n                  $first: \"$threads.views\"\r\n                },\r\n                imageUrl: {\r\n                    $first: \"$threads.imageUrl\"\r\n                },\r\n                upvotes: {\r\n                  $first: \"$threads.upvotes\"\r\n                },\r\n                messages: {\r\n                  $push: \"$threads.messages\"   \r\n                },\r\n                publicationDate: {\r\n                    $first: \"$threads.publicationDate\"\r\n                },\r\n                createdBy: {\r\n                    $first: \"$threads.createdBy\"\r\n                }\r\n            }},\r\n            { $unset: [\"createdBy.password\", \"createdBy.__v\", \"messages.createdBy.password\", \"messages.createdBy.__v\"]},\r\n        ])).map(thread => thread = {...thread, createdBy: thread.createdBy[0], messages: thread.messages.map(message => message = {...message, createdBy: message.createdBy[0]})});\r\n    }\r\n\r\n    async create(createThreadDto : CreateThreadDto, communityId : string, req): Promise<Thread> {\r\n        await this.doesExist(communityId);\r\n\r\n        const community = await this.communityModel.findOne({ _id : communityId });\r\n\r\n        if(!((await this.communityModel.find({$and: [{_id: communityId}, {participants: { $in : [req.user.id]}}]})).length > 0)\r\n        && !(community.createdBy._id.equals(new Types.ObjectId(req.user.id)))\r\n        && !(req.user.roles.includes(Role.Admin))) {\r\n            throw new HttpException(`You are not a member of this community`, HttpStatus.BAD_REQUEST);\r\n        }\r\n\r\n        const mergedthread = {_id: new Types.ObjectId(), \r\n            ...createThreadDto, \r\n            views: 0, \r\n            upvotes: [],\r\n            publicationDate: new Date(), \r\n            messages: [], \r\n            createdBy: req.user.id\r\n        };\r\n\r\n        return await this.communityModel.findOneAndUpdate(\r\n            { _id: communityId }, \r\n            {$push: { threads : mergedthread }}, \r\n            { new: true });\r\n    }\r\n\r\n    async update(communityId: string, threadId : string, req, updateThreadDto: UpdateThreadDto): Promise<Thread> {\r\n        await this.doesExist(communityId, threadId);\r\n\r\n        const thread = (await this.communityModel.findOne(\r\n            {_id: communityId}, \r\n            {threads:{$elemMatch:{_id: threadId}}}))\r\n            .threads.filter(async thread => thread._id === new Types.ObjectId(threadId))[0];\r\n\r\n        if(!(await this.isMyData(thread.createdBy.toString(), req.user.id)) && !(req.user.roles.includes(Role.Admin))) {\r\n            throw new HttpException(`You cannot alter data that isn't yours!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n\r\n        return await this.communityModel.findOneAndUpdate(\r\n            {_id : communityId, \"threads._id\" : threadId}, \r\n            {$set: {\"threads.$\" : {...thread, ...updateThreadDto}}}, \r\n            {new: true});\r\n    }\r\n\r\n    async delete(communityId : string, threadId : string, req): Promise<Thread> {\r\n        await this.doesExist(communityId, threadId);\r\n\r\n        const thread = (await this.communityModel.findOne(\r\n            {_id: communityId}, \r\n            {threads:{$elemMatch:{_id: threadId}}}))\r\n            .threads.filter(async thread => thread._id === new Types.ObjectId(threadId))[0];\r\n\r\n        if(!(await this.isMyData(thread.createdBy.toString(), req.user.id)) && !(req.user.roles.includes(Role.Admin))) {\r\n            throw new HttpException(`You cannot alter data that isn't yours!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n\r\n        return (await this.communityModel.findOneAndUpdate(\r\n            { _id: new Types.ObjectId(communityId) }, \r\n            {$pull: { threads : {_id: new Types.ObjectId(threadId)}}}, \r\n            { new: true }))\r\n    }\r\n\r\n    async upvote(communityId : string, threadId : string, req): Promise<Thread> {\r\n        await this.doesExist(communityId, threadId);\r\n\r\n        let community;\r\n\r\n        if ((await this.communityModel.find({ $and: [{_id: communityId}, {threads: {$elemMatch: {_id: threadId, upvotes: {$in: [req.user.id]}}}}]})).length === 0) {\r\n            community = await this.communityModel.findOneAndUpdate({_id : communityId, \"threads._id\" : threadId}, {$push: {\"threads.$.upvotes\" : req.user.id}} , {new: true});\r\n        } else {\r\n            community = await this.communityModel.findOneAndUpdate({_id : communityId, \"threads._id\" : threadId}, {$pull: {\"threads.$.upvotes\" : req.user.id}} , {new: true});\r\n        }\r\n\r\n        return community.threads.filter(async thread => thread._id === new Types.ObjectId(threadId))[0];\r\n    }\r\n\r\n    //validation\r\n    async isMyData(currentUserId? : string, targetUserId? : string) : Promise<boolean> {\r\n        return new Types.ObjectId(currentUserId).equals(new Types.ObjectId(targetUserId))\r\n    }\r\n\r\n    async doesExist(communityId : string, threadId? : string) : Promise<void> {\r\n        const community = await this.communityModel.findOne({ _id : communityId });\r\n\r\n        if(!community) {\r\n            throw new HttpException(`Community with id of ${communityId} doesn't exist!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n\r\n        if(threadId) {\r\n            if(!(community.threads.filter(thread => thread._id.equals(new Types.ObjectId(threadId))).length > 0)) {\r\n                throw new HttpException(`Thread with id of ${threadId} doesn't exist in the community with id of ${communityId}!`, HttpStatus.BAD_REQUEST);\r\n            }\r\n        }\r\n    }\r\n}","import { Body, Controller, Get, Logger, Param, Patch, Post, Req } from '@nestjs/common';\r\nimport { Roles } from '../auth/auth.module';\r\nimport { Role } from '../auth/role.enum';\r\nimport { ParseObjectIdPipe } from '../shared/pipes/ParseObjectIdPipe';\r\nimport { CreateUserDto, UpdateUserDto } from './user.dto';\r\nimport { User } from './user.schema';\r\nimport { UserService } from './user.service';\r\n\r\n@Controller()\r\nexport class UserController {\r\n  constructor(private readonly userService: UserService) {}\r\n\r\n  @Get('users/:id')\r\n  async getById(\r\n    @Param('id', ParseObjectIdPipe) id: string): Promise<User> {\r\n      \r\n    Logger.log(`Getting user with id: ${id} (READ)`);\r\n\r\n    return await this.userService.getById(id);\r\n  }\r\n\r\n  @Get('users')\r\n  async getAll(): Promise<User[]> {\r\n      Logger.log(`Getting all users (READ)`);\r\n      return this.userService.getAll();\r\n  }\r\n\r\n  @Roles(Role.Admin)\r\n  @Post('users')\r\n  async create(@Body() createUserDto: CreateUserDto): Promise<User> {\r\n      Logger.log(`Creating community (CREATE)`);\r\n\r\n      return this.userService.create(createUserDto);\r\n  }\r\n\r\n  @Patch('users/:id')\r\n  async update(@Req() req, @Param('id', ParseObjectIdPipe) id: string, @Body() updateUserDto: UpdateUserDto): Promise<User> {\r\n\r\n    Logger.log(`Getting user with id: ${id} (UPDATE)`);\r\n\r\n    return this.userService.update(id, updateUserDto, req);\r\n  }\r\n\r\n  //Follow\r\n  @Post('users/:id/follow')\r\n  async follow(@Req() req, @Param('id', ParseObjectIdPipe) id: string): Promise<User[]> {\r\n    Logger.log(`Getting user with id: ${id} (READ)`);\r\n\r\n    return this.userService.follow(id, req);\r\n  }\r\n\r\n  @Post('users/:id/unfollow')\r\n  async unfollow(@Req() req, @Param('id', ParseObjectIdPipe) id: string) {\r\n    Logger.log(`Getting user with id: ${id} (READ)`);\r\n\r\n    return this.userService.unfollow(id, req);\r\n  }\r\n}","import { IsDefined, IsEmail, IsOptional, IsString, Matches, MinLength } from \"class-validator\";\r\n\r\nexport class CreateUserDto {\r\n    @IsString({ message: 'Username must be a string!' })\r\n    @IsDefined({ message: 'Username is required!' })\r\n    @MinLength(5, { message: 'Username must be at least 5 characters long!' })\r\n    username: string;\r\n  \r\n    @IsString({ message: 'Firstname must be a string!' })\r\n    @IsDefined({ message: 'Firstname is required!' })\r\n    firstname: string;\r\n    \r\n    @IsString({ message: 'Firstname must be a string!' })\r\n    @IsDefined({ message: 'Firstname is required!' })\r\n    lastname: string;\r\n  \r\n    @IsEmail({ message: 'Email must be a valid email!' })\r\n    @IsString({ message: 'Email must be a string!' })\r\n    @IsDefined({ message: 'Email is required!' })\r\n    email: string;\r\n\r\n    @Matches(/^\\d{4}[./-]\\d{2}[./-]\\d{2}$/, { message: 'Date of birth must be a valid date! (YYYY-MM-DD)' })\r\n    @IsDefined({ message: 'Date of birth is required!' })\r\n    dateOfBirth: Date;\r\n  \r\n    @IsString({ message: 'Password must be a string!' })\r\n    @IsDefined({ message: 'Password is required!' })\r\n    @MinLength(8, { message: 'Password must be at least 8 characters long!' })\r\n    password: string;\r\n  \r\n    @IsString({ message: 'UserImageUrl must be a string!' })\r\n    @IsDefined({ message: 'UserImageUrl is required!' })\r\n    userImageUrl: string;\r\n}\r\n\r\nexport class UpdateUserDto {\r\n    @IsOptional()\r\n    @IsString({ message: 'Username must be a string!' })\r\n    @IsDefined({ message: 'Username is required!' })\r\n    @MinLength(5, { message: 'Username must be at least 5 characters long!' })\r\n    username: string;\r\n  \r\n    \r\n    @IsOptional()\r\n    @IsString({ message: 'Firstname must be a string!' })\r\n    @IsDefined({ message: 'Firstname is required!' })\r\n    firstname: string;\r\n    \r\n    @IsOptional()\r\n    @IsString({ message: 'Firstname must be a string!' })\r\n    @IsDefined({ message: 'Firstname is required!' })\r\n    lastname: string;\r\n  \r\n    @IsOptional()\r\n    @IsEmail({ message: 'Email must be a valid email!' })\r\n    @IsString({ message: 'Email must be a string!' })\r\n    @IsDefined({ message: 'Email is required!' })\r\n    email: string;\r\n\r\n    @IsOptional()\r\n    @Matches(/^\\d{4}[./-]\\d{2}[./-]\\d{2}$/, { message: 'Date of birth must be a valid date! (YYYY-MM-DD)' })\r\n    @IsDefined({ message: 'Date of birth is required!' })\r\n    dateOfBirth: Date;\r\n  \r\n    @IsOptional()\r\n    @IsString({ message: 'Password must be a string!' })\r\n    @IsDefined({ message: 'Password is required!' })\r\n    @MinLength(8, { message: 'Password must be at least 8 characters long!' })\r\n    password: string;\r\n  \r\n    @IsOptional()\r\n    @IsString({ message: 'UserImageUrl must be a string!' })\r\n    @IsDefined({ message: 'UserImageUrl is required!' })\r\n    userImageUrl: string;\r\n}","import { forwardRef, Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { CommunityModule } from '../community/community.module';\r\nimport { Neo4jModule } from '../neo4j/neo4j.module';\r\nimport { UserController } from './user.controller';\r\nimport { User, UserSchema } from './user.schema';\r\nimport { UserService } from './user.service';\r\n\r\n@Module({\r\n    imports: [\r\n      Neo4jModule.forRoot({\r\n        scheme: 'bolt',\r\n        host: '127.0.0.1',\r\n        port: 7687,\r\n        username: 'neo4j',\r\n        password: 'neo',\r\n      }),\r\n        MongooseModule.forFeature([\r\n          { name: User.name, schema: UserSchema },\r\n        ]), forwardRef(() => CommunityModule)\r\n      ],\r\n    providers: [UserService],\r\n    controllers: [UserController],\r\n    exports: [UserService],\r\n})\r\nexport class UserModule {}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { IUser } from '@riddet-app/data';\r\nimport {\r\n  IsBoolean,\r\n  IsDate, IsDefined, IsEmail, IsString, Matches, MinLength\r\n} from 'class-validator';\r\nimport { Document, ObjectId, Types } from 'mongoose';\r\nimport { Role } from '../auth/role.enum';\r\n \r\nexport type UserDocument = User & Document;\r\n\r\n@Schema()\r\nexport class User implements IUser{\r\n  _id : Types.ObjectId\r\n\r\n  @IsString({ message: 'Username must be a string!' })\r\n  @IsDefined({ message: 'Username is required!' })\r\n  @MinLength(5, { message: 'Username must be at least 5 characters long!' })\r\n  @Prop()\r\n  username: string;\r\n\r\n  @IsString({ message: 'Firstname must be a string!' })\r\n  @IsDefined({ message: 'Firstname is required!' })\r\n  @Prop()\r\n  firstname: string;\r\n  \r\n  @IsString({ message: 'Lastname must be a string!' })\r\n  @IsDefined({ message: 'Lastname is required!' })\r\n  @Prop()\r\n  lastname: string;\r\n\r\n  @IsEmail({ message: 'Email must be a valid email!' })\r\n  @IsString({ message: 'Email must be a string!' })\r\n  @IsDefined({ message: 'Email is required!' })\r\n  @Prop()\r\n  email: string;\r\n\r\n  @Matches(/^\\d{4}[./-]\\d{2}[./-]\\d{2}$/, { message: 'Date of birth must be a valid date! (YYYY-MM-DD)' })\r\n  @IsDefined({ message: 'Date of birth is required!' })\r\n  @Prop()\r\n  dateOfBirth: Date;\r\n\r\n  @IsString({ message: 'Password must be a string!' })\r\n  @IsDefined({ message: 'Password is required!' })\r\n  @MinLength(8, { message: 'Password must be at least 8 characters long!' })\r\n  @Prop()\r\n  password: string;\r\n\r\n  @IsString({ message: 'UserImageUrl must be a string!' })\r\n  @IsDefined({ message: 'UserImageUrl is required!' })\r\n  @Prop()\r\n  userImageUrl: string;\r\n\r\n  @IsDate({ message: 'Creation date must be a date!' })\r\n  @Prop()\r\n  creationDate: Date;\r\n\r\n  @IsBoolean({message: 'isActive must be a boolean!'})\r\n  @Prop()\r\n  isActive: boolean;\r\n\r\n  @Prop()\r\n  roles: Role[];\r\n\r\n  @Prop({\r\n    default: [],\r\n    ref: 'Community',\r\n  })\r\n  joinedCommunities : [ObjectId]\r\n\r\n  @Prop({\r\n    default: [],\r\n    ref: 'Community',\r\n  })\r\n  createdCommunities : [ObjectId]\r\n\r\n  @Prop({\r\n    default: [],\r\n    ref: 'User',\r\n  })\r\n  following : [ObjectId]\r\n\r\n  @Prop({\r\n    default: [],\r\n    ref: 'User',\r\n  })\r\n  followers : [ObjectId]\r\n}\r\n\r\nexport const UserSchema = SchemaFactory.createForClass(User);\r\n","import { forwardRef, HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport * as bcrypt from 'bcryptjs';\r\nimport { Model, Types } from 'mongoose';\r\nimport { Role } from '../auth/role.enum';\r\nimport { Community, CommunityDocument } from '../community/community.schema';\r\nimport { CommunityService } from '../community/community.service';\r\nimport { Neo4jService } from '../neo4j/neo4j.service';\r\nimport { ValidationException } from '../shared/filters/validation.exception';\r\nimport { CreateUserDto } from './user.dto';\r\nimport { User, UserDocument } from './user.schema';\r\n\r\n\r\n@Injectable()\r\nexport class UserService {\r\n  constructor(\r\n    @InjectModel(User.name) private userModel: Model<UserDocument>,\r\n    @InjectModel(Community.name) private communityModel: Model<CommunityDocument>,\r\n    @Inject(forwardRef(() => CommunityService)) private communityService : CommunityService,\r\n    private readonly neo4jService: Neo4jService){}\r\n\r\n  async findByUsernameOrEmail(username: string): Promise<User | undefined> {\r\n    return await this.userModel.findOne({$or: [{username}, { email : username }]});\r\n  }\r\n\r\n  async getById(_id: string): Promise<User> {\r\n    await this.doesExist(_id);\r\n\r\n    return (await this.userModel.aggregate([\r\n      {$match: { \"_id\": new Types.ObjectId(_id) }},\r\n      {$lookup: {\r\n        from: \"users\",\r\n        localField: \"following\",\r\n        foreignField: \"_id\",\r\n        as: \"following\"\r\n      }},\r\n      {$lookup: {\r\n        from: \"users\",\r\n        localField: \"followers\",\r\n        foreignField: \"_id\",\r\n        as: \"followers\"\r\n      }},\r\n      {$unset: [\"password\", \"__v\"]}\r\n    ]))[0];\r\n  }\r\n\r\n  async getAll(): Promise<User[]> {\r\n    return await this.userModel.aggregate([\r\n      {$lookup: {\r\n        from: \"users\",\r\n        localField: \"following\",\r\n        foreignField: \"_id\",\r\n        as: \"following\"\r\n      }},\r\n      {$lookup: {\r\n        from: \"users\",\r\n        localField: \"followers\",\r\n        foreignField: \"_id\",\r\n        as: \"followers\"\r\n      }},\r\n      {$unset: [\"password\", \"__v\"]}\r\n    ])\r\n  }\r\n\r\n  async create(createUserDto : CreateUserDto): Promise<User> {\r\n      await this.validate(createUserDto);\r\n\r\n      createUserDto.dateOfBirth = new Date(createUserDto.dateOfBirth);\r\n      createUserDto.dateOfBirth.setHours(createUserDto.dateOfBirth.getHours() + 1);\r\n\r\n      const mergedUser = {...createUserDto, creationDate: new Date(), isActive: true, roles: [Role.User], password: await bcrypt.hashSync(createUserDto.password, 10)};\r\n\r\n      const user = await new this.userModel(mergedUser).save();\r\n\r\n      await this.neo4jService.write(`\r\n      CREATE\r\n      (n:User {\r\n      id: '${user._id.toString()}',\r\n      username: '${user.username}', \r\n      dateOfBirth: '${user.dateOfBirth.toISOString()}'\r\n     })`,\r\n    {});\r\n\r\n      return user;\r\n  }\r\n\r\n  async update(updateUserId: string, user: Partial<User>, req): Promise<User> {\r\n    await this.doesExist(updateUserId);\r\n\r\n    const currentUser = req.user;\r\n\r\n    if(await this.isMyData(updateUserId, currentUser.id) || currentUser.roles.includes(Role.Admin)) {\r\n      await this.validate(user, currentUser.id, updateUserId);\r\n\r\n      if(user.dateOfBirth) {\r\n        user.dateOfBirth = new Date(user.dateOfBirth);\r\n        user.dateOfBirth.setHours(user.dateOfBirth.getHours() + 1);\r\n      }\r\n\r\n      if(user.password) {\r\n        user.password = await bcrypt.hashSync(user.password, 10)\r\n      }\r\n\r\n      //update embedded users\r\n      await this.communityService.updateCreator(updateUserId, {...(await this.userModel.findOne({ _id : updateUserId })).toObject(), ...user });\r\n\r\n      return this.userModel.findOneAndUpdate({ _id : updateUserId }, user, { new: true });\r\n    }\r\n    throw new ValidationException([`You cannot update other users!`]);\r\n  }\r\n\r\n  //following related methods\r\n\r\n  async follow(followUserId: string, req): Promise<User[]> {\r\n    await this.doesExist(followUserId);\r\n\r\n    if(await this.isMyData(followUserId, req.user.id)) {\r\n      throw new ValidationException([`You cannot follow yourself!`]);\r\n    }\r\n    \r\n    if (await (await this.userModel.find({ $and: [ {_id: req.user.id}, {following: { $in : followUserId}} ] })).length > 0) {\r\n      throw new ValidationException([`You already follow this person!`]);\r\n    }\r\n\r\n    const user = await this.userModel.findOneAndUpdate({ _id: req.user.id }, { $push: { following: followUserId } }, {new: true});\r\n    const otherUser = await this.userModel.findOneAndUpdate({ _id: followUserId}, { $push: { followers: req.user.id } }, {new: true});\r\n\r\n    return [user,otherUser]\r\n  }\r\n\r\n  async unfollow(followUserId: string, req): Promise<User[]> {\r\n    await this.doesExist(followUserId);\r\n\r\n    if(await this.isMyData(followUserId, req.user.id)) {\r\n      throw new ValidationException([`You cannot unfollow yourself!`]);\r\n    }\r\n    \r\n    if (await (await this.userModel.find({ $and: [ {_id: req.user.id}, {following: { $in : followUserId}} ] })).length === 0) {\r\n      throw new ValidationException([`You don't follow this person!`]);\r\n    }\r\n    \r\n    const user = await this.userModel.findOneAndUpdate({ _id: req.user.id }, {$pull: { following : followUserId }}, { new: true });\r\n    const otherUser = await this.userModel.findOneAndUpdate({ _id: followUserId }, {$pull: { followers : req.user.id }}, { new: true });\r\n\r\n    return [user,otherUser]\r\n  }\r\n\r\n  //community arrays\r\n  async addJoinedCommunity(userId : string, communityId: string): Promise<User> {\r\n    await this.doesExist(userId);\r\n\r\n    return await this.userModel.findOneAndUpdate({ _id: userId }, { $push: { joinedCommunities: communityId } }, {new: true});\r\n  }\r\n\r\n  async removeJoinedCommunity(userId : string, communityId: string): Promise<User> {\r\n    await this.doesExist(userId);\r\n\r\n    return await this.userModel.findOneAndUpdate({ _id: userId }, { $pull: { joinedCommunities: communityId } }, {new: true});\r\n  }\r\n\r\n    //community array fillers\r\n    async addCreatedCommunity(userId : string, communityId: string): Promise<User> {\r\n      await this.doesExist(userId);\r\n  \r\n\r\n      const user = await this.userModel.findOne({ _id: userId });\r\n\r\n      for await (const createdCommunityId of user.createdCommunities) {\r\n        await this.communityModel.updateMany({ _id: createdCommunityId, \"createdBy._id\": new Types.ObjectId(userId) }, { $push:  {\"createdBy.$[_id]createdCommunities\": communityId } } );\r\n      }\r\n\r\n      return await this.userModel.findOneAndUpdate({ _id: userId }, { $push: { createdCommunities: communityId } }, {new: true});\r\n    }\r\n\r\n    async removeCreatedCommunity(userId : string, communityId: string): Promise<User> {\r\n      await this.doesExist(userId);\r\n\r\n      const user = await this.userModel.findOne({ _id: userId });\r\n\r\n      for await (const createdCommunityId of user.createdCommunities) {\r\n        await this.communityModel.updateMany({ _id: createdCommunityId, \"createdBy._id\": new Types.ObjectId(userId) }, { $pull:  {\"createdBy.$[_id]createdCommunities\": communityId } } );\r\n      }\r\n\r\n      return await this.userModel.findOneAndUpdate({ _id: userId }, { $pull: { createdCommunities: communityId } }, {new: true});\r\n    }\r\n\r\n  //validation\r\n\r\n  async validate(user, currentUserId? : string, updateUserId? : string) : Promise<void> {\r\n    if((await this.userModel.find(\r\n      {\r\n        $or: \r\n        [\r\n            { username: user.username }, \r\n            { email: user.email }\r\n        ] \r\n      }, \r\n    )).length > 0 && !(await this.isMyData(currentUserId, updateUserId))) {\r\n    throw new HttpException(`Username or email is already in use!`, HttpStatus.BAD_REQUEST);\r\n    }\r\n\r\n    if(new Date(user.dateOfBirth) > new Date()) {\r\n    throw new HttpException(`Date of birth cannot be in the future!`, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  async isMyData(currentUserId? : string, targetUserId? : string) : Promise<boolean> {\r\n    return new Types.ObjectId(currentUserId).equals(new Types.ObjectId(targetUserId))\r\n  }\r\n\r\n  async doesExist(userId: string) : Promise<void> {\r\n    const user = await this.userModel.findOne({_id: userId});\r\n\r\n    if(!user) {\r\n      throw new HttpException(`User with id of ${userId} doesn't exist!`, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n}","export const environment = {\r\n  production: true,\r\n\r\n  DATABASE_CONNECTION: 'mongodb://127.0.0.1:27017/riddet',\r\n\r\n  //NEO4J\r\n  NEO4J_HOST: 'localhost',\r\n  NEO4J_PORT: 7687,\r\n  NEO4J_USERNAME: 'neo4j',\r\n  NEO4J_PASSWORD: 'neo',\r\n};\r\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/mongoose\");","module.exports = require(\"@nestjs/passport\");","module.exports = require(\"bcryptjs\");","module.exports = require(\"class-validator\");","module.exports = require(\"mongodb\");","module.exports = require(\"mongoose\");","module.exports = require(\"neo4j-driver\");","module.exports = require(\"passport-jwt\");","module.exports = require(\"passport-local\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Logger, ValidationError, ValidationPipe } from '@nestjs/common';\r\nimport { NestFactory } from '@nestjs/core';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { ValidationException } from './app/shared/filters/validation.exception';\r\nimport { ValidationFilter } from './app/shared/filters/validation.filter';\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule);\r\n  const globalPrefix = 'api';\r\n  app.setGlobalPrefix(globalPrefix);\r\n  app.enableCors();\r\n  const port = process.env.PORT || 9000;\r\n  app.useGlobalFilters(new ValidationFilter());\r\n  app.useGlobalPipes(new ValidationPipe({\r\n    skipMissingProperties: true, \r\n    exceptionFactory: (errors: ValidationError[]) => {\r\n      const messages = errors.map(error => `${error.property} has wrong value: ${error.value}, ${Object.values(error.constraints).join(', ')}`);\r\n      return new ValidationException(messages);\r\n    }\r\n  }));\r\n\r\n  await app.listen(port);\r\n  Logger.log(\r\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\r\n  );\r\n}\r\n\r\nbootstrap();\r\n"],"names":["AppController","constructor","appService","getData","this","Get","Controller","AppService","AppModule","Module","imports","MongooseModule","forRoot","environment","DATABASE_CONNECTION","Neo4jModule","scheme","host","port","username","password","CommunityModule","ThreadModule","UserModule","AuthModule","CategoryModule","MessageModule","controllers","providers","provide","APP_GUARD","useClass","JwtAuthGuard","RolesGuard","neo4jService","message","Injectable","Neo4jService","AuthController","authService","login","req","body","register","CreateUserDto","getProfile","user","Public","UseGuards","AuthGuard","Post","Request","Body","Roles","Role","User","AuthService","IS_PUBLIC_KEY","SetMetadata","ROLES_KEY","roles","PassportModule","JwtModule","secret","jwtConstants","signOptions","expiresIn","LocalStrategy","JwtStrategy","exports","userService","jwtService","validateUser","pass","findByUsernameOrEmail","bcrypt","compareSync","HttpException","HttpStatus","BAD_REQUEST","createUserDto","create","payload","loggedInUser","_id","firstname","lastname","email","userImageUrl","access_token","sign","UserService","JwtService","reflector","super","canActivate","context","getAllAndOverride","getHandler","getClass","Reflector","PassportStrategy","Strategy","jwtFromRequest","ExtractJwt","fromAuthHeaderAsBearerToken","ignoreExpiration","secretOrKey","validate","id","name","UNAUTHORIZED","NOT_FOUND","requiredRoles","switchToHttp","getRequest","some","role","includes","CommunitiesController","categoryService","getById","Logger","log","getAll","categoryDto","delete","Param","ParseObjectIdPipe","Promise","Admin","CategoryDto","Delete","CategoryService","IsString","IsDefined","IsNotEmpty","forFeature","Category","schema","CategorySchema","Prop","Schema","SchemaFactory","createForClass","categoryModel","doesExist","findOne","find","undefined","findOneAndDelete","$and","$ne","countDocuments","InjectModel","Model","communityService","getAllJoinedCommunities","getAllCreatedCommunities","createCommunityDto","update","updateCommunityDto","join","leave","Req","CreateCommunityDto","Patch","UpdateCommunityDto","CommunityService","MinLength","IsBoolean","ArrayNotEmpty","IsOptional","Community","CommunitySchema","forwardRef","unique","IsDate","Date","default","ref","communityModel","joinedCommunities","communityId","push","toString","createdCommunities","embedCategories","categories","category","creator","mergedCommunity","creationDate","createdBy","community","addCreatedCommunity","console","threads","updateId","isAllowedToAlter","updateObject","findOneAndUpdate","new","removeCreatedCommunity","participants","participantId","removeJoinedCommunity","length","$in","addJoinedCommunity","$push","$pull","updateCreator","creatorId","updateMany","$set","currentCommunityId","areValidObjectIds","value","every","isValidObjectId","currentUserId","Types","ObjectId","equals","Inject","MessageController","messageService","threadId","messageId","messageDto","like","MessageDto","MessageService","Message","MessageSchema","dedfault","messageModel","thread","aggregate","$match","$unwind","path","preserveNullAndEmptyArrays","$project","$filter","input","as","cond","$lookup","from","localField","foreignField","$group","messages","$unset","filter","map","mergedMessage","publicationDate","arrayFilters","oldMessage","isMyData","$elemMatch","likes","targetUserId","NEO4J_CONFIG","NEO4J_DRIVER","static","config","module","useValue","inject","useFactory","createDriver","driver","getDriver","getConfig","getReadSession","database","session","defaultAccessMode","READ","getWriteSession","WRITE","read","cypher","params","run","write","Neo4jConfig","Driver","auth","basic","verifyConnectivity","ValidationException","BadRequestException","validationErrors","ValidationFilter","catch","exception","getResponse","status","json","statusCode","timestamp","toISOString","errors","Catch","transform","createFromHexString","error","CreateThreadDto","UpdateThreadDto","ThreadController","threadService","createThreadDto","updateThreadDto","upvote","ThreadService","Thread","ThreadSchema","$inc","$eq","title","$first","content","externLink","views","imageUrl","upvotes","mergedthread","UserController","updateUserDto","follow","unfollow","UpdateUserDto","IsEmail","Matches","UserSchema","userModel","$or","dateOfBirth","setHours","getHours","mergedUser","isActive","hashSync","save","updateUserId","currentUser","toObject","followUserId","following","followers","userId","createdCommunityId","production","NEO4J_HOST","NEO4J_PORT","NEO4J_USERNAME","NEO4J_PASSWORD","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","app","NestFactory","setGlobalPrefix","enableCors","process","env","PORT","useGlobalFilters","useGlobalPipes","ValidationPipe","skipMissingProperties","exceptionFactory","property","Object","values","constraints","listen","bootstrap"],"sourceRoot":""}